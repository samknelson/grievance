<?php

/**
 * Implements hook_menu().
 */
function tfa_trusted_ip_menu() {
  $items = array();

  $items['admin/config/people/tfa-trusted-ip'] = array(
    'title' => t('Two-Factor Authentication Trusted IPs'),
    'description' => t('Set trusted IP addresses for two-factor authentication') ,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_trusted_ip_admin'),
    'access arguments' => array('grievance admin'),
  );

  return $items;
}

function tfa_trusted_ip_admin() {
  $form = array();

  $form['tfa_trusted_ip'] = array(
    '#type' => 'textarea',
    '#title' => t('Trusted IPs'),
    '#default_value' => variable_get('tfa_trusted_ip', ''),
  );


  return system_settings_form($form);
}

/**
 * Implements hook_permission().
 */
function tfa_trusted_ip_permission() {
  return array(
    'administer trusted ips' => array(
      'title' => t('Administer Trusted IPs'),
      'description' => t('Administer the trusted IP address list for two-factor authentication.'),
    ),
  );
}

/**
 * Implements hook_tfa_api().
 */
function tfa_trusted_ip_tfa_api() {
  return array(
    'tfa_trusted_ip' => array(
      'class' => 'TfaTrustedIP',
      'name' => 'Trusted IP',
    ),
  );
}

/**
 * Create TfaTrustedIP plugin.
 *
 * @param array $context
 * @return TfaTotp
 */
function tfa_trusted_ip_create($context) {
  return new TfaTrustedIP($context);
}

/**
 * Alters tfa_context array to set plugins from user settings.
 */
function tfa_trusted_ip_tfa_context_alter(&$context) {
  // $context can be empty during beginning of TFA process.
  if (empty($context)) {
    return;
  }
}

/**
 * Implements hook_tfa_ready_require().
 */
function tfa_trusted_ip_tfa_ready_require($account) {
  return FALSE;
}
