<?php

// I hate notice errors
ini_set('error_reporting', ini_get('error_reporting') & ~E_NOTICE);

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.permission.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.menu.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.register.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.register_user_select.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.register_bullpen.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.vbo.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.phonebank.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.bullpen.inc";

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_landing.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.participant_definition.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_list.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_list_bullpen.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_create.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_info.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_participants.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_schedule.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_body.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_register.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_register_byname.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_register_bulk.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_participant_definition_audio.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_participant_definition_callerid.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_phonebank.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_phonebank_call.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_phonebank_lock.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_phonebank_status.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_phonebank_settings.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_bullpen_view.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_bullpen_self.inc";

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_create.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_register.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_participants.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_edit.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_view.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_schedule.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_phonebank.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_bullpen.inc";

function sirius_event_type_json($event_node) {
  $event_type_term = taxonomy_term_load($event_node->field_sirius_event_type['und'][0]['tid']);
  return json_decode($event_type_term->field_sirius_json['und'][0]['value'], TRUE);
}

function sirius_event_participant_nid_from_user($event_nid, $uid = NULL) {
  global $user;
  if (!$uid) { $uid = $user->uid; }
  if (!$uid) { return NULL; }
  $user_full = user_load($uid);
  $contact_nid = $user_full->field_sirius_contact['und'][0]['target_id'];
  if (!$contact_nid) { return NULL; }

  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'sirius_event_participant');
  $query->fieldCondition('field_sirius_contact', 'target_id', $contact_nid);
  $query->fieldCondition('field_sirius_event', 'target_id', $event_nid);
  $stmt = $query->execute();
  if (!$stmt['node']) { return NULL; }
  return array_keys($stmt['node'])[0];
}

/***
 * Implements hook_sirius_jsonfield_form_definitions()
 */

function sirius_event_sirius_jsonfield_form_definitions() {
  $definitions['taxonomy_term']['sirius_event_type']['field_sirius_json'] = array('#callback' => 'sirius_event_type_form_definition_callback');

  // The form within the taxonomy term -- hardcoded fields defining attributes of this event type.
  $form = array();
  $form['registration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Registration Options'),
    '#collapsible' => FALSE,
    // '#collapsed' => TRUE,
  );

  $form['registration']['byname'] = array(
    '#type' => 'select',
    '#title' => t('Register By Name?'),
    '#options' => array('Yes' => t('Yes'), 'No' => t('No')),
  );

  $form['registration']['bulk'] = array(
    '#type' => 'select',
    '#title' => t('Contact Search?'),
    '#options' => array('Yes' => t('Yes'), 'No' => t('No')),
  );

  $definitions['taxonomy_term']['sirius_event_participant_role']['field_sirius_json'] = $form;

  // The form within the taxonomy term -- hardcoded fields defining attributes of this event type.
  /*
  drupal_add_library('system', 'ui.accordion');
  drupal_add_js('jQuery(document).ready(function () { jQuery("#sirius_accordion").accordion({active: false, collapsible: true, autoehight: true, heightStyle: "content"}); });', 'inline');
  $form = array();
  $form['participant'] = array(
    '#type' => 'fieldset',
    '#title' => t('Participant Roles and Statuses'),
    '#description' => t('Use the form below to select the statuses available to each participant role. For excample, in a class, you might select that the role of "Student" could have the statuses "interested", "enrolled", "graduated", or "dropped out".'),
    '#collapsible' => TRUE,
    // '#collapsed' => TRUE,
  );

  $roles = sirius_taxonomy_load('sirius_event_participant_role', 'tid', 'name');
  $statuses = sirius_taxonomy_load('sirius_event_participant_status', 'tid', 'name');
  $form['participant']['accordion_open'] = array('#markup' => '<div id="sirius_accordion">');
  foreach ($roles as $role_tid => $role_name) {
    $form['participant']["role_$role_tid"]['accordion_open'] = array('#markup' => '<div class="sirius_accordion_label">' . $role_name . '</div><div class="sirius_accordion_body">');

    $form['participant']["role_$role_tid"]['statuses'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Statuses'),
      '#options' => $statuses,
    );

    $form['participant']["role_$role_tid"]['accordion_close'] = array('#markup' => '</div>');
  }
  $form['participant']['accordion_close'] = array('#markup' => '</div>');

  $form['participant']["roles"] = array(
    '#type' => 'checkboxes',
    '#title' => t('roles'),
    '#options' => $roles,
  );
  */

  $form = array('#markup' => '');

  /*
  $form['registration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Self Registration'),
    '#description' => t('List which users can register for which event roles.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $proles = sirius_taxonomy_load('sirius_event_participant_role', 'tid', 'name');
  $uroles =  user_roles();
  $statuses = sirius_taxonomy_load('sirius_event_participant_status', 'tid', 'name');

  for ($i=1; $i<=10; ++$i) {
    $form['registration'][$i] = array(
      '#type' => 'fieldset',
      '#title' => t('Self-registration #@i', array('@i' => $i)),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['registration'][$i]['urole'] = array(
      '#type' => 'select',
      '#title' => t('Users with this role'),
      '#options' => $uroles,
    );

    $form['registration'][$i]['prole'] = array(
      '#type' => 'select',
      '#title' => t('Can register for this participant role'),
      '#options' => $proles,
    );

    $form['registration'][$i]['status'] = array(
      '#type' => 'select',
      '#title' => t('With this status'),
      '#options' => $statuses,
    );
  }
  */
  /*
  foreach ($proles as $prid => $prole_name) {
    $form['registration']["workers_${prid}_uroles"] = array(
      '#type' => 'checkboxes',
      '#title' => t('Users who can register for: ') . $prole_name,
      '#options' => $uroles,
      '#prefix' => '<div class="checkboxes-inline">',
      '#suffix' => '</div><div style="clear: left;">&nbsp;</div>',
    );
  }

  $definitions['node']['sirius_event']['field_sirius_json'] = $form;
  */

  return $definitions;
}

function sirius_event_type_form_definition_callback($event_type) {
  return array();
}

/**
 * Implements hook_view_alter
 */
function sirius_event_form_alter($form, &$form_state) {

}

function sirius_event_duration_options($event_type_term = NULL) {
  $results = &drupal_static(__FUNCTION__);

  $event_type_tid = $event_type_term->tid;

  if (!$results[$event_type_tid]) {
    $json = json_decode($event_type_term->field_sirius_json['und'][0]['value'], TRUE);
    if ($json['schedule']['duration']) {
      foreach ($json['schedule']['duration'] as $key) {
        $results[$event_type_tid][$key] = sirius_event_duration_format($key);
      }
    } else {
      for ($min = 0; $min < 60; $min += 5) {
        $results[60*$min] = sirius_event_duration_format($key);
      }

      for ($hour = 1; $hour <= 12; ++$hour) {
        for ($min = 0; $min < 60; $min += 15) {
          $key = 60*$min + 3600*$hour;
          if ($hour == 1) { $val = t('1 Hour'); } else { $val = t('@hour hours', array('@hour' => $hour)); }
          if ($min) { $val .= t(', @min Minutes', array('@min' => $min)); }
          $results[$event_type_tid][$key] = sirius_event_duration_format($key);
        }
      }
    }
  }

  return $results[$event_type_tid];
}

function sirius_event_duration_round($seconds) {
  $options = sirius_event_duration_options();
  foreach ($options as $val => $name) {
    if ($seconds < $val) { return $last; }
    $last = $val;
  }
}

function sirius_event_duration_format($seconds) {
  $duration = '';
  $days = floor($seconds / 86400);
  $seconds -= $days * 86400;
  $hours = floor($seconds / 3600);
  $seconds -= $hours * 3600;
  $minutes = floor($seconds / 60);
  $seconds = $seconds - $minutes * 60;

  if($days > 0) {
    $duration .= $days . ' days';
  }
  if($hours > 0) {
    $duration .= ' ' . $hours . ' hours';
  }
  if($minutes > 0) {
    $duration .= ' ' . $minutes . ' minutes';
  }
  if($seconds > 0) {
    $duration .= ' ' . $seconds . ' seconds';
  }
  return $duration;
}

/**
 * Implements hook_node_insert
 */

function sirius_event_node_insert($node)  {
  if ($node->type == 'sirius_event') {
    $event_type_tid = $node->field_sirius_event_type['und'][0]['tid'];
    $event_type_term = taxonomy_term_load($event_type_tid);
    $json = json_decode($event_type_term->field_sirius_json['und'][0]['value'], TRUE);

    $nid = $node->nid;
    global $base_url;
    $url = $base_url . '/node/' . $nid;
    if (sirius_event_bullpen_enabled_type($event_type_term)) {
      $url .= "/sirius_event_bullpen/view";
    }

    if ($json['create']['notify']['sms']) {
      $params = array();
      $params['sms'] = "A new event of type " . $event_type_term->name . " has been created.\n";
      $params['sms'] .= $url;

      foreach ($json['create']['notify']['sms'] as $phone) {
        // $params['X-Sirius-Id'] = 'sirius_event/create/' . $nid . '/' . $phone;
        $params['to'] = $phone;
        sirius_sms_send($params);
      }
    }

    if ($json['create']['notify']['email']) {
      $params = array();
      $params['body'] = "A new event of type " . $event_type_term->name . " has been created.<br /><br />";
      $params['body'] .= "<a href=\"$url\">" . $url . "</a>";
      $params['subject'] = "A new event of type " . $event_type_term->name . " has been created.";

      foreach ($json['create']['notify']['email'] as $email) {
        // $params['X-Sirius-Id'] = 'sirius_event/create/' . $nid . '/' . $email;
        $params['to'] = $email;
        sirius_email_send($params);
      }
    }
  }  
}

/**
 * Implements hook_node_update
 */

function sirius_event_node_update($node)  {
}

