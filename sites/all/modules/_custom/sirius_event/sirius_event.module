<?php

// I hate notice errors
ini_set('error_reporting', ini_get('error_reporting') & ~E_NOTICE);

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.permission.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.menu.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.survey.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.register.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.participant.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.phonebank.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.map.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.disclaimer.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.section.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.bullpen.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.class.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.interestlist.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.intake.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.intake_settings.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.intake_assignment.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.intake_wizard.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.vbo.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.widgets.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.followup.inc";

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.register_user_select.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.register_user_self.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.register_bullpen.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.register_worker_byname.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.register_intake.inc";

require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius_event/sirius_event.participant_list.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius_event/sirius_event.participant_attendance.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius_event/sirius_event.participant_certifications.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius_event/sirius_event.participant_mightysearch.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius_event/sirius_event.participant_map.inc';

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_landing.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.participant_definition.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_participant_definition_audio.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_participant_definition_callerid.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_participant_definition_followup.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_list.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_list_bullpen.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_list_classes.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_create.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_info.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_participants.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_participant_json.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_schedule.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_body.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_register.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_register_bulk.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_phonebank.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_phonebank_call.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_phonebank_call_form.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_phonebank_lock.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_phonebank_status.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_phonebank_settings.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_phonebank_prescan.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_phonebank_network_test.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_bullpen_view.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_bullpen_self.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_class_settings.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_map.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_map_view.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_map_list.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_map_settings.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_map_modal.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.page_map_modal_legend.inc";

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_create.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_register.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_participants.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_edit.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_view.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_schedule.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_phonebank.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_map.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_class.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_materials.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_widgets.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.term_tab_pstatus.inc";

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_event/sirius_event.report_wwe.inc";

function sirius_event_type_json($event_node) {
  $event_type_term = taxonomy_term_load($event_node->field_sirius_event_type['und'][0]['tid']);
  return json_decode($event_type_term->field_sirius_json['und'][0]['value'], TRUE);
}

function sirius_event_participant_nid_from_user($event_nid, $uid = NULL) {
  global $user;
  if (!$uid) { $uid = $user->uid; }
  if (!$uid) { return NULL; }

  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache[$event_nid][$uid])) {
    $user_full = user_load($uid);
    $contact_nid = $user_full->field_sirius_contact['und'][0]['target_id'];
    if (!$contact_nid) { return NULL; }

    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'sirius_event_participant');
    $query->fieldCondition('field_sirius_contact', 'target_id', $contact_nid);
    $query->fieldCondition('field_sirius_event', 'target_id', $event_nid);
    $stmt = $query->execute();
    if ($stmt['node']) { $cache[$event_nid][$uid] = array_keys($stmt['node'])[0]; } else { $cache[$event_nid][$uid] = NULL; }
  }

  return $cache[$event_nid][$uid];
}

function sirius_event_duration_options($event_type_term = NULL) {
  $results = &drupal_static(__FUNCTION__);

  $event_type_tid = $event_type_term->tid;

  if (!$results[$event_type_tid]) {
    $json = json_decode($event_type_term->field_sirius_json['und'][0]['value'], TRUE);
    if ($json['schedule']['duration']) {
      foreach ($json['schedule']['duration'] as $key) {
        $results[$event_type_tid][$key] = sirius_event_duration_format($key);
      }
    } else {
      for ($min = 0; $min < 60; $min += 5) {
        $key = 60*$min;
        $results[$event_type_tid][$key] = sirius_event_duration_format($key);
      }

      for ($hour = 1; $hour <= 12; ++$hour) {
        for ($min = 0; $min < 60; $min += 15) {
          $key = 60*$min + 3600*$hour;
          if ($hour == 1) { $val = t('1 Hour'); } else { $val = t('@hour hours', array('@hour' => $hour)); }
          if ($min) { $val .= t(', @min Minutes', array('@min' => $min)); }
          $results[$event_type_tid][$key] = sirius_event_duration_format($key);
        }
      }
    }
  }

  return $results[$event_type_tid];
}

function sirius_event_duration_round($seconds) {
  $options = sirius_event_duration_options();
  foreach ($options as $val => $name) {
    if ($seconds < $val) { return $last; }
    $last = $val;
  }
}

function sirius_event_duration_format($seconds) {
  if (!$seconds) { return '0 minutes'; }
  $duration = '';
  $days = floor($seconds / 86400);
  $seconds -= $days * 86400;
  $hours = floor($seconds / 3600);
  $seconds -= $hours * 3600;
  $minutes = floor($seconds / 60);
  $seconds = $seconds - $minutes * 60;

  if($days > 0) {
    $duration .= $days . ' days';
  }
  if($hours > 0) {
    $duration .= ' ' . $hours . ' hours';
  }
  if($minutes > 0) {
    $duration .= ' ' . $minutes . ' minutes';
  }
  if($seconds > 0) {
    $duration .= ' ' . $seconds . ' seconds';
  }
  return $duration;
}

function sirius_event_duration_format_hours($seconds) {
  $hours = floor($seconds / 3600);
  $seconds -= $hours * 3600;
  $minutes = floor($seconds / 60);

  $duration = $hours . ' hours';
  if($minutes > 0) {
    $duration .= ' ' . $minutes . ' minutes';
  }
  return $duration;
}


/**
 * Implements hook_node_insert
 */

function sirius_event_node_insert($node)  {
  if ($node->type == 'sirius_event') {
    $event_type_tid = $node->field_sirius_event_type['und'][0]['tid'];
    $event_type_term = taxonomy_term_load($event_type_tid);
    $json = json_decode($event_type_term->field_sirius_json['und'][0]['value'], TRUE);

    $nid = $node->nid;
    global $base_url;
    $url = $base_url . '/node/' . $nid . '/sirius_event_info';

    if ($json['create']['notify']['sms']) {
      $params = array();
      $params['sms'] = "A new event of type " . $event_type_term->name . " has been created.\n";
      $params['sms'] .= $url;

      foreach ($json['create']['notify']['sms'] as $phone) {
        // $params['X-Sirius-Id'] = 'sirius_event/create/' . $nid . '/' . $phone;
        $params['to'] = $phone;
        sirius_sms_send($params);
      }
    }

    if ($json['create']['notify']['email']) {
      $params = array();
      $params['body'] = "A new event of type " . $event_type_term->name . " has been created.<br /><br />";
      $params['body'] .= "<a href=\"$url\">" . $url . "</a>";
      $params['subject'] = "A new event of type " . $event_type_term->name . " has been created.";

      foreach ($json['create']['notify']['email'] as $email) {
        // $params['X-Sirius-Id'] = 'sirius_event/create/' . $nid . '/' . $email;
        $params['to'] = $email;
        sirius_email_send($params);
      }
    }
  }  
}

/**
 * Implements hook_node_update
 */

function sirius_event_node_update($node)  {
}

/**
 * Implements hook_form_alter
 */

function sirius_event_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'sirius_event_participants') {
    $event_nid = $form_state['view']->args[0];
    $prole_tid = $form_state['view']->args[1];
    $pstatus_options = sirius_event_participant_role_status_tids(array($prole_tid));
    $form['field_sirius_event_pstatus_tid']['#options'] = array('All' => t('-- Select --')) + $pstatus_options;
  }
}

/***
 * Implements hook_report_cache_info() 
 */

function sirius_event_report_cache_info() {
  $items = array();

  $items['sirius-event-wwe'] = array(
    'name' => t('Workers who have NOT attended Events'),
    'description' => '',
    'access' => 'sirius event admin',
    'fields' => sirius_event_report_wwe_fields(),
    'form_callback' => 'sirius_event_report_wwe_form',
    'pk_list_callback' => 'sirius_event_report_wwe_pks',
    'batch_callback' => 'sirius_event_report_wwe_batch',
    'render_callbacks' => array(
      'View' => 'sirius_event_report_wwe_view',
    ),
  );

  return $items;
}

/**
 * Implements hook_cron
 */

function sirius_event_cron() {
  sirius_event_cleanup();
}

function sirius_event_cleanup($force = FALSE) {
  // Run once a day
  $today = date('Y-m-d');
  $last_run = variable_get('sirius_event_cleanup_last_date', 0);
  if ($last_run == $today) { if (!$force) { return; } }
  variable_set('sirius_event_cleanup_last_date', $today);

  watchdog('sirius_event_cleanup', 'Searching for orphaned participant records.');
  $sql_args = array();
  $sql = "select node.nid from node ";
  $sql .= "left join field_data_field_sirius_event on field_data_field_sirius_event.entity_type = 'node' and field_data_field_sirius_event.entity_id = node.nid ";
  $sql .= "left join field_data_field_sirius_contact on field_data_field_sirius_contact.entity_type = 'node' and field_data_field_sirius_contact.entity_id = node.nid ";
  $sql .= "left join node event_node on event_node.nid = field_sirius_event_target_id ";
  $sql .= "left join node contact_node on contact_node.nid = field_sirius_contact_target_id ";
  $sql .= "where node.type = 'sirius_event_participant' ";
  $sql .= "and (event_node.nid is null ";
  $sql .= "or contact_node.nid is null) ";
  $sql .= "order by node.nid ";
  $sql .= "limit 5000";
  $stmt = db_query($sql, $sql_args);
  $to_delete = array();
  while ($hr = $stmt->fetchAssoc()) {
    $to_delete[] = $hr['nid'];
  }

  if (!$to_delete) {
    watchdog('sirius_event_cleanup', 'No orphaned participant records found');
    return;
  }

  watchdog('sirius_event_cleanup', 'Found ' . count($to_delete) . ' orphaned participant records. Deleting.');
  foreach ($to_delete as $participant_nid) { node_delete($participant_nid); /* print "Deleted: $participant_nid\n"; */ }
  watchdog('sirius_event_cleanup', 'Orphan participant cleanup complete.');
}


function sirius_event_upcoming() {
  $domain_nid = sirius_domain_nid();
  $sql_args = array();
  $sql_args['cutoff'] = date("Y-m-d 00:00:00", strtotime('-3 days'));
  $sql = "select * from node ";
  $sql .= "left join field_data_field_sirius_daterepeat on field_data_field_sirius_daterepeat.entity_type = 'node' and field_data_field_sirius_daterepeat.entity_id = node.nid and field_data_field_sirius_daterepeat.delta = 0 ";
  $sql .= "left join field_data_field_sirius_event_type on field_data_field_sirius_event_type.entity_type = 'node' and field_data_field_sirius_event_type.entity_id = node.nid ";
  $sql .= "left join field_data_field_sirius_domain on field_data_field_sirius_domain.entity_type = 'node' and field_data_field_sirius_domain.entity_id = node.nid ";
  $sql .= "left join taxonomy_term_data on taxonomy_term_data.tid = field_sirius_event_type_tid ";
  $sql .= "where node.type = 'sirius_event' ";
  $sql .= "and field_sirius_daterepeat_value >= :cutoff ";
  if ($domain_nid) {
    $sql_args['domain_nid'] = $domain_nid;
    $sql .= "and field_sirius_domain_target_id = :domain_nid ";
  }
  $sql .= "order by field_sirius_daterepeat_value, name, title limit 100 ";
  $stmt = sirius_sql_query($sql, $sql_args);
  $event_options = array(NULL => t('-- Select --'));
  while ($hr = $stmt->fetchAssoc()) {
    $event_options[$hr['nid']] = $hr['title'] . ' [' . date('Y-m-d', strtotime($hr['field_sirius_daterepeat_value'] . ' GMT')) . ']';
  }

  return $event_options;
}


/***
 * Implements hook_sirius_wizard_info() 
 */

function sirius_event_sirius_wizard_info() {
  $items = array();
  $items += sirius_event_intake_wizard_info();
  return $items;
}

function sirius_event_notify($main_node, $email, $phone, $msg, $tokens) {
  if (!$tokens['node']) { $tokens['node'] = $main_node; }

  $medium         = sirius_text_render($msg['medium'], $tokens);
  $email_subject  = sirius_text_render($msg['email_subject'], $tokens);
  $email_body     = sirius_text_render(sirius_richtext_handle_input($msg['email_body']), $tokens);
  $sms            = sirius_text_render($msg['sms'], $tokens);

  $success_msg = '';
  $failure_msg = '';
  if (in_array($medium, array('sms', 'both')) && $phone && $sms) {
    $params = array();
    $params['sms'] = $sms;
    $params['to'] = $phone;
    $result = sirius_sms_send($params);
    if ($result['success']) { $success_msg .= "SMS message sent to $phone."; }
    else { $failure_msg .= "SMS message to $phone failed: $result[msg]"; }
  }

  if (in_array($medium, array('email', 'both')) && $email && $email_subject) {
    $params = array();
    $params['subject'] = $email_subject;
    $params['body'] = $email_body;
    $params['to'] = $email;
    $result = sirius_email_send($params);
    if ($result['success']) { $success_msg .= "Email message sent to $email."; }
    else { $failure_msg .= "Email message to $email failed: $result[msg]"; }
  }

  if ($success_msg) {
    sirius_jsonfield_log($main_node, 'notification', $success_msg);
    drupal_set_message($success_msg);
  }

  if ($failure_msg) {
    sirius_jsonfield_log($main_node, 'notification_failued', $failure_msg);
    drupal_set_message($failure_msg, 'warning');
  }

  node_save($main_node);

  if ($failure_msg) { 
    return array('success' => FALSE, 'msg' => $failure_msg);
  } else {
    return array('success' => TRUE, 'msg' => $success_msg);
  }
}

function sirius_event_upcoming_by_type($event_type_tids, $options = array()) {
  if (!is_array($event_type_tids)) { $event_type_tids = array($event_type_tids); }

  $limit = $options['limit'];
  if (!$limit) { $limit = 50; }

  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'sirius_event');
  $query->fieldCondition('field_sirius_event_type', 'tid', $event_type_tids, 'in');
  $query->fieldCondition('field_sirius_active', 'value', 'Yes');
  $query->fieldCondition('field_sirius_daterepeat', 'value', gmdate('Y-m-d 00:00:00'), '>=');
  $query->fieldOrderBy('field_sirius_daterepeat', 'value');
  $query->range(0, $limit);
  $stmt = $query->execute();
  $event_nids = array();
  if ($stmt['node']) { $event_nids = array_keys($stmt['node']); } else { $event_nids = array(); }

  return $event_nids;
}

function sirius_event_listed($event_node) {
  // Staff can see all events
  if (user_access('sirius staff') || user_access('sirius event admin') || user_access('sirius admin')) { return TRUE; }

  $event_json = sirius_json_get($event_node);
  $mode = $event_json['class']['listing']['mode'];

  // No access restructions, anybody can see
  if (!$mode) { return TRUE; }

  // Private events, nobody can see
  if ($mode == 'private') { return FALSE; }

  // Public events, anybody can see
  if ($mode == 'public') { return TRUE; }

  // Worker events can only be seen by workers, possibly with the right member status
  if ($mode == 'workers') {
    // I must have a worker
    $my_worker = sirius_worker_get();
    if (!$my_worker) { return FALSE; }

    // If the event is ms-restricted, I must have one of the member statuses
    if ($event_json['class']['listing']['ms_tids']) {
      $event_ms_tids = array_filter(array_values($event_json['class']['listing']['ms_tids']));
      if ($event_ms_tids) {
        $my_ms_tids = sirius_fieldvals($my_worker, 'field_sirius_member_status', 'tid');
        if (!array_intersect($event_ms_tids, $my_ms_tids)) { return FALSE; }
      }
    }

    return TRUE;
  }

  return FALSE;
}

function sirius_event_render_teaser($event_node) {
  $html = '<div class="sirius_event_teaser">';
  $tss = sirius_fieldvals($event_node, 'field_sirius_daterepeat', 'ts');
  sort($tss);

  if ($tss) {
    $ts_render =  date('l, F j, g:i A', $ts[0]);
    if (count($tss) > 1) {
      $ts_render .= ' through ';
      $ts_render .= date('l, F j, g:i A', array_pop($tss));
    }
    $ts_render .= date(' T');
  }

  // $html .= '<span class="sirius_event_schedule">';
  $html .= $ts_render;
  // $html .= '</span>';

  $path = "node/" . $event_node->nid . "/sirius_event_info";
  if (drupal_valid_path($path)) {
    $html .= l('View', $path, array('attributes' => array('class' => array('tool-button'))));
  }

  $html .= '</div>';

  return $html;
}