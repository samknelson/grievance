<?php

require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius_flood/sirius_flood.menu.inc';

/**
 * List all non-expired flood entries, grouped by event (e.g. "Failed Login Attempt") and identifier (typically the IP address)
 */

function  sirius_flood_list() {
  $entries = array();
  $ts = time();

  $sql = "select event, identifier, count(*) as 'count' ";
  $sql .= "from flood ";
  $sql .= "where expiration > :ts ";
  $sql .= "group by event, identifier ";
  $sql .= "order by event, identifier ";

  $stmt = sirius_sql_query($sql, array(':ts' => time()));
  $entries = array();
  while ($hr = $stmt->fetchAssoc()) {
    $entries[$hr['event'] . '|' . $hr['identifier']] = $hr;
  }

  return $entries;
}

/**
 * Clear a flood, deleting all entries for a given event and identifier
 */

function sirius_flood_clear($event, $identifier) {
  $sql = "delete from flood where event = :event and identifier = :identifier";
  $stmt = sirius_sql_query($sql, array(':event' => $event, ':identifier' => $identifier));
}

/**
 * Get info about a given event type
 */

function sirius_flood_info($event) {
  $info_all = &drupal_static(__FUNCTION__); 
  if (!isset($info_all)) { 
    $info_all = sirius_flood_info_all();
  }

  return $info_all[$event];
}

function sirius_flood_info_all() {
  $info_all = &drupal_static(__FUNCTION__);

  if (!isset($info_all)) {
    // Allow modules to define new flood types by implementing hook_sirius_flood_info
    $info_all = module_invoke_all('sirius_flood_info');

    // Sort by key
    ksort($info_all);

    // Fill in some information, including looking up windows and thresholds based on the variable name
    foreach ($info_all as $event => $info) {
      $info_all[$event]['event'] = $event; 

      if (!$info_all[$event]['window_variable'])    { $info_all[$event]['window_variable'] = 'sirius_flood_' . $event . '_window'; }
      if (!$info_all[$event]['window_default'])     { $info_all[$event]['window_default'] = 3600; }
      if (!$info_all[$event]['threshold_variable']) { $info_all[$event]['threshold_variable'] = 'sirius_flood_' . $event . '_threshold'; }
      if (!$info_all[$event]['threshold_default'])  { $info_all[$event]['threshold_default'] = 50; }
      if (!$info_all[$event]['window'])             { $info_all[$event]['window'] = variable_get($info_all[$event]['window_variable'], $info_all[$event]['window_default']); }
      if (!$info_all[$event]['threshold'])          { $info_all[$event]['threshold'] = variable_get($info_all[$event]['threshold_variable'], $info_all[$event]['threshold_default']); }
    }
  }

  return $info_all;
}

/**
 * Implements hook_sirius_flood_info
 */

function sirius_flood_sirius_flood_info() {
  $info['test_block'] = array(
    'title' => 'Test Block',
    'description' => 'Use this block for testing the flood system. It is not thrown anywhere else.',
  );

  $info['failed_login_attempt_ip'] = array(
    'title' => 'Failed Login (IP)',
    'window_variable' => 'user_failed_login_ip_window',
    'window_default' => 3600,
    'threshold_variable' => 'user_failed_login_ip_limit',
    'threshold_default' => 50,
    'description' => 'A failed login attempt from a specific IP address.',
  );

  $info['failed_login_attempt_user'] = array(
    'title' => 'Failed Login (User)',
    'window_variable' => 'user_failed_login_user_window',
    'window_default' => 21600,
    'threshold_variable' => 'user_failed_login_user_limit',
    'threshold_default' => 53600  ,
    'description' => 'A failed login attempt from a specific IP address, for a specific user.',
  );
  
  return $info;
}

/**
 * Wrapper for flood_register_event(), but lookup the window automatically, so client code doesn't have to pay attention
 */

function sirius_flood_register_event($event, $identifier = NULL) {
  $info = sirius_flood_info($event);

  $window = $info['window'];
  if (!$window) { $window = 3600; }
  
  flood_register_event($event, $window, $identifier);
}

/**
 * Wrapper for flood_is_allowed(), but lookup the window and threshold automatically, so client code doesn't have to pay attention.
 */

function sirius_flood_is_allowed($event, $identifier = NULL) {
  $info = sirius_flood_info($event);

  $window = $info['window'];
  if (!$window) { $window = 3600; }

  $threshold = $info['threshold'];
  if (!$threshold) { $threshold = 50; }

  return flood_is_allowed($event, $threshold, $window, $identifier);
}