<?php

// I hate notice errors
ini_set('error_reporting', ini_get('error_reporting') & ~E_NOTICE & ~E_DEPRECATED);

require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.token.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.minilog.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.backlinks.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.auditlog.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.aat.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.log.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.log_quicklog.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.log_buckets.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.menu.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.ssn.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.date.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.permission.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.news.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.banner.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.footer.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.addr.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.phone.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.phonetree.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.email.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.specialtid.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.sns.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.qr.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.wizard.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.letterhead.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.loopback.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.pdf.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.representatives.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.taxonomy.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.contact.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.contact_definition.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.domain.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.domain_stats.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.signature.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.callerid.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.volunteer.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.lock.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.node_tabs.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.masquerade.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.letter.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.letter_wizard.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.fax.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.field_overrides.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.esignature.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.mightysearch.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.mightysearch_actions.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.sql.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.do_not_disturb.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.server_paths.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.shortlink.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.showhide.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.quickhash.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.richtext.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.map.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.disclaimer.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.mailattach.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.customfield.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.bookmark.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.public.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.install';

require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.feed.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.feed_wws.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.feed_worker.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.feed_worker_skill.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.feed_contact.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.feed_hours.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.feed_grievance.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.feed_grievance_log.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.feed_employee.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.feed_user.inc';

require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_entity_materials.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_entity_letters.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_news.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_contacts.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_contact_resync_all.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_contact_json.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_contact_definition_display.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_domain_users.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_domain_switch.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_domain_subdomains.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_domain_clone.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_domain_delete.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_domain_activity.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_domain_components.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_domain_stats.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_domain_list.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_domain_list_stats.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_domain_list_prefs.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_term_exim.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_taxonomy_clone.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_taxonomy_sort.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_taxonomy_vocabulary_list.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_taxonomy_list.inc';
// require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_field_overrides.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_letter_template_recipients.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_config.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_esignature_test.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_license.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_voice_forward_to_operator.inc';
require_once DRUPAL_ROOT . '/sites/all/modules/_custom/sirius/sirius.page_feed_landing.inc';

require_once DRUPAL_ROOT . '/sites/all/vendor/autoload.php';

/**
 * Implements hook_cron
 */

function sirius_cron() {
  sirius_auditlog();
  // sirius_signature_cleanup();
  sirius_domain_stats_cron();
  sirius_mailattach_fetch_all();
}

/**
 * Implements hook_entity_presave()
 */

function sirius_entity_presave($entity, $type) {
  if ($type == 'node') {
    if ($entity->type == 'sirius_worker') { sirius_contact_sync_from_worker($entity); }
  }
  if ($type == 'user') { sirius_contact_sync_from_user($entity); }
}

/**
 * Implements hook_node_presave()
 */

function sirius_node_presave($node) {
  if ($node->type == 'sirius_worker' || $node->type == 'sirius_contact') {
    $fields = array(
      'field_sirius_phone', 
      'field_sirius_phone_alt', 
      'field_grievance_phone', 
      'field_grievance_co_phone', 
      'field_grievance_co_fax',
      'field_grievance_co_phone_2',
      'field_grievance_phone_off',
    );
    foreach ($fields as $field) {
      if (isset($node->{$field}['und'][0]['value'])) {
        $node->{$field}['und'][0]['value'] = sirius_phone_format($node->{$field}['und'][0]['value']);
      }
    }
  }

  if ($node->type == 'sirius_worker' || $node->type == 'sirius_contact') {
    $fields = array(
      'field_sirius_email', 
    );
    foreach ($fields as $field) {
      if (isset($node->{$field}['und'][0]['value'])) {
        $node->{$field}['und'][0]['value'] = sirius_email_format($node->{$field}['und'][0]['value']);
      }
    }
  }

  if ($node->type == 'sirius_phonenumber') { sirius_phonenumber_node_presave($node); }
  if ($node->type == 'sirius_emailaddress') { sirius_emailaddress_node_presave($node); }

  sirius_addr_node_presave($node);
}


/**
 * Implements hook_field_formatter_info().
 */
function sirius_field_formatter_info() {
  return array(   
    'sirius_ssn_formatter_masked' => array(  
      'label' => t('Sirius SSN Masked'),  
      'field types' => array('text'), 
    ), 
    'sirius_ssn_formatter_conditional' => array(  
      'label' => t('Sirius SSN Conditional'),  
      'field types' => array('text'), 
    ), 
    'sirius_user_worker' => array(
      'label' => t('Sirius User Worker'),
      'field types' => array('entityreference')
    ),
  ); 
}

/**
 * Implements hook_field_formatter_view().
 */

function sirius_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();

  if ($display['type'] == 'sirius_ssn_formatter_masked' || $display['type'] == 'sirius_ssn_formatter_conditional') {
    foreach ($items as $delta => $item) {

      if ($display['type'] == 'sirius_ssn_formatter_conditional' && user_access('sirius ssn')) {
        $markup = $items[$delta]['value'];
      } else {
        $markup = 'xxx-xx-' . substr($items[$delta]['value'], -4);
      }
      
      $result[] = array('#markup' => $markup);
    }
  }

  if ($display['type'] == 'sirius_user_worker') {
    foreach ($items as $delta => $item) {
      $hr = NULL;
      $uid = $item['target_id'];
      if ($uid) {
        $sql = "select name, title, field_sirius_worker_target_id ";
        $sql .= "from users ";
        $sql .= "left join field_data_field_sirius_worker on field_data_field_sirius_worker.entity_type = 'user' and field_data_field_sirius_worker.entity_id = users.uid ";
        $sql .= "left join node on node.nid = field_sirius_worker_target_id ";
        $sql .= "where users.uid = :uid";
        $stmt = db_query($sql, array(':uid' => $uid));
        $hr = $stmt->fetchAssoc();
      }

      if ($hr['title']) { $markup = $hr['title']; }
      else if ($hr['name']) { $markup = $hr['name']; }
      else if ($uid) { $markup = "[user not found: $uid]"; }
      else { $markup = "User not found."; }
      $result[] = array('#markup' => $markup);
    }
  }

  return $result;
}

/** 
 * Implements hook_field_formatter_settings_summary
 */

function sirius_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';

  if ($display['type'] == 'sirius_ssn_formatter_masked') {
    $summary = 'xxx-xx-1234';
  }
  if ($display['type'] == 'sirius_ssn_formatter_conditional') {
    $summary = '???-??-1234';
  }
  return $summary;
}
/**
 * Implements hook_form_alter
 */

function sirius_form_alter(&$form, &$form_state, $form_id) {
  // Set default values for entity fields with autocomplete widgets
  $defaultable_fields = array('sirius_dispatch_facility', 'sirius_dispatch_job');
  foreach ($defaultable_fields as $field) {
    if (isset($_GET[$field]) && isset($form['field_' . $field])) {
      $nid = $_GET[$field];
      $entity_node = node_load($nid);
      if ($entity_node) {
        $form['field_' . $field]["und"][0]['target_id']['#default_value'] = "$entity_node->title ($nid)";
      }
    }
  }

  $defaultable_fields = array('sirius_domain', 'sirius_event_type');
  foreach ($defaultable_fields as $field) {
    if (isset($_GET[$field]) && isset($form['field_' . $field])) {
      $form['field_' . $field]["und"]['#default_value'][0] = $_GET[$field];
    }
  }

  $defaultable_fields = array('sirius_type');
  foreach ($defaultable_fields as $field) {
    if (isset($_GET[$field]) && isset($form['field_' . $field])) {
      $form['field_' . $field]["und"][0]['value']['#default_value'] = $_GET[$field];
    }
  }

  // Stupid patch for the "rolesfield" configuration form,
  if ($form_id == 'field_ui_field_edit_form') {
    if ($form['#field']['type'] == 'role') {
      $form['field']['settings']['roles']['#required'] = FALSE;
    }
  }

  // Clean up taxonomy term forms
  if ($form_id == 'taxonomy_form_term') {
    $vocabulary = $form['#vocabulary'];
    if ($vocabulary && $vocabulary->machine_name && preg_match('/^(sirius|grievance)/', $vocabulary->machine_name)) {
      $form['path']['#access'] = FALSE;
      if ($vocabulary->machine_name != 'sirius_skill') {
        $form['relations']['#access'] = FALSE;
      }
    }
  }

  // Remove the domain
  if (preg_match('/_node_form/', $form_id)) {
    sirius_domain_form_alter_node($form, $form_state, $form_id);
  }

  // Remove canonical addresses
  if (preg_match('/_node_form/', $form_id)) {
    sirius_addr_form_alter_node($form, $form_state, $form_id);
  }

  // Filter the taxonomy by domain
  if ($form_id == 'taxonomy_form_term' || preg_match('/_node_form/', $form_id)) {
    sirius_domain_restrict_taxonomy_fields($form, $form_id);
  }

  // Remove access to some JSON fields
  if ($form_id == 'sirius_worker_node_form' ||
      $form_id == 'grievance_shop_node_form' ||
      $form_id == 'sirius_dispatch_node_form' ||
      $form_id == 'sirius_dispatch_job_node_form' ||
      $form_id == 'grievance_node_form' ||
      $form_id == 'sirius_contact_node_form' || 
      $form_id == 'sirius_json_definition_node_form' ||
      $form_id == 'sirius_event_participant_node_form' ||
      $form_id == 'sirius_phonenumber_node_form' || 
      $form_id == 'sirius_emailaddress_node_form' || 
      $form_id == 'sirius_bulk_node_form' ||
      $form_id == 'sirius_ledger_account_node_form' ||
      $form_id == 'sirius_employee_node_form' ||
      $form_id == 'grievance_letter_template_node_form' ||
      $form_id == 'property_node_form') {
    if (!user_access('sirius admin')) { $form['field_sirius_json']['#access'] = FALSE; }
  }

  // Remove access to denormalized fields
  if ($form_id == 'sirius_worker_node_form') {
    if (!user_access('sirius admin')) { $form['field_sirius_denorm_level']['#access'] = FALSE; }
  }

  // Can't change the "type" of a JSON Definition
  if ($form_id == 'sirius_json_definition_node_form') {
    if (!user_access('sirius admin')) { $form['field_sirius_type']['#access'] = FALSE; }
  }

  // @todo: sirius_dispatch_job_type shouldn't edit json in the main taxonomy term form, it should have a separate tab.
  // Ugh. Some taxonomy terms inline the JSON field on the main term page, some don't. 
  // Really they should be refactored so that the JSON field is never edited inline. But I can't be distracted to do that at the moment.
  if ($form_id == 'taxonomy_form_term' && $form['field_sirius_json'] && $form_state['term']->vocabulary_machine_name != 'sirius_dispatch_job_type' && $form_state['term']->vocabulary_machine_name != 'grievance_contact_types') {
    $form['field_sirius_json']['#access'] = FALSE;
  }

  // Remove access to caller ID fields which are set in a node tab
  if ($form_id == 'sirius_json_definition_node_form') {
    $form['field_sirius_callerids']['#access'] = FALSE;
    if (!user_access('sirius admin')) { $form['field_sirius_audio']['#access'] = FALSE; }
    if ($_GET['sirius_type']) { $form['field_sirius_type']['#access'] = FALSE; }
  }

  // Field overrides
  // sirius_field_overrides_form_alter($form, $form_state, $form_id);

  // Restrict views exposed filters
  if ($form_id == 'views_exposed_form') {
    sirius_domain_form_restrict($form);
  }

  // View-specific modifications
  if ($form_id == 'views_exposed_form' && isset($form_state['view']) && $form_state['view']->name == 'sirius_domain_users') {
    sirius_domain_users_view_form_alter($form, $form_state); 
  }

  if ($form_id == 'views_exposed_form' && isset($form_state['view']) && $form_state['view']->name == 'sirius_bookmarks') {
    sirius_bookmark_view_form_alter($form, $form_state); 
  }

  // Log some searches. @todo this should be a general-purpose thing, not a harcoded view name
  /*
  if ($form_id == 'views_exposed_form') {
    sirius_log_views_exposed_form_alter($form, $form_state); 
  }
  */
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Clear account fields that users shouldn't have access to.
 */

function sirius_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] != 'account') { return; }

  $account = $form['#user'];
  unset($form['mimemail']);

  if (!user_access('sirius dispatch admin')) {
    $form['field_sirius_worker']['#access'] = FALSE;
  }

  if (!user_access('sirius dispatch admin') && !user_access('grievance admin') && !user_access('grievance user')) {
    $form['field_grievance_rep_lead']['#access'] = FALSE;
    $form['field_grievance_rep_organizer']['#access'] = FALSE;
    $form['field_grievance_shops']['#access'] = FALSE;
    $form['field_grievance_phone']['#access'] = FALSE;
    $form['field_grievance_phone_off']['#access'] = FALSE;
    $form['field_sirius_json']['#access'] = FALSE;
  }

  if (!user_access('sirius admin')) {
    $form['field_sirius_domain']['#access'] = FALSE;
    $form['field_sirius_contact']['#access'] = FALSE;
  }

  if (!user_access('sirius signature edit')) {
    $form['field_sirius_signature']['#access'] = FALSE;
  }
}

function sirius_become_superuser($tf, $uid = 1) {
  global $user;
  static $original_user;
  static $old_state;

  // Signing in as a new user sometimes takes astonishingly long, because we're regenerating the admin menu.
  // But we only call this function in the context where we're not actually rendering pages. So we don't need the admin menu.
  if (function_exists('admin_menu_suppress')) { admin_menu_suppress(TRUE); }
  global $admin_menu_suppress;
  $admin_menu_suppress = TRUE;
  
  if ($tf) {
    $original_user = $user; 
    $old_state = drupal_save_session(); 
    drupal_save_session(FALSE); 
    $user = user_load($uid); 
  } else {
    $user = $original_user; 
    drupal_save_session($old_state); 
  }
}

function sirius_page_alter(&$page) {
  global $admin_menu_suppress;
  if ($admin_menu_suppress) {
    unset($page['page_top']['toolbar']);
  }
}

function sirius_log_render($text) {
  // 2018-11-08T05:57:55-08:00:  
  $entries = preg_split('/(\d\d\d\d\-\d\d\-\d\dT\d\d:\d\d:\d\d-\d\d:\d\d):/', $text, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);

  $html = '';
  foreach ($entries as $entry) {
    if (preg_match('/\d\d\d\d\-\d\d\-\d\dT\d\d:\d\d:\d\d-\d\d:\d\d/', $entry)) {
      if ($html) { $html .= '<br />'; }
      $html .= '<strong>' . date('Y-m-d H:i', strtotime($entry)) . '</strong> :: ';
    } else {
      $html .= $entry; 
    }
  }

  return $html;
}

/**
 * Implements hook_block_info().
 */

function sirius_block_info() {
  $blocks = array();
  $blocks['sirius_news_popup'] = array(
    'info' => t('Sirius News Popup'),
    'cache' => DRUPAL_NO_CACHE,
  );      
  return $blocks;
}

/**
 * Implements hook_block_view().
 */

function sirius_block_view($delta = '') {
  if ($delta == 'sirius_news_popup') {
    return sirius_news_popup_block_view();
  }
}

/**
 * Implements hook_menu_local_tasks_alter()
 * Unused at the moment. The idea is that we might want to hide the "View" link for certain content types,
 * and instead rediret to a sub-tab. But it turns out to be problematic. Nobody likes drupal_goto in node_view,
 * among other things because it screws with search indexing.
 */

/*
function sirius_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $node = menu_get_object();
  if ($node && $node->type == 'sirius_phonenumber') {
    if ($data['tabs'][0]) {
      foreach ($data['tabs'][0]['output'] as $delta => $item) {
        if ($item['#link']['path'] == 'node/%/view') {
          $data['tabs'][0]['output'][$delta]['#theme'] = NULL;
        }
      }
    }
  }
}
*/

function sirius_emptytheme() {
  return NULL;
}

function sirius_emptytheme_theme() {
  return NULL;
}

function sirius_sirius_emptytheme_theme() {
  return NULL;
}

function sirius_sirius_emptytheme() {
  return NULL;
}

/**
 * Implements hook_menu_alter()
 */

function sirius_menu_alter(&$items) {
  $items['user/%user']['access callback'] = 'sirius_user_view_access';
  $items['user/%user/edit']['access callback'] = 'sirius_user_edit_access';

  $items['taxonomy/term/%taxonomy_term']['page callback'] = 'sirius_no_more_term_listings';
  $items['taxonomy/term/%taxonomy_term']['page arguments'] = array(2);
  $items['taxonomy/term/%taxonomy_term']['access arguments'] = array('access content');


  $items['taxonomy/term/%taxonomy_term/view']['page callback'] = 'sirius_no_more_term_listings';
  $items['taxonomy/term/%taxonomy_term/view']['page arguments'] = array(2);
  $items['taxonomy/term/%taxonomy_term/view']['access arguments'] = array('access content');

  $items['taxonomy/term/%taxonomy_term/feed']['page callback'] = 'sirius_no_more_term_listings';
  $items['taxonomy/term/%taxonomy_term/feed']['page arguments'] = array(2);
  $items['taxonomy/term/%taxonomy_term/feed']['access arguments'] = array('access content');

  $items['node/%node']['access callback'] = 'sirius_public_node_access';
  $items['node/%node']['access arguments'] = array(1);

  // Need to hide that damn devel tab!
  if ($items['node/%node/devel']) {
    $items['node/%node/devel']['access arguments'] = array('sirius admin');
  }
}

function sirius_no_more_term_listings($taxonomy_term) {
  return taxonomy_term_view($taxonomy_term);
}

function sirius_user_view_access($account) {
  if (!user_access('sirius edit own user')) { 
    drupal_goto('<front>');
    /*
    // If we can't edit our own user, and we're a worker, we get redirected to the "edit the worker" page.
    $worker = sirius_worker_get();
    global $user;
    $uid = $user->uid;
    $path = current_path();
    if ($uid && $path && $worker && $path = 'user') {
      drupal_goto('node/' . $worker->nid . '/sirius_worker_contact');
    } else {
      return FALSE;
    }
    */
  }
  return user_view_access($account);
}

function sirius_user_edit_access($account) {
  if (!user_access('sirius edit own user')) { 
    drupal_goto('<front>');
    /*
    // If we can't edit our own user, and we're a worker, we get redirected to the "edit the worker" page.
    $worker = sirius_worker_get();
    global $user;
    $uid = $user->uid;
    $path = current_path();
    if ($uid && $path && $worker && $path = 'user/' . $uid . '/edit') {
      drupal_goto('node/' . $worker->nid . '/sirius_worker_contact');
    } else {
      return FALSE;
    }
    */
  }
  
  return user_edit_access($account);
}

/**
 * Implements hook_node_view
 */

function sirius_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'sirius_phonenumber' && $view_mode == 'full') {
    $tab = 'sirius_phonenumber_info';
  } else if ($node->type == 'sirius_json_definition' && $view_mode == 'full' && $node->field_sirius_type['und'][0]['value'] == 'sirius_event:catalog') {
    $tab = 'sirius_event_catalog_view';
  }

  sirius_public_node_view($node, $view_mode, $langcode);

  if ($tab) {
    // Can view if we have access to the tab, or if the node is public (because this is the "default" tab)
    if (sirius_node_tab_access($node, $tab) || ($node->field_sirius_public['und'][0]['value'] == 'Yes')) {

      // Run the tab, in whatever domain the node is in
      $old_domain_nid = sirius_domain_nid();
      sirius_domain($node->field_sirius_domain['und'][0]['target_id']);
      $content = sirius_node_tab_content($node, $tab);
      sirius_domain($old_domain_nid);

      // Return or render the content
      if (is_array($content)) { $html = drupal_render($content); } else { $html = $content; }
      $node->content = array('body' => array('#markup' => $html));
    } else {
      $node->content = array('body' => array('#markup' => 'Your user does not have the correct permissions to access this page.'));
    }
  }
  return sirius_field_overrides_node_view($node, $view_mode, $langcode);
}

/**
 * Implements hook_node_validate
 */

function sirius_node_validate($node, $form, &$form_state) {
  if ($node->type == 'sirius_phonenumber') { sirius_phonenumber_node_validate($node, $form, $form_state); }
  if ($node->type == 'sirius_emailaddress') { sirius_emailaddress_node_validate($node, $form, $form_state); }
  if ($node->type == 'sirius_domain') { sirius_domain_node_validate($node, $form, $form_state); }
}



/**
 * Stupid utility function to get multiple values from a field
 */

function sirius_fieldvals($node, $field, $col = 'value', $format = 'Y-m-d H:i') {
  $result = array();
  if (!$node->{$field}['und']) { return array(); }

  foreach ($node->{$field}['und'] as $delta => $tmp) {
    if ($col == 'ts') {
      $result[] = strtotime($node->{$field}['und'][$delta]['value'] . ' ' . $node->{$field}['und'][$delta]['timezone_db']);
    } else if ($col == 'ts2') {
      $result[] = strtotime($node->{$field}['und'][$delta]['value2'] . ' ' . $node->{$field}['und'][$delta]['timezone_db']);
    } else if ($col == 'date') {
      $result[] = date($format, strtotime($node->{$field}['und'][$delta]['value'] . ' ' . $node->{$field}['und'][$delta]['timezone_db']));
    } else {
      $result[] = $tmp[$col];
    }
  }

  return $result;
}

function sirius_fieldval($node, $field, $col = 'value', $params = array()) {
  if ($col == 'ts') {
    if ($node->{$field}['und'][0]['value']) {
      return strtotime($node->{$field}['und'][0]['value'] . ' ' . $node->{$field}['und'][0]['timezone_db']);
    } else {
      return NULL;
    }
  } else {
    return $node->{$field}['und'][0][$col];
  }
}

function sirius_fakerender_field($title, $values, $options = array()) {
  if (!is_array($values)) { $values = array($values); }

  $html = '<section class="field field-name-fake field-label-inline clearfix view-mode-full">';
  if (!$options['hide_title']) {
    $html .= '<h2 class="field-label">';
    $html .= $title;
    $html .= '</h2>';
  }
  $html .= '<div class="field-items">';
  foreach ($values as $value) {
    $html .= '<div class="field-item">';
    $html .= $value;
    $html .= '</div>';
  }
  $html .= '</div>';
  $html .= '</section>';
  return $html;
}

function sirius_field_changed($node1, $node2, $field_name) {
  if ($node1->{$field_name}) {
    foreach (array_keys($node1->{$field_name}) as $lang) {
      if ($node1->{$field_name}[$lang]) {
        foreach (array_keys($node1->{$field_name}[$lang]) as $delta) {
          if ($node1->{$field_name}[$lang][$delta]) {
            foreach ($node1->{$field_name}[$lang][$delta] as $col => $val) {
              if ($col == 'safe_value') { continue; }
              if ($val != $node2->{$field_name}[$lang][$delta][$col]) { return TRUE; }
            }
          }
        }
      }
    }
  }

  if ($node2->{$field_name}) {
    foreach (array_keys($node2->{$field_name}) as $lang) {
      if ($node2->{$field_name}[$lang]) {
        foreach (array_keys($node2->{$field_name}[$lang]) as $delta) {
          if ($node2->{$field_name}[$lang][$delta]) {
            foreach ($node2->{$field_name}[$lang][$delta] as $col => $val) {
              if ($col == 'safe_value') { continue; }
              if ($val != $node1->{$field_name}[$lang][$delta][$col]) { return TRUE; }
            }
          }
        }
      }
    }
  }

  return FALSE;
}


function sirius_find_nid_by_id($sirius_id, $bundle) {
  $sql = "select entity_id from field_data_field_sirius_id ";
  $sql .= "where entity_type = 'node' ";
  $sql .= "and bundle = :bundle ";
  $sql .= "and field_sirius_id_value = :sirius_id ";
  $stmt = db_query($sql, array(':bundle' => $bundle, ':sirius_id' => $sirius_id));
  $hr = $stmt->fetchAssoc();
  return $hr['entity_id'];
}

/**
 * Implements hook_module_implements_alter
 * 
 * WTF am I doing here? 
 *
 * There is a module, "admin_menu", which generates a handy menu for developers.
 * But among other things, it loads every single field instance in every single content type, so as to add those links to the menu.
 * Which, when the menu is rebuilt, sometimes crashes out the server, or takes several minutes for the page to deliver.
 * I don't want to hack or patch the module directly. So I'm implementing "module_implements_alter" to remove its implementation of 
 * the hook which takes forever (which it's implementing on behalf of the field_ui module, very improperly.)
 *
 * Better would be to modify the module to not show the damn fields.
 */

function sirius_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'admin_menu_map') {
    unset($implementations['field_ui']);
  }
}

/**
 * Implements hook_sirius_jsonfield_form_definitions()
 */

function sirius_sirius_jsonfield_form_definitions() {
  $definition = array();
  $definition = sirius_letterhead_sirius_jsonfield_form_definitions();
  $definition = array_merge_recursive($definition, sirius_contact_sirius_jsonfield_form_definitions());
  return $definition;
}

/**
 * Implements hook_file_download_access
 */

function sirius_file_download_access($file_item, $entity_type, $entity) {
  // God damn signatures
  // if ($file_item['uri'] && preg_match('/^private\:\/\/sirius_signature\//', $file_item['uri'])) { return TRUE; }

  // Allow loopback requests (from the originating server)
  if ($_REQUEST['loopback']) { return sirius_loopback_access(); }

  // Employers can see headshots. @todo this should probably live in the sirius_employer module.
  if ($entity_type == 'node' && $entity->type == 'sirius_worker' && preg_match('/private:\/\/sirius_headshot/', $file_item['uri'])) {
    if (user_access('sirius dispatch employer')) { return TRUE; }
  }

  // Materials get treated specially
  if ($entity_type == 'node' && $entity->type == 'sirius_log' && $entity->field_sirius_category['und'][0]['value'] == 'material') {
    return sirius_materials_download_access($file_item, $entity_type, $entity);
  }

  // Attachments to public nodes can be downloaded
  if ($entity_type == 'node' && sirius_public_node_access($entity)) {
    return TRUE; 
  }
}

/**
 * Implements hook_user_login
 *
 * Prevent login for users with disabled domains
 */

function sirius_user_login(&$edit, $account) {
  sirius_domain_user_login($edit, $account); 
}


/**
 * Implements hook_node_insert
 */

// function sirius_node_insert($node) {
// }


/**
 * Implements hook_node_update
 */

function sirius_node_update($node) {
  if ($node->type == 'sirius_domain') { sirius_domain_node_update($node); }
}

/**
 * Implements hook_views_query_alter
 */

function sirius_views_query_alter(&$view, &$query) {
  // If the argument expects CURRENT_DOMAIN, make sure that we haven't passed any arguments in via the URL. 
  if ($view->argument) {
    foreach ($view->argument as $argument_key => $argument) {
      if ($argument_key != 'field_sirius_domain_target_id') { continue; }
      if ($argument->options['default_argument_options']['argument'] != 'CURRENT_DOMAIN') { continue; }
      $arg = $view->args[$argument->position];
      $domain_nid = sirius_domain_nid();
      if ($arg && $arg != 'CURRENT_DOMAIN' && $arg != $domain_nid && !user_access('sirius admin')) {
        print "A domain of $arg was passed into the URL. Access denied.";
        exit();
      }
    }
  }

  if ($query->where) {
    foreach ($query->where as $delta => &$clause) {
      if ($clause['conditions']) {
        foreach ($clause['conditions'] as $delta2 => &$condition) {
          $matches = array();
          if ($condition['operator'] == 'formula' && preg_match('/\s*([a-zA-Z0-9_\.]+)\s+=\s+(:[a-zA-Z0-9_\.]+)\s*/', $condition['field'], $matches)) {
            $var = $matches[2];

            // If the value is "CURRENT_DOMAIN", try to use the current domain (default to NULL)
            if (is_array($condition['value']) && $condition['value'][$var] == 'CURRENT_DOMAIN') {
              $current_domain_nid = sirius_domain_nid();
              if ($current_domain_nid) { 
                $condition['value'][$var] = $current_domain_nid;
              } else {
                $condition['value'][$var] = 'NULL';
              }
            }

            // Irritatingly, within Views contextual filters, there's no way to have a default value of NULL. 
            // So, for example, you can't say "give me all the results for value X, and if X is missing, give me all the results where X is null."
            // This hideous snippet of code allows you to put a default value of the (string) "NULL". When it detects it, it converts it into a "IS NULL" condition.
            if (is_array($condition['value']) && $condition['value'][$var] == 'NULL') {
              $condition['field'] = 'field_data_field_sirius_domain.field_sirius_domain_target_id';
              $condition['operator'] = 'IS NULL';
              unset($condition['value']);
            }
          }
        }
      }
    }
  }
}

function sirius_views_pre_view(&$view, &$display_id, &$args) {
  // The admin view "taxonomy_term" is bizarrely persistent and a bizarrely grotesque security hole.
  if ($view->name == 'taxonomy_term') {
    $args = array(-999);
  }
}

function sirius_views_pre_build_disabled(&$view) {
  // Validate the domain argument if we're expecting CURRENT_DOMAIN
  dpm($view->argument);
  if ($view->argument) {
    $delta = -1;
    foreach ($view->argument as $argument_key => $argument) {
      ++$delta;
      if ($argument_key != 'field_sirius_domain_target_id') { continue; }
      if ($argument->options['default_argument_options']['argument'] != 'CURRENT_DOMAIN') { continue; }

      $arg = $view->arg[$delta];

      $view->argument[$argument_key]->specify_validation = 1;
      $view->argument[$argument_key]->validate = array('type' => 'php', 'fail' => 'access denied');
      $domain_nid = sirius_domain_nid();
      $view->argument[$argument_key]->validate_options = array('code' => "drupal_set_message('Generated validator here!'); return \$argument == $domain_nid;");
    }
  }
  dpm($view->argument);
}

/**
 *  Needed this to dynamically generate links. 
 *  @todo It either needs to be refactored, removed, or pushed into its own file. Very rudimentary at the moment.
 */

function sirius_quicknav($links) {
  $current_path = current_path();

  $html = '<div class="sirius_quicknav">';
  foreach ($links as $link) {
    $path = $link['path'];
    $query = $link['query'];
    if (!$query) { $query = array(); }
    $is_current = TRUE;
    if ($path != $current_path) { $is_current = FALSE; }
    foreach ($query as $key => $value) {
      if ($_GET[$key] != $value) { $is_current = FALSE; }
    }
    foreach ($_GET as $key => $value) {
      if ($key == 'q') { continue; }
      if ($query[$key] != $value) { $is_current = FALSE; }
    }

    if ($is_current) {
      $html .= '<span>' . $link['title'] . '</span>';
    } else {
      $html .= l($link['title'], $link['path'], array('query' => $query));
    }
  }
  $html .= '</div>';

  return $html;
}

/**
 * Copied from drupal_html_to_text. 
 */

function sirius_text_to_html($string) {
  $string = htmlentities($string);
  $string = nl2br($string);
  return $string;
}

/** 
 * Wrapper around require_once()
 */

function sirius_require($module_name, $file) {
  require_once DRUPAL_ROOT . '/' . drupal_get_path('module', $module_name) . '/' . $file;
}

/**
 * Check to see whether it's "safe" to delete a node, i.e. verify that it's not referenced by something that needs it.
 */

function sirius_node_can_delete($node) {
  if ($node->type == 'sirius_contact') {
    return sirius_contact_can_delete($node);
  }

  return array('success' => TRUE);
}

/**
 * Wrapper around node_delete, but check to make sure that it's safe first.
 */

function sirius_node_careful_delete($node) {
  if (!is_object($node)) { 
    $node = node_load($node);
  }

  if (!is_object($node)) { 
    return array('success' => FALSE, 'msg' => 'Does not appear to be a node or nid.'); 
  }

  $can_delete = sirius_node_can_delete($node);
  if (!$can_delete['success']) { 
    return $can_delete;
  }

  node_delete($node->nid); 
  return array('success' => TRUE, 'msg' => 'Record deleted.');
}

function sirius_ajax_generic_replace($form, $form_state) {
  $params = $form_state['triggering_element']['#sirius_ajax'];
  $wrapper = $params['wrapper'];

  $element_path = explode(':', $params['element']);
  $element = $form;
  foreach ($element_path as $item_name) {
    if (is_array($element)) { $element = $element[$item_name]; }
  }

  if ($params['files']) {
    $module = $params['module'];
    foreach ($params['files'] as $file) {
      sirius_require($module, $file);
    }
  }
  $commands = array();
  $commands[] = ajax_command_replace($wrapper, render($element));
  return array(
    '#type' => 'ajax',
    '#commands' => $commands
  );
}

/**
 * Just a stupid wrapper around number_format() that doesn't throw an error when it's not passed a number.
 */

function sirius_number_format($str, $decimals = 0 , $decimal_separator = "." , $thousands_separator = ",") {
  if (!is_numeric($str)) { return $str; }
  if (is_numeric($str)) { return number_format($str, $decimals, $decimal_separator, $thousands_separator); }
}

/**
 * Return a user-friendly name for a content type. For instance, if the machine name is "sirius_worker", the internal name is "Sirius Worker". But we just return "Worker".
 */

function sirius_content_type_name($machine_name) {
  $lookup = &drupal_static(__FUNCTION__);
  if (!isset($lookup)) {
    $sql = "select type, name from node_type";
    $stmt = sirius_sql_query($sql, array());
    while ($hr = $stmt->fetchAssoc()) {
      $name = $hr['name'];
      $name = preg_replace('/sirius/i', '', $name);
      $name = preg_replace('/grievance/i', '', $name);
      $name = preg_replace('/ledger/i', '', $name);
      $name = trim($name);

      if ($name == 'Shop') { $name = 'Employer'; }
      $lookup[$hr['type']] = $name;
    }
  }

  return $lookup[$machine_name];
}

function sirius_node_title($nid) {
  if (!$nid) { return NULL; }
  $sql = "select title from node where nid = :nid";
  $stmt = sirius_sql_query($sql, array(':nid' => $nid));
  $hr = $stmt->fetchAssoc();
  return $hr['title'];
}

/**
 * Implements hook_user_cancel_methods_alter
 *
 * Nobody should ever have access to "cancel account and delete all its content."
 */

function sirius_user_cancel_methods_alter(&$methods) {
  if ($methods && $methods['user_cancel_delete']) {
    unset($methods['user_cancel_delete']);
  }
}

/**
 * Implements hook_views_pre_render()
 */

function sirius_views_pre_render(&$view) {
  if ($view->name == 'sirius_bookmarks') {
    return sirius_bookmark_view_pre_render($view);
  }
}
