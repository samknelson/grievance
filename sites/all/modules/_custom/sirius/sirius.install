<?php

/**
 * Create the quickhash table
 */

/*
function sirius_update_7001() {

  $sqls = array(
    'CREATE TABLE sirius_quickhash (
    hash_key varchar(1024) primary key,
    hash_json json,
    hash_type varchar(255),
    hash_domain integer,
    hash_uid integer,
    hash_ts integer
    )',
  );

  foreach ($sqls as $sql) {
    try {
      print "Executing: $sql\n";
      $stmt = db_query($sql, array());
      print "... Done.\n";
    } catch (exception $ignore) { print "Error: " . $ignore->getMessage() . "\n"; }
  }
}
*/

/**
 * Enable geocoding modules
 */

function sirius_update_7002() {
  // Enable some modules
  $modules = array('geocoder', 'geophp', 'geofield');
  foreach ($modules as $module) {
    print "Enabling $module\n";
    module_enable(array($module), TRUE);
  }
}

/**
 * Enable leaflet modules
 */

function sirius_update_7003() {
  // Enable some modules
  $modules = array('leaflet', 'leaflet_markercluster', 'leaflet_more_maps');
  foreach ($modules as $module) {
    print "Enabling $module\n";
    module_enable(array($module), TRUE);
  }
}

/**
 * Enable form_options_attributes modules
 */

function sirius_update_7004() {
  // Enable some modules
  $modules = array('form_options_attributes');
  foreach ($modules as $module) {
    print "Enabling $module\n";
    module_enable(array($module), TRUE);
  }
}

/**
 * Move all signatures from private files to public files
 */

function sirius_update_7005() {
  // Enable some modules
  $sql = 'select * from field_data_field_sirius_signature order by entity_id';
  $stmt = sirius_sql_query($sql, array());
  while ($hr = $stmt->fetchAssoc()) {
    $file = file_load($hr['field_sirius_signature_fid']);
    $dest = $file->uri;
    if (!preg_match('/private/', $dest)) { continue; }
    $dest = preg_replace('/private:/', 'public:', $dest);
    file_move($file, $dest);
    print "Moved: $dest\n";
  }
}

/**
 * Disable table_trash
 * Disable login_destination
 * Enable logintoboggan
 */

function sirius_update_7006() {
  // Enable some modules
  $modules = array('table_trash', 'login_destination');
  foreach ($modules as $module) {
    print "Disabling $module\n";
    module_disable(array($module), TRUE);
  }
  $modules = array('logintoboggan');
  foreach ($modules as $module) {
    print "Enabling $module\n";
    module_enable(array($module), TRUE);
  }
}

/**
 * Rename mailattach variables
 */

function sirius_update_7007() {
  $keys = array(
    'grievance_mailattach_user' => 'sirius_mailattach_user', 
    'grievance_mailattach_pass' => 'sirius_mailattach_pass',
    'grievance_mailattach_imapstr' => 'sirius_mailattach_imapstr',
    'grievance_mailattach_type' => 'sirius_mailattach_grievance_type', 
  );
  foreach ($keys as $old_key => $new_key) {
    print "Setting: $old_key => $new_key\n";
    variable_set($new_key, variable_get($old_key, ''));
  }
  if (!variable_get('sirius_mailattach_mode', '')) {
    variable_set('sirius_mailattach_mode', 'live');
  }
}


/**
 * Enable the fieldset helper module
 */

function sirius_update_7008() {
  // Enable some modules
  $modules = array('fieldset_helper');
  foreach ($modules as $module) {
    print "Enabling $module\n";
    module_enable(array($module), TRUE);
  }

  // Grant permission to use it to everybody
  $permission = 'save fieldset state';
  $roles = user_roles();
  foreach ($roles as $rid => $name) {
    print "... granting [$permission] to [$name]\n";
    user_role_grant_permissions($rid, array($permission));
  }
}

/**
 * Default mailattach settings
 */

function sirius_update_7009() {
  if (variable_get('sirius_mailattach_bundles', NULL)) { return; }
  if (!preg_match('/UNITE/', variable_get('sirius_banner_name', ''))) { return; }
  print "Setting default mailattachment settings\n";
  variable_set('sirius_mailattach_bundles', array('grievance' => 'grievance'));
  variable_set('sirius_mailattach_bundle_default', 'grievance');
}

/**
 * Disable the fieldset helper module
 */

function sirius_update_7010() {
  $modules = array('fieldset_helper');
  foreach ($modules as $module) {
    print "Disabling $module\n";
    module_disable(array($module), TRUE);
  }
}

/**
 * Enable dashboard
 */

function sirius_update_7011() {
  $modules = array('sirius_dashboard');
  foreach ($modules as $module) {
    print "Enabling $module\n";
    module_enable(array($module), TRUE);
  }
}

/**
 * Set SMTP module to allow HTML
 */

function sirius_update_7012() {
  if (variable_get('smtp_allowhtml', 1) == 1) { return; }
  print "Setting smtp_allowhtml = 1\n";
  variable_set('smtp_allowhtml', 1);
}

/**
 * Grant "certification view / edit" to any training staff or admins
 */

function sirius_update_7013() {
  $if_you_have = 'sirius training staff';
  $then_you_gets = array('sirius training certification view', 'sirius training certification edit');

  foreach ($then_you_gets as $then_you_get) {
    print "Granting new permission [$then_you_get] to anybody with permission [$if_you_have] ...\n";
    $roles = user_roles(FALSE, $if_you_have);
    foreach ($roles as $rid => $name) {
      print "... granting [$then_you_get] to [$name]\n";
      user_role_grant_permissions($rid, array($then_you_get));
    }
  }
}

/**
 * Grant "sirius employer labor projection manager" to anybody with the right role
 */

function sirius_update_7014() {
  $if_you_haves = array('sirius employer user manager', 'sirius employer admin');
  $then_you_gets = array('sirius employer labor projection manager');

  foreach ($if_you_haves as $if_you_have) {
    foreach ($then_you_gets as $then_you_get) {
      print "Granting new permission [$then_you_get] to anybody with permission [$if_you_have] ...\n";
      $roles = user_roles(FALSE, $if_you_have);
      foreach ($roles as $rid => $name) {
        print "... granting [$then_you_get] to [$name]\n";
        user_role_grant_permissions($rid, array($then_you_get));
      }
    }
  }
}

/**
 * Turn on the bulk component for all domains
 */

function sirius_update_7015() {
  $sql = "select nid from node where type = 'sirius_domain'";
  $stmt = sirius_sql_query($sql, array());
  while ($hr = $stmt->fetchAssoc()) {
    $domain_nid = $hr['nid'];
    $domain_node = node_load($domain_nid);
    print "Enabling bulk messages for " . $domain_node->title . " ($domain_nid)\n";
    sirius_domain_component_enable('bulk', $domain_node);
  }
}

/**
 * Turn on the Flag module
 */

function sirius_update_7016() {
  $modules = array('shortcut');
  foreach ($modules as $module) {
    print "Disabling $module\n";
    module_disable(array($module), TRUE);
  }

  $modules = array('flag');
  foreach ($modules as $module) {
    print "Enabling $module\n";
    module_enable(array($module), TRUE);
  }

  $if_you_haves = array('sirius admin', 'sirius domain admin');
  $then_you_gets = array('sirius bookmark');

  foreach ($if_you_haves as $if_you_have) {
    foreach ($then_you_gets as $then_you_get) {
      print "Granting new permission [$then_you_get] to anybody with permission [$if_you_have] ...\n";
      $roles = user_roles(FALSE, $if_you_have);
      foreach ($roles as $rid => $name) {
        print "... granting [$then_you_get] to [$name]\n";
        user_role_grant_permissions($rid, array($then_you_get));
      }
    }
  }
}


/**
 * Turn on the fontawesome module
 */

function sirius_update_7017() {
  $modules = array('fontawesome');
  foreach ($modules as $module) {
    print "Enabling $module\n";
    module_enable(array($module), TRUE);
  }

  variable_set('fontawesome_external', array('use_cdn' => FALSE));
}

/**
 * Our own flood control module
 */

function sirius_update_7018() {
  $modules = array('sirius_flood');
  foreach ($modules as $module) {
    print "Enabling $module\n";
    module_enable(array($module), TRUE);
  }

  $modules = array('flood_unblock');
  foreach ($modules as $module) {
    print "Disabling $module\n";
    module_disable(array($module), TRUE);
    drupal_uninstall_modules(array($module));
  }
}

/**
 * Our own cron
 */

function sirius_update_7019() {
  $modules = array('sirius_cron');
  foreach ($modules as $module) {
    print "Enabling $module\n";
    module_enable(array($module), TRUE);
  }
}

/**
 * Grant dispatch preference permissions
 */

function sirius_update_7020() {
  $if_you_haves    = array('sirius dispatch own preferences', 'sirius dispatch staff');
  $then_you_gets  = array(
    'sirius dispatch pref notifications',
    'sirius dispatch pref asi',
    'sirius dispatch pref dnc2',
    'sirius dispatch pref hfe',
    'sirius dispatch pref cbn',
    'sirius dispatch pref eba',
  );
  sirius_updateutil_grant($if_you_haves, $then_you_gets);

  $if_you_haves    = array('sirius dispatch own preferences skill', 'sirius dispatch staff');
  $then_you_gets  = array('sirius dispatch pref skill');
  sirius_updateutil_grant($if_you_haves, $then_you_gets);

  $if_you_haves    = array('sirius dispatch own preferences department', 'sirius dispatch staff');
  $then_you_gets  = array('sirius dispatch pref dept');
  sirius_updateutil_grant($if_you_haves, $then_you_gets);
}

/**
 * Delete some temporary tables that might still exists
 */

function sirius_update_7021() {
  $tables = array('foo', 'bar', 'bak', 'bak2', 'tmp');
  foreach ($tables as $table) {
    print "Dropping: $table...\n";
    $sql = "drop table if exists $table";
    $stmt = sirius_sql_query($sql, array());
  }
}

/**
 * Uninstall some unnecessary modules
 */

function sirius_update_7022() {
  $modules = array(
    'grievance_oneoffs',
    'grievance_pages',
    'grievance_menus',
    'grievance_settings',
    'grievance_roles_and_permissions',
  );

  foreach ($modules as $module) {
    if (module_exists($module)) {
      print "Removing: $module\n";
      module_disable(array($module));
      drupal_uninstall_modules(array($module));
    }
  }
}

/**
 * Migrate the grievance_gender field
 */

function sirius_update_7023() {
  sirius_require('sirius', 'install/sirius.update_7023.inc');
  sirius_update_7022_impl();
}

/**
 * Delete the "Settlement" View
 */

function sirius_update_7024() {
  if ($view = views_get_view('grievance_settlement_report')) {
    views_delete_view($view);
  }
}

/**
 * Enable the sched, denorm module
 */

function sirius_update_7025() {
  $modules = array('sirius_sched', 'sirius_denorm');
  foreach ($modules as $module) {
    print "Enabling $module\n";
    module_enable(array($module), TRUE);
  }
}

/**
 * Create some indices on JSON field
 */

function sirius_update_7026() {
  $sqls = array(
    'alter table field_data_field_sirius_json add column json_denorm_external_id varchar(255) generated always as (field_sirius_json_value ->> \'$.external_id\')',
    'alter table field_data_field_sirius_json add index json_denorm_external_id (json_denorm_external_id)',
  );

  foreach ($sqls as $sql) {
    try {
      print "Executing: $sql\n";
      $stmt = db_query($sql, array());
      print "... Done.\n";
    } catch (exception $ignore) { print "Error: " . $ignore->getMessage() . "\n"; }
  }
}

/**
 * Opt out of announcements
 */

function sirius_update_7027() {
  variable_set('announcements_feed_enable_by_default_opt_out', TRUE);
  // Enable some modules
  $modules = array('announcements_feed');
  foreach ($modules as $module) {
    print "Disabling $module\n";
    module_disable(array($module), TRUE);
  }
}

/**
 * update the sirius_gender field for Workers
 */

function sirius_update_7028() {
  sirius_require('sirius', 'install/sirius.update_7028.inc');
  sirius_update_7028_impl();
}

/**
 * update the SIB representation
 */

function sirius_update_7029() {
  sirius_require('sirius', 'install/sirius.update_7029.inc');
  sirius_update_7029_impl();
}

/**
 * Migrate the payperiod fields
 */

function sirius_update_7030() {
  sirius_require('sirius', 'install/sirius.update_7030.inc');
  sirius_update_7030_impl();
}

function sirius_updateutil_grant($if_you_haves, $then_you_gets) {
  foreach ($if_you_haves as $if_you_have) {
    foreach ($then_you_gets as $then_you_get) {
      print "Granting new permission [$then_you_get] to anybody with permission [$if_you_have] ...\n";
      $roles = user_roles(FALSE, $if_you_have);
      foreach ($roles as $rid => $name) {
        print "... granting [$then_you_get] to [$name]\n";
        user_role_grant_permissions($rid, array($then_you_get));
      }
    }
  }
}

/**
 * Add the external_id column to the JSON field. 
 * This sometimes failed on update_7026 because of MariaDB-specific SQL. Just in case, we're re-running it.
 */

function sirius_update_7031() {
  $sqls = array(
    'alter table field_data_field_sirius_json add column json_denorm_external_id varchar(255) generated always as (JSON_UNQUOTE(JSON_EXTRACT(field_sirius_json_value, \'$.external_id\')))',
    'alter table field_data_field_sirius_json add index json_denorm_external_id (json_denorm_external_id)',
  );

  foreach ($sqls as $sql) {
    try {
      drupal_set_message("Executing: $sql");
      $stmt = db_query($sql, array());
    } catch (exception $ignore) {
      drupal_set_message("Error: " . $ignore->getMessage(), 'warning');
    }
  }
}

