<?php

/**
 * Change "Employer Name" field to be a long-text field.
 */

function grievance_update_7001() {
  // Manual database changes.
  db_query("UPDATE {field_config} SET type = 'text_long' WHERE field_name = 'field_grievance_emp_name'");
  db_change_field('field_data_field_grievance_emp_name', 'field_grievance_emp_name_value', 'field_grievance_emp_name_value', array(
    'type' => 'text',
    'size' => 'big',
    'not null' => FALSE,
  ));
  db_change_field('field_revision_field_grievance_emp_name', 'field_grievance_emp_name_value', 'field_grievance_emp_name_value', array(
    'type' => 'text',
    'size' => 'big',
    'not null' => FALSE,
  ));

  // Clear caches.
  field_cache_clear(TRUE);
}

/**
 * Set the "status date" = "creation date" for log entries with no status date.
 */

function grievance_update_7002() {
  $sql .= "select node.nid ";
  $sql .= "from node ";
  $sql .= "left join field_data_field_grievance_status_date on (field_data_field_grievance_status_date.entity_type = 'node' and field_data_field_grievance_status_date.entity_id = node.nid) ";
  $sql .= "where node.type = 'grievance_log' ";
  $sql .= "and field_grievance_status_date_value is null ";
  $sql .= "order by node.nid ";

  $stmt = db_query($sql, array());
  $nids = array();
  while ($hr = $stmt->fetchAssoc()) {
    $nids[] = $hr['nid'];
  }

  foreach ($nids as $nid) {
    print "Updating log node $nid\n";
    $node = node_load($nid);
    $node->field_grievance_status_date['und'][0]['value'] = date('Y-m-d', $node->created);
    node_save($node);
    entity_get_controller('node')->resetCache();
  }
}

/**
 * Move weight from the native DraggableViews handler into a standard Drupal field
 */

function grievance_update_7003() {
  // First set all to 0
  $sql = "select * from node where type in ('grievance_contract_clause', 'grievance_con') ";
  $sql .= "order by nid ";
  $stmt = db_query($sql, array());
  $nids = array();
  while ($hr = $stmt->fetchAssoc()) {
    $nids[] = $hr['nid'];
  }

  foreach ($nids as $nid) {
    $node = node_load($nid);
    print "Initializing weight for $nid (" . $node->title . ")\n";
    $node->field_grievance_weight['und'][0]['value'] = 0;
    node_save($node);
    entity_get_controller('node')->resetCache();
  }

  print "Updating weight...\n";
  $sql = "select * from draggableviews_structure ";
  $sql .= "where view_name in ('grievance_contract_clauses', 'grievance_contract_sections') ";
  $sql .= "order by view_name, entity_id ";

  $stmt = db_query($sql, array());
  $nids = array();
  while ($hr = $stmt->fetchAssoc()) {
    $nids[$hr['entity_id']] = $hr['weight'];
  }

  foreach ($nids as $nid => $weight) {
    $node = node_load($nid);
    if (!$node->title) { continue; }
    print "Updating weight for $nid (" . $node->title . ")\n";
    $node->field_grievance_weight['und'][0]['value'] = $weight;
    node_save($node);
    entity_get_controller('node')->resetCache();
  }
}

/**
 * Set default values for all document types
 */

function grievance_update_7004() {
  print "Setting default values for all document types\n";
  $vocabulary = taxonomy_vocabulary_machine_name_load('grievance_document_types');
  $terms = taxonomy_get_tree($vocabulary->vid);
  foreach ($terms as $term) {
    $tid = $term->tid;
    $term_full = taxonomy_term_load($tid);
    if (!$term_full->field_grievance_can_attach['und'][0]['value']) {
      $term_full->field_grievance_can_attach['und'][0]['value'] = 'Yes';
      taxonomy_term_save($term_full);
      print "Saved " . $term_full->name . "\n";
    }
  }
}

function grievance_update_7005() {
  print "---------------------------------------------------------------------------\n\n\n";
  print "DON'T FORGET TO ENABLE watchdog_queue\n";
  print "(Should have done this with module_enable() but I couldn't be bothered.)\n\n\n";
  print "Also, don't forget to grant anonymous users permission, and disable default environment\n\n\n";
  print "---------------------------------------------------------------------------\n";
}

function grievance_update_7006() {
  print "Deleting deprecated notification fields\n";

  foreach (array('field_grievance_notify_subject', 'field_grievance_notify_body') as $field_name) {
    if ($instance = field_info_instance('node', $field_name, 'grievance_contract_rule')) {
      print "Deleting: $field_name from grievance_contract_rule.\n";
      field_delete_instance($instance);
    }
  }
}

/*
 * Do not uncomment this until local 100 has switched to the letters interface.
 *

function grievance_update_700xyz() {
  print "Deleting deprecated notification fields\n";

  foreach (array('field_grievance_notify_subject', 'field_grievance_notify_body') as $field_name) {
    if ($instance = field_info_instance('taxonomy_term', $field_name, 'grievance_status')) {
      print "Deleting: $field_name from grievance_status.\n";
      field_delete_instance($instance);
    }
  }
}
 */

 
function grievance_update_7007() {
  print "---------------------------------------------------------------------------\n\n\n";
  print "DON'T FORGET TO ENABLE environment_indicator\n";
  print "(Should have done this with module_enable() but I couldn't be bothered.)\n\n\n";
  print "Also, don't forget to grant all users permission to view environment indicators.\n";
  print "---------------------------------------------------------------------------\n";
}

/**
 * Set the time portion of the log date field
 */

function grievance_update_7008() {
  $sql = "select * from field_data_field_grievance_time ";
  $sql .= "where entity_type = 'node' and bundle = 'grievance_log' and field_grievance_time_value > 0 and entity_id > 305362 ";
  $sql .= "order by entity_id ";
  $stmt = db_query($sql);

  while ($hr = $stmt->fetchAssoc()) {
    entity_get_controller('node')->resetCache();

    $log_nid = $hr['entity_id'];
    print "Scanning: $log_nid\n";

    $log_node = node_load($log_nid);
    if (!$log_node->field_grievance_status_date['und'][0]['value']) { continue; }
    if (!preg_match('/00\:00/', $log_node->field_grievance_status_date['und'][0]['value'])) { continue; }
    if (!preg_match('/2017/', $log_node->field_grievance_status_date['und'][0]['value'])) { continue; }

    $time_ts = $hr['field_grievance_time_value'];
    if ($time_ts >= 86400) {
      $time_ts = $time_ts - 86400;
    }

    $date_ts = strtotime(date('Y-m-d e', strtotime($log_node->field_grievance_status_date['und'][0]['value'])) . ' GMT');

    $full_ts = $date_ts + $time_ts;
    $fullstr = date('Y-m-d H:i:s', $full_ts);

    print "Node $log_nid: converted " . $log_node->field_grievance_status_date['und'][0]['value'] . " to $fullstr\n";

    $log_node->field_grievance_status_date['und'][0]['value'] = $fullstr;
    node_save($log_node);
  }
}

function grievance_update_7009() {
  if ($instance = field_info_instance('node', 'field_grievance_time', 'grievance_log')) {
    print "Deleting: field_grievance_time from grievance_log.\n";
    field_delete_instance($instance);
  }
}

function grievance_update_7010() {
  // Throwing this away because views_record_count is not feature-enabled, and there's less stupid ways to do it.
  // print "Enabling views_record_count.\n";
  // module_enable('views_record_count');
}


function grievance_update_7011() {
  // Enable FPA
  print "Enabling FPA module\n";
  module_enable(array('fpa'), TRUE);

  // Enable the new Sirius LinkField module
  print "Enabling sirius views linkfield module\n";
  module_enable(array('sirius_views_linkfield'), TRUE);

  // Grant "grievance contract view" for anybody with 
  print "Granting new permission [grievance contract view] to anybody with permission [grievance view] ...\n";
  $roles = user_roles(FALSE, 'grievance view');
  foreach ($roles as $rid => $name) {
    print "... granting [grievance contract view] to [$name]\n";
    user_role_grant_permissions($rid, array('grievance contract view'));
  }
}

function grievance_update_7012() {
  // Enable FPA
  print "Enabling SaveGuard\n";
  // module_enable(array('saveguard'), TRUE);
}

function grievance_update_7013() {
  // Enable document retention
  print "Enabling Document Retention\n";
  module_enable(array('sirius_document_retention'), TRUE);

  // Grant "" for anybody with 
  print "Granting new permission [sirius document retention admin] to anybody with permission [grievance view] ...\n";
  $roles = user_roles(FALSE, 'grievance admin');
  foreach ($roles as $rid => $name) {
    print "... granting [sirius document retention admin] to [$name]\n";
    user_role_grant_permissions($rid, array('sirius document retention admin'));
  }
}

function grievance_update_7014() {
  // Enable some modules
  $modules = array('addressfield', 'geofield', 'sirius_jsonfield', 'imagefield_crop');
  foreach ($modules as $module) {
    print "Enabling $module\n";
    module_enable(array($module), TRUE);
  }
}

function grievance_update_7015() {
  // Grant some permissions
  $new_permissions = array(
    'sirius',
    'sirius ssn',
    'sirius log view',
    'sirius edit own user'
  );
  foreach ($new_permissions as $permission) {
    print "Granting new permission [$permission] to anybody with permission [grievance view] ...\n";
    $roles = user_roles(FALSE, 'grievance view');
    foreach ($roles as $rid => $name) {
      print "... granting [$permission] to [$name]\n";
      user_role_grant_permissions($rid, array($permission));
    }
  }
}

function grievance_update_7016() {
  // Enable some modules
  print "Disabling search\n";
  module_disable(array('search'), TRUE);
}

function grievance_update_7017() {
  $table = 'field_data_field_sirius_id';
  $column = 'field_sirius_id_value';
  try { db_add_index($table, "${table}_${column}", array($column)); } catch (exception $ignore) { }

  $table = 'field_data_field_sirius_id2';
  $column = 'field_sirius_id2_value';
  try { db_add_index($table, "${table}_${column}", array($column)); } catch (exception $ignore) { }
}

function grievance_update_7018() {
  // Enable some modules
  print "Disabling field_permissions\n";
  module_disable(array('field_permissions'), FALSE);
}

function grievance_update_7019() {
  // Enable some modules
  print "Enabling views_regex_rewrite\n";
  module_enable(array('views_regex_rewrite'), FALSE);
}

/**
 * Disable conditional fields
 */

function grievance_update_7020() {
  // Enable some modules
  module_disable(array('conditional_fields'), FALSE);
  return t('Disabled conditional_fields');
}

/**
 * Letterhead permissions
 */

function grievance_update_7021() {
  $permission = 'sirius letterhead use';
  $old_permission = 'grievance view';
  print "Granting new permission [$permission] to anybody with permission [$old_permission] ...\n";
  $roles = user_roles(FALSE, $old_permission);
  foreach ($roles as $rid => $name) {
    print "... granting [$permission] to [$name]\n";
    user_role_grant_permissions($rid, array($permission));
  }

  $permission = 'sirius letterhead edit';
  $old_permission = 'grievance admin';
  print "Granting new permission [$permission] to anybody with permission [$old_permission] ...\n";
  $roles = user_roles(FALSE, $old_permission);
  foreach ($roles as $rid => $name) {
    print "... granting [$permission] to [$name]\n";
    user_role_grant_permissions($rid, array($permission));
  }
}

/**
 * Set all shops with active=NULL to active=Yes
 */

function grievance_update_7022() {
  $sql = "select * from node ";
  $sql .= "left join field_data_field_sirius_active on field_data_field_sirius_active.entity_type = 'node' and field_data_field_sirius_active.entity_id = node.nid ";
  $sql .= "where node.type = 'grievance_shop' ";
  $sql .= "and field_sirius_active_value is null ";
  $sql .= "order by nid ";
  $stmt = db_query($sql, array());
  $shop_nids = array();
  while ($hr = $stmt->fetchAssoc()) {
    $shop_nids[] = $hr['nid'];
  }
  foreach ($shop_nids as $shop_nid) {
    $node = node_load($shop_nid);
    $node->field_sirius_active['und'][0]['value'] = 'Yes';
    node_save($node);
    print "Set node $shop_nid to Active.\n";
  }
  return 'Set all shops with active=NULL to active=Yes.';
}

/**
 * Set all contract templates with active=NULL to active=Yes
 */

function grievance_update_7023() {
  $sql = "select * from node ";
  $sql .= "left join field_data_field_sirius_active on field_data_field_sirius_active.entity_type = 'node' and field_data_field_sirius_active.entity_id = node.nid ";
  $sql .= "where node.type = 'grievance_contract_template' ";
  $sql .= "and field_sirius_active_value is null ";
  $sql .= "order by nid ";
  $stmt = db_query($sql, array());
  $nids = array();
  while ($hr = $stmt->fetchAssoc()) {
    $nids[] = $hr['nid'];
  }
  foreach ($nids as $nid) {
    $node = node_load($nid);
    $node->field_sirius_active['und'][0]['value'] = 'Yes';
    node_save($node);
    print "Set node $nid to Active.\n";
  }
  return 'Set all contract templates with active=NULL to active=Yes.';
}

/**
 * Grievance worker permission
 */

function grievance_update_7024() {
  if (module_exists('grievance_worker')) {
    $permission = 'grievance worker lookup';
    $old_permission = 'grievance view';
    print "Granting new permission [$permission] to anybody with permission [$old_permission] ...\n";
    $roles = user_roles(FALSE, $old_permission);
    foreach ($roles as $rid => $name) {
      print "... granting [$permission] to [$name]\n";
      user_role_grant_permissions($rid, array($permission));
    }
  }
}

/**
 * Index on SSN; delete the "feed type" taxonomy and field
 */

function grievance_update_7025() {
  $table = 'field_data_field_sirius_ssn';
  $column = 'field_sirius_ssn_value';
  try { db_add_index($table, "${table}_${column}", array($column)); } catch (exception $ignore) { }
  print "Added index on $table ($column)\n";

  $field = 'field_sirius_feed_type';
  try { field_delete_field($field); } catch (exception $e) { print_r($e); }
  print "Deleted field: $field\n";

  $name = 'sirius_feed_types';
  $vocabulary = taxonomy_vocabulary_machine_name_load($name);
  if ($vocabulary) { taxonomy_vocabulary_delete($vocabulary->vid); }
  print "Deleted taxonomy: $name\n";
}

/**
 * Enabled views_tree
 */

/*
function grievance_update_7026() {
  // Enable some modules
  $modules = array('views_tree');
  print "Enabling: " . join(',', $modules) . "\n";
  module_enable($modules, FALSE);
  return "Enabled " . join(',', $modules);
}
*/

/**
 * Edit Signature permission
 */

function grievance_update_7026() {
  $permission = 'sirius signature edit';
  $old_permission = 'grievance admin';
  print "Granting new permission [$permission] to anybody with permission [$old_permission] ...\n";
  $roles = user_roles(FALSE, $old_permission);
  foreach ($roles as $rid => $name) {
    print "... granting [$permission] to [$name]\n";
    user_role_grant_permissions($rid, array($permission));
  }
}

/**
 * Enables views_current_path
 */
function grievance_update_7027() {
  // Enable some modules
  print "Enabling views_current_path\n";
  module_enable(array('views_current_path'), FALSE);
}

/**
 * Set sirius_email_default_from_address from grievance_from_email
 */

function grievance_update_7028() {
  if (!variable_get('sirius_email_default_from_address', '') && variable_get('grievance_from_email', '')) {
    variable_set('sirius_email_default_from_address', variable_get('grievance_from_email', ''));
    print "Set sirius_email_default_from_address = grievance_from_email = " . variable_get('sirius_email_default_from_address', '') . "\n";
  }
}

/**
 * Update the sign-in blocked data from a simple field into a taxonomy reference
 */

function grievance_update_7029() {
  // Move all blocked workers 
  $blocked_tid = sirius_get_special_tid('sirius_dispatch_sib|blocked');
  if ($blocked_tid) {
    print "Setting all blocked workers to have the tid $blocked_tid\n";
    try {
      $sql = "select entity_id from field_data_field_sirius_dispatch_sib where entity_type = 'node' and bundle = 'sirius_worker' and field_sirius_dispatch_sib_value = 'Yes'";
      $stmt = db_query($sql, array());
      $worker_nids = array();
      while ($hr = $stmt->fetchAssoc()) {
        $worker_nids[] = $hr['entity_id'];
      }
      $total = count($worker_nids);
      $count = 0;
      foreach ($worker_nids as $worker_nid) {
        ++$count;
        $worker_node = node_load($worker_nid);
        $worker_node->field_sirius_dispatch_sib_status['und'][0]['tid'] = $blocked_tid;
        node_save($worker_node);
        print "Set worker #$count/$total - $worker_nid ($worker_node->title)\n";
      }
    } catch (exception $ignore) {}
  }
}

/**
 * Change "info" to a longblob.
 */

function grievance_update_7030() {
  $sql = "ALTER TABLE system CHANGE info info LONGBLOB NULL DEFAULT NULL";
  $stmt = db_query($sql, array());
  print "$sql\n";
}

/**
 * Remove the old sign-in blocked field
 */

/*
function grievance_update_7030() {
  $field = 'field_sirius_dispatch_sib';
  try { field_delete_field($field); } catch (exception $e) { print_r($e); }
  print "Deleted field: $field\n";
}
*/

function grievance_update_7031() {
  $tables = array('field_data_field_sirius_json', 'field_revision_field_sirius_json');
  foreach ($tables as $table) {
    $sql = "delete from $table where not json_valid(field_sirius_json_value);";
    try { $stmt = db_query($sql, array()); } catch (exception $ignore) { print "Unable to execute: $sql. Please run manually after the database has been upgraded.\n"; }

    $sql = "alter table $table change field_sirius_json_value field_sirius_json_value json";
    try { $stmt = db_query($sql, array()); } catch (exception $ignore) { print "Unable to execute: $sql. Please run manually after the database has been upgraded.\n"; }
  }
}

/**
 * Disable pathauto; get rid of unnecessary aliases
 */

function grievance_update_7032() {
  // Disable pathauto
  print "Disabling pathauto\n";
  module_disable(array('pathauto'), TRUE);

  // Get rid of unnecessary aliases
  $sql = "delete from url_alias where alias like 'sirius-dispatch/%' or alias like 'sirius-help/%' or alias like 'sirius-worker/%' or alias like 'grievance/%' or alias like 'sirius-dispatch-job/%' or alias like 'sirius-dispatch-facility-hall/%' or alias like 'sirius-dispatch-facility/%' or alias like 'sirius-twilio-conversation/%'";
  print "$sql\n";
  $stmt = db_query($sql, array());
}


/**
 * Add index on id3
 */

function grievance_update_7033() {
  $table = 'field_data_field_sirius_id3';
  $column = 'field_sirius_id3_value';
  try { db_add_index($table, "${table}_${column}", array($column)); } catch (exception $ignore) { }
}

/**
 * Create the hours table. Raw sql.
 */

function grievance_update_7034() {

  $sqls = array();

  $sqls[] = "create table sirius_hours_cache (
    payperiod_nid integer,
    year integer,
    month integer,
    day integer,
    worker_nid integer,
    employer_nid integer,
    hours_type_tid integer,
    department_tid integer,
    hours numeric(10,6),
    total numeric(10,2),
    worker_name varchar(255),
    employer_name varchar(255),
    hours_type_name varchar(255),
    department_name varchar(255)
  );";

  $sqls[] = 'create index sirius_hours_cache_idx01 on sirius_hours_cache (payperiod_nid);';
  $sqls[] = 'create index sirius_hours_cache_idx02 on sirius_hours_cache (year, month, day);';
  $sqls[] = 'create index sirius_hours_cache_idx03 on sirius_hours_cache (worker_nid);';
  $sqls[] = 'create index sirius_hours_cache_idx04 on sirius_hours_cache (employer_nid);';
  $sqls[] = 'create index sirius_hours_cache_idx05 on sirius_hours_cache (worker_nid, year, month, day);';

  $sqls[] = 'create table sirius_lock (
    id varchar(255),
    type varchar(255),
    uid integer,
    ts integer,
    primary key (id, type),
    index (id),
    index (uid)
  );';

  foreach ($sqls as $sql)
  try { 
    print "Executing: $sql\n";
    db_query($sql, array());
  } catch (exception $ignore) {
    // Do nothing.
  }
}

/**
 * Move the "field_sirius_dispatch_notesdef" into json
 */

function grievance_update_7035() {
  try {
    $sql = "select * from field_data_field_sirius_dispatch_notesdef order by entity_id";
    $stmt = db_query($sql, array());
    while ($hr = $stmt->fetchAssoc()) {
      $entity_type = $hr['entity_type'];
      $entity_id = $hr['entity_id'];
      $notes = $hr['field_sirius_dispatch_notesdef_value'];

      if ($entity_type == 'node') {
        $entity = node_load($entity_id);
      } else if ($entity_type == 'taxonomy_term') {
        $entity = taxonomy_term_load($entity_id);
      }
      $json = json_decode($entity->field_sirius_json['und'][0]['value'], TRUE);
      $json['dispatch']['default']['notes'] = $notes;
      $entity->field_sirius_json['und'][0]['value'] = json_encode($json);
      if ($entity_type == 'node') { 
        node_save($entity);
      } else if ($entity_type == 'taxonomy_term') {
        taxonomy_term_save($entity);
      }

      print "Moved notes to json: $entity_type, $entity_id\n\n";
    }
  } catch (exception $ignore) { }

  if ($instance = field_info_instance('node', 'field_sirius_dispatch_notesdef', 'grievance_shop')) {
    print "Deleting: grievance_shop / field_sirius_dispatch_notesdef\n";
    field_delete_instance($instance);
  }

  if ($instance = field_info_instance('taxonomy_term', 'field_sirius_dispatch_notesdef', 'sirius_industry')) {
    print "Deleting: sirius_industry / field_sirius_dispatch_notesdef\n";
    field_delete_instance($instance);
  }
}

/**
 * Move the employer's "field_sirius_skill" into json
 */

function grievance_update_7036() {
  try {
    print "Moving skill settings for employers into JSON...\n";
    $sql = "select * from field_data_field_sirius_skill where entity_type = 'node' and bundle = 'grievance_shop' order by entity_id ";
    $stmt = db_query($sql, array());
    while ($hr = $stmt->fetchAssoc()) {
      $nid = $hr['entity_id'];
      $node = node_load($nid);

      $json = json_decode($node->field_sirius_json['und'][0]['value'], TRUE);
      $json['dispatch']['pay_at_skilled_rate']['skill'][] = $hr['field_sirius_skill_tid'];
      $node->field_sirius_json['und'][0]['value'] = json_encode($json);
      node_save($node);

      print "Updated: $node->title ($nid)\n";
    }

  } catch (exception $ignore) { }

  $bundle = 'grievance_shop';
  $field = 'field_sirius_skill';
  if ($instance = field_info_instance('node', $field, $bundle)) {
    print "Deleting: $bundle / $field\n";
    field_delete_instance($instance);
  }
}

/**
 * - Default the content type for letters
 * - Clear Phaxio credentials that were mistakenly copied
 * - Copy log type TID settings into the sirius_specialtid framework
 * - Copy field overrides into a variable
 * - Remove "Notify" from Sirius News
 * - Remove the "Grievance News" content type
 * - Disable the grievance_worker module
 * - Create a full-length index on node (type)
 */

function grievance_update_7037() {
  // 
  // All letters should default to grievance letters
  //

  $sql = "select nid from node where type = 'grievance_letter_template' order by nid";
  $stmt = db_query($sql, array());
  while ($hr = $stmt->fetchAssoc()) { $nids[] = $hr['nid']; }

  foreach ($nids as $nid) { 
    $node = node_load($nid);
    if ($node->field_sirius_letter_content_type['und'][0]['value']) { continue; }
    $node->field_sirius_letter_content_type['und'][0]['value'] = 'grievance';
    node_save($node);
    print "Updated: " . $node->title . "\n";
  }

  //
  // We mistakenly cloned Phaxio account information to several sites. Need to clear it for everybody who's not UNITE HERE.
  //

  $banner_name = variable_get('sirius_banner_name', '');
  if (variable_get('grievance_phaxio_api_key') == 'f6c8ae8477505334fb3ed01a98e2e959951d325d') {
    if (!preg_match('/UNITE/i', $banner_name)) {
      $keys = array('grievance_phaxio_api_key', 'grievance_phaxio_api_secret', 'grievance_phaxio_api_host', 'grievance_phaxio_callback_token');
      foreach ($keys as $key) { 
        print "Clearing: $key\n";
        variable_set($key, '');
      }
    }
  }

  //
  // Copy special TID settings
  //

  print "Migrating log type settings\n";
  variable_set('sirius_specialtid_grievance_log_types|modal_default',                 variable_get('grievance_log_modal_default_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|incident',                      variable_get('grievance_log_incident_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|insert',                        variable_get('grievance_log_insert_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|update_with_status_change',     variable_get('grievance_log_update_type_with_status_change', ''));
  variable_set('sirius_specialtid_grievance_log_types|update_without_status_change',  variable_get('grievance_log_update_type_without_status_change', ''));
  variable_set('sirius_specialtid_grievance_log_types|notify',                        variable_get('grievance_log_notify_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|member_forward',                variable_get('grievance_log_member_forward_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|assignment',                    variable_get('grievance_log_assignment_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|first_call',                    variable_get('grievance_log_first_call_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|phaxio_callback',               variable_get('grievance_log_phaxio_callback_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|spi',                           variable_get('grievance_log_spi_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|term',                          variable_get('grievance_log_term_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|written_warning',               variable_get('grievance_log_written_warning_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|final_warning',                 variable_get('grievance_log_final_warning_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|suspension',                    variable_get('grievance_log_suspension_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|merge',                         variable_get('grievance_log_merge_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|timelines_extended',            variable_get('grievance_log_timelines_extended_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|intake_1',                      variable_get('grievance_log_intake_1_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|intake_2',                      variable_get('grievance_log_intake_2_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|intake_3',                      variable_get('grievance_log_intake_3_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|intake_4',                      variable_get('grievance_log_intake_4_type', ''));
  variable_set('sirius_specialtid_grievance_log_types|intake_5',                      variable_get('grievance_log_intake_5_type', ''));

  //
  // Copy field overrides
  //

  print "Migrating field overrides\n";
  $sql = "select nid from node where type = 'grievance_field_overrides' ";
  $stmt = db_query($sql, array());
  $nids = array();
  while ($hr = $stmt->fetchAssoc()) { $nids[] = $hr['nid']; }
  $nodes = node_load_multiple($nids);
  $json = array();
  foreach ($nodes as $nid => $node) {
    $json[] = array(
      'entity_type' => $node->field_grievance_entity_type['und'][0]['value'],
      'bundle' => $node->field_grievance_bundle['und'][0]['value'],
      'field_name' => $node->field_grievance_field_name['und'][0]['value'],
      'label' =>  $node->field_grievance_label['und'][0]['value'],
    );
  }
  variable_set('sirius_field_overrides', json_encode($json));

  //
  // Remove "Notify" from "sirius news"
  //

  $bundle = 'sirius_news';
  $field = 'field_sirius_notify';
  if ($instance = field_info_instance('node', $field, $bundle)) {
    print "Deleting: $bundle / $field\n";
    field_delete_instance($instance);
  }

  //
  // Remoeve the grievance_news content type
  //

  print "Removing the Grievance News content type\n";
  $sql = "update node_type set locked = 0 where type = 'grievance_news'";
  $stmt = db_query($sql, array());
  try { node_type_delete('grievance_news'); } catch (exception $e) { print_r($e); }

  //
  // Disable some obsolete modules
  //

  $modules = array('grievance_worker');
  foreach ($modules as $module) {
    print "Disabling module: $module.\n";
    try { module_disable(array($module), TRUE); } catch (exception $ignore) { }
  }

  //
  // Enable some required modules
  //

  $modules = array('date_popup_timepicker');
  foreach ($modules as $module) {
    print "Enabling module: $module.\n";
    try { module_enable(array($module), TRUE); } catch (exception $ignore) { }
  }

  //
  // Create an index on node_type; see https://www.drupal.org/project/drupal/issues/2675434
  //

  try {
    print "Indexing node_type, see https://www.drupal.org/project/drupal/issues/2675434\n";
    $sql = "create index node_type_full on node (type)";
    $stmt = db_query($sql, array());
    print "... Done.\n";
  } catch (exception $ignore) { }

  //
  // Hide some new fields by default
  //

  if (!preg_match('/631/', $banner_name)) {
    // variable_set('grievance_hidefields', variable_get('grievance_hidefields' . "\n" . ))
  }
}
