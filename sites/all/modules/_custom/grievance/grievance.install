<?php

/**
 * Change "Employer Name" field to be a long-text field.
 */

function grievance_update_7001() {
  // Manual database changes.
  db_query("UPDATE {field_config} SET type = 'text_long' WHERE field_name = 'field_grievance_emp_name'");
  db_change_field('field_data_field_grievance_emp_name', 'field_grievance_emp_name_value', 'field_grievance_emp_name_value', array(
    'type' => 'text',
    'size' => 'big',
    'not null' => FALSE,
  ));
  db_change_field('field_revision_field_grievance_emp_name', 'field_grievance_emp_name_value', 'field_grievance_emp_name_value', array(
    'type' => 'text',
    'size' => 'big',
    'not null' => FALSE,
  ));

  // Clear caches.
  field_cache_clear(TRUE);
}

/**
 * Set the "status date" = "creation date" for log entries with no status date.
 */

function grievance_update_7002() {
  $sql .= "select node.nid ";
  $sql .= "from node ";
  $sql .= "left join field_data_field_grievance_status_date on (field_data_field_grievance_status_date.entity_type = 'node' and field_data_field_grievance_status_date.entity_id = node.nid) ";
  $sql .= "where node.type = 'grievance_log' ";
  $sql .= "and field_grievance_status_date_value is null ";
  $sql .= "order by node.nid ";

  $stmt = db_query($sql, array());
  $nids = array();
  while ($hr = $stmt->fetchAssoc()) {
    $nids[] = $hr['nid'];
  }

  foreach ($nids as $nid) {
    print "Updating log node $nid\n";
    $node = node_load($nid);
    $node->field_grievance_status_date['und'][0]['value'] = date('Y-m-d', $node->created);
    node_save($node);
    entity_get_controller('node')->resetCache();
  }
}

/**
 * Move weight from the native DraggableViews handler into a standard Drupal field
 */

function grievance_update_7003() {
  // First set all to 0
  $sql = "select * from node where type in ('grievance_contract_clause', 'grievance_contract_section') ";
  $sql .= "order by nid ";
  $stmt = db_query($sql, array());
  $nids = array();
  while ($hr = $stmt->fetchAssoc()) {
    $nids[] = $hr['nid'];
  }

  foreach ($nids as $nid) {
    $node = node_load($nid);
    print "Initializing weight for $nid (" . $node->title . ")\n";
    $node->field_grievance_weight['und'][0]['value'] = 0;
    node_save($node);
    entity_get_controller('node')->resetCache();
  }

  print "Updating weight...\n";
  $sql = "select * from draggableviews_structure ";
  $sql .= "where view_name in ('grievance_contract_clauses', 'grievance_contract_sections') ";
  $sql .= "order by view_name, entity_id ";

  $stmt = db_query($sql, array());
  $nids = array();
  while ($hr = $stmt->fetchAssoc()) {
    $nids[$hr['entity_id']] = $hr['weight'];
  }

  foreach ($nids as $nid => $weight) {
    $node = node_load($nid);
    if (!$node->title) { continue; }
    print "Updating weight for $nid (" . $node->title . ")\n";
    $node->field_grievance_weight['und'][0]['value'] = $weight;
    node_save($node);
    entity_get_controller('node')->resetCache();
  }
}

/**
 * Set default values for all document types
 */

function grievance_update_7004() {
  print "Setting default values for all document types\n";
  $vocabulary = taxonomy_vocabulary_machine_name_load('grievance_document_types');
  $terms = taxonomy_get_tree($vocabulary->vid);
  foreach ($terms as $term) {
    $tid = $term->tid;
    $term_full = taxonomy_term_load($tid);
    if (!$term_full->field_grievance_can_attach['und'][0]['value']) {
      $term_full->field_grievance_can_attach['und'][0]['value'] = 'Yes';
      taxonomy_term_save($term_full);
      print "Saved " . $term_full->name . "\n";
    }
  }
}

function grievance_update_7005() {
  print "---------------------------------------------------------------------------\n\n\n";
  print "DON'T FORGET TO ENABLE watchdog_queue\n";
  print "(Should have done this with module_enable() but I couldn't be bothered.)\n\n\n";
  print "Also, don't forget to grant anonymous users permission, and disable default environment\n\n\n";
  print "---------------------------------------------------------------------------\n";
}

function grievance_update_7006() {
  print "Deleting deprecated notification fields\n";

  foreach (array('field_grievance_notify_subject', 'field_grievance_notify_body') as $field_name) {
    if ($instance = field_info_instance('node', $field_name, 'grievance_contract_rule')) {
      print "Deleting: $field_name from grievance_contract_rule.\n";
      field_delete_instance($instance);
    }
  }
}

/*
 * Do not uncomment this until local 100 has switched to the letters interface.
 *

function grievance_update_700xyz() {
  print "Deleting deprecated notification fields\n";

  foreach (array('field_grievance_notify_subject', 'field_grievance_notify_body') as $field_name) {
    if ($instance = field_info_instance('taxonomy_term', $field_name, 'grievance_status')) {
      print "Deleting: $field_name from grievance_status.\n";
      field_delete_instance($instance);
    }
  }
}
 */

 
function grievance_update_7007() {
  print "---------------------------------------------------------------------------\n\n\n";
  print "DON'T FORGET TO ENABLE environment_indicator\n";
  print "(Should have done this with module_enable() but I couldn't be bothered.)\n\n\n";
  print "Also, don't forget to grant all users permission to view environment indicators.\n";
  print "---------------------------------------------------------------------------\n";
}

/**
 * Set the time portion of the log date field
 */

function grievance_update_7008() {
  $sql = "select * from field_data_field_grievance_time ";
  $sql .= "where entity_type = 'node' and bundle = 'grievance_log' and field_grievance_time_value > 0 and entity_id > 305362 ";
  $sql .= "order by entity_id ";
  $stmt = db_query($sql);

  while ($hr = $stmt->fetchAssoc()) {
    entity_get_controller('node')->resetCache();

    $log_nid = $hr['entity_id'];
    print "Scanning: $log_nid\n";

    $log_node = node_load($log_nid);
    if (!$log_node->field_grievance_status_date['und'][0]['value']) { continue; }
    if (!preg_match('/00\:00/', $log_node->field_grievance_status_date['und'][0]['value'])) { continue; }
    if (!preg_match('/2017/', $log_node->field_grievance_status_date['und'][0]['value'])) { continue; }

    $time_ts = $hr['field_grievance_time_value'];
    if ($time_ts >= 86400) {
      $time_ts = $time_ts - 86400;
    }

    $date_ts = strtotime(date('Y-m-d e', strtotime($log_node->field_grievance_status_date['und'][0]['value'])) . ' GMT');

    $full_ts = $date_ts + $time_ts;
    $fullstr = date('Y-m-d H:i:s', $full_ts);

    print "Node $log_nid: converted " . $log_node->field_grievance_status_date['und'][0]['value'] . " to $fullstr\n";

    $log_node->field_grievance_status_date['und'][0]['value'] = $fullstr;
    node_save($log_node);
  }
}

function grievance_update_7009() {
  if ($instance = field_info_instance('node', 'field_grievance_time', 'grievance_log')) {
    print "Deleting: field_grievance_time from grievance_log.\n";
    field_delete_instance($instance);
  }
}

function grievance_update_7010() {
  // Throwing this away because views_record_count is not feature-enabled, and there's less stupid ways to do it.
  // print "Enabling views_record_count.\n";
  // module_enable('views_record_count');
}


function grievance_update_7011() {
  // Enable FPA
  print "Enabling FPA module\n";
  module_enable(array('fpa'), TRUE);

  // Enable the new Sirius LinkField module
  print "Enabling sirius views linkfield module\n";
  module_enable(array('sirius_views_linkfield'), TRUE);

  // Grant "grievance contract view" for anybody with 
  print "Granting new permission [grievance contract view] to anybody with permission [grievance view] ...\n";
  $roles = user_roles(FALSE, 'grievance view');
  foreach ($roles as $rid => $name) {
    print "... granting [grievance contract view] to [$name]\n";
    user_role_grant_permissions($rid, array('grievance contract view'));
  }
}

function grievance_update_7012() {
  // Enable FPA
  print "Enabling SaveGuard\n";
  // module_enable(array('saveguard'), TRUE);
}

function grievance_update_7013() {
  // Enable document retention
  print "Enabling Document Retention\n";
  module_enable(array('sirius_document_retention'), TRUE);

  // Grant "" for anybody with 
  print "Granting new permission [sirius document retention admin] to anybody with permission [grievance view] ...\n";
  $roles = user_roles(FALSE, 'grievance admin');
  foreach ($roles as $rid => $name) {
    print "... granting [sirius document retention admin] to [$name]\n";
    user_role_grant_permissions($rid, array('sirius document retention admin'));
  }
}

function grievance_update_7014() {
  // Enable some modules
  $modules = array('addressfield', 'geofield', 'sirius_jsonfield', 'imagefield_crop');
  foreach ($modules as $module) {
    print "Enabling $module\n";
    module_enable(array($module), TRUE);
  }
}
