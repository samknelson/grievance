<?php

// I hate notice errors
ini_set('error_reporting', ini_get('error_reporting') & ~E_NOTICE);

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.menu.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.form.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.forward.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.log.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.log_modal.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.attachment.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.settlement.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.permission.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.admin.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.admin_log_types.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.gform.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.arbitrationform.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.report_bytype.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.report_average_time.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.report_spi_term.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.report_year_summary.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.report_open_by_specialist.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.report_settlement_summary.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.report_status_summary.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.block.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.notify.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.alert.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.field_overrides.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.contacts.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.quicksearch.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.id.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.contract.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.holidays.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.bundle.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.replicate.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.delete.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.letter.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.letter_pdf.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.letter_form.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.letter_submit.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.phone.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.mine.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.prior.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.mailattach.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.assignee.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.phaxio.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.classification.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/grievance/grievance.shops.inc";

/**
 * Implement hook_cron() 
 */

function grievance_cron() {
  grievance_alert_all();
  grievance_mailattach_fetch();
  grievance_bundle_cleanup();
}

function grievance_node_update($node) {
  if ($node->type == 'grievance') {
    if ($node->field_grievance_rep_assignee['und'][0]['target_id'] != $node->original->field_grievance_rep_assignee['und'][0]['target_id']) {
      $node->grievance_assignment_changed = TRUE;
    }
    if ($node->field_grievance_assignee_notes['und'][0]['value'] != $node->original->field_grievance_assignee_notes['und'][0]['value']) {
      $node->grievance_assignment_changed = TRUE;
    }
    if ($node->field_grievance_status['und'][0]['tid'] != $node->original->field_grievance_status['und'][0]['tid']) {
      $node->grievance_status_changed = TRUE;
    }
  }

  if ($node->type == 'grievance_contract_clause')     { grievance_contract_clause_updateinsert($node); }
  if ($node->type == 'grievance_contract_section')    { grievance_contract_section_updateinsert($node); }
  if ($node->type == 'grievance_contract_template')   { grievance_contract_template_updateinsert($node); }
}

function grievance_node_insert($node) {
  if ($node->type == 'grievance') { $node->grievance_assignment_changed = TRUE; }
  if ($node->type == 'grievance_contract_clause')     { grievance_contract_clause_updateinsert($node); }
  if ($node->type == 'grievance_contract_section')    { grievance_contract_section_updateinsert($node); }
  if ($node->type == 'grievance_contract_template')   { grievance_contract_template_updateinsert($node); }
}

/*
 * Post-save
 *
 * After saving a node, we do various things:
 * - Log the updates, assignment changes, etc.
 * - Set the node's ID
 * - Set the alert date and time
 * 
 * This is registered as a shutdown function, because it shouldn't run
 * during the same transaction as when the node is created.
 */

function grievance_node_postsave($node, $op) {
  if ($node->type == 'grievance' && 
    ($op == 'insert' || $op == 'update') &&
    !$node->grievance_no_recurse) {

    //
    // Avoid re-calling this function
    //

    $node->grievance_no_recurse = TRUE;
    $need_save = FALSE;

    //
    // Log the update
    //

    grievance_log_update($node, $op);

    //
    // Set the ID
    //

    if (!$node->field_grievance_id['und'][0]['value']) { 
      $id = grievance_id_generate($node);
      if ($id) {
        $node->field_grievance_id['und'][0]['value'] = $id;
        $need_save = TRUE;
      }
    }

    //
    // Set the alert TID and date
    //

    if ($node->field_grievance_contract_tplt['und'][0]['target_id']) {
      list($next_alert_tid, $next_alert_ts) = grievance_contract_next_alert($node);
      if ($node->field_grievance_alert_tid['und'][0]['tid'] != $next_alert_tid) {
        if ($next_alert_tid) {
          $node->field_grievance_alert_tid['und'][0]['tid'] = $next_alert_tid;
        } else {
          unset($node->field_grievance_alert_tid['und'][0]);
        }
        $need_save = TRUE;
      }

      if (isset($node->field_grievance_alert_date['und'][0]['value'])) { 
        $tmp = $node->field_grievance_alert_date['und'][0]['value'];
      } else {
        $tmp = NULL;
      }
      if (strtotime($tmp) != $next_alert_ts) {
        if ($next_alert_ts) {
          $node->field_grievance_alert_date['und'][0]['value'] = date('Y-m-d', $next_alert_ts);
        } else {
          $node->field_grievance_alert_date['und'][0]['value'] = NULL;
        }
        $need_save = TRUE;
      }
    }

    // 
    // Save the node
    //

    if ($need_save) {
      node_save($node);
    }
  }

  // After saving a contract template, create or update "dummy" section nodes
  if ( ($node->type == 'grievance_contract_template' || $node->type == 'grievance_contract_section' || $node->type == 'grievance_contract_clause') && 
    ($op == 'insert' || $op == 'update') &&
    !$node->grievance_no_recurse) {
    grievance_contract_update_dummies($node);
  }
}



function grievance_mail($key, &$message, $params) {
	global $user;
  switch($key) {
    case 'grievance':
    case 'alert':
    case 'mailattach':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      if (isset($params['attachments'])) {
				$message['params']['attachments'] = $params['attachments'];
			}
			$message['headers']['Reply-To'] = $user->mail;
      break;

    case 'notify':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      if (isset($params['attachments'])) {
        $message['params']['attachments'] = $params['attachments'];
      }
      $from = $message['params']['from'];
      if (!$from) {
        $from = $user->mail;
      }
      $message['headers']['Reply-To'] = $from;
      $message['headers']['From'] = $from;
      $message['headers']['Return-Path'] = $from;
      if ($params['headers']['Cc']) {
        $message['headers']['Cc'] = $params['headers']['Cc'];
      } 
      if ($params['headers']['Bcc']) {
        $message['headers']['Bcc'] = $params['headers']['Bcc'];
      } 

      break;
  }

  // @TODO Put this into a configuration variable!!!!
  $from_email = variable_get('grievance_from_email', '');
  if (!$from_email) {
    drupal_set_message(t('The from_email for this server has not been configured.  Mails will not be delivered correctly!'), 'error');
  }

  $message['from'] = 
    $message['params']['from'] = 
    $message['headers']['From'] = 
    $message['headers']['Sender'] = 
    $message['headers']['Return-Path'] = 
    $from_email;
}

function grievance_form_alter(&$form, &$form_state, $form_id) {
  // Set default values for entity fields with autocomplete widgets
  $defaultable_fields = array('grievance', 'grievance_shops', 'grievance_company');
  foreach ($defaultable_fields as $field) {
    if (isset($_GET[$field]) && isset($form['field_' . $field])) {
      $nid = $_GET[$field];
      $entity_node = node_load($nid);
      if ($entity_node) {
        $form['field_' . $field]["und"][0]['target_id']['#default_value'] = "$entity_node->title ($nid)";
      }
    }
  }

  $defaultable_fields = array('grievance_contract_tplt', 'grievance_contract_section', 'grievance_classaction');
  foreach ($defaultable_fields as $field) {
    if (isset($_GET[$field]) && isset($form['field_' . $field])) {
      $form['field_' . $field]["und"]['#default_value'][0] = $_GET[$field];
    }
  }


  if ($form_id == 'grievance_shop_contact_node_form') { 
    // External ID is a system-only field (for now)
    $form['field_grievance_external_id']['#access'] = FALSE;
  }

  if ($form_id == 'grievance_node_form') { 
    // Alert data is a system-only field
    $form['field_grievance_data_alert']['#access'] = FALSE;

    // External ID is a system-only field (for now)
    $form['field_grievance_external_id']['#access'] = FALSE;

    // Arbitration fields are restricted by admin
    if (!user_access('grievance arbitrationform')) {
      $fields = array(
        'field_grievance_arbitration_a',
        'field_grievance_arbitration_b',
        'field_grievance_arbitration_c',
        'field_grievance_arbitration_d',
        'field_grievance_alert_waived',
      );
      foreach ($fields as $field) {
        $form[$field]['#access'] = FALSE;
      }
    }

    // Certain fields are hidden altogether
    $hidefields = preg_split('/\s+/', variable_get('grievance_hidefields', ''));
    foreach ($hidefields as $hidefield) {
      if (preg_match('/^field_/', $hidefield) && $form[$hidefield]) {
        $form[$hidefield]['#access'] = FALSE;
      }
    }
  }

  if ($form_id == 'grievance_contract_template_node_form') { 
    // Holidays is a system-only field
    $form['field_grievance_holidays']['#access'] = FALSE;
  }

  if ($form_id == 'grievance_log_node_form') { 
    grievance_log_node_form_alter($form, $form_state, $form_id);
  }

  // Various fields in the grievance form are locked down for various users.
  if ($form_id == 'grievance_node_form') {

    if (!user_access('grievance form alert tid')) {
      $form['field_grievance_alert_tid']['#access'] = FALSE;
    }

    if (!user_access('grievance form alert date')) {
      $form['field_grievance_alert_date']['#access'] = FALSE;
    }

    if (!user_access('grievance form contract template')) {
      $form['field_grievance_contract_tplt']['#disabled'] = TRUE;
      $form['field_grievance_contract_tplt']['#type'] = 'hidden';
    }

    if (!user_access('grievance form status date')) {
      $form['field_grievance_status_date']['#disabled'] = TRUE;
      $form['field_grievance_status_date']['#type'] = 'hidden';
    }

    if (!user_access('grievance form alert tid')) {
      $form['field_grievance_alert_tid']['#disabled'] = TRUE;
      $form['field_grievance_alert_tid']['#type'] = 'hidden';
    }

    if (!user_access('grievance form alert date')) {
      $form['field_grievance_alert_date']['#disabled'] = TRUE;
      // $form['field_grievance_alert_date']['#type'] = 'hidden';
    }

    if (!user_access('grievance form grievance type')) {
      $form['field_grievance_type']['#access'] = FALSE;
    }
    if (!user_access('grievance form grievance type other')) {
      $form['field_grievance_type_other']['#access'] = FALSE;
    }
    if (!user_access('grievance form grievance remedy')) {
      $form['field_grievance_remedy']['#access'] = FALSE;
    }
    if (!user_access('grievance form grievance remedy other')) {
      $form['field_grievance_remedy_other']['#access'] = FALSE;
    }

    if (!user_access('grievance form rep filed')) {
      $form['field_grievance_rep_filed']['#access'] = FALSE;
    }
    if (!user_access('grievance form rep organizer')) {
      $form['field_grievance_rep_organizer']['#access'] = FALSE;
    }
    if (!user_access('grievance form rep lead')) {
      $form['field_grievance_rep_lead']['#access'] = FALSE;
    }
    if (!user_access('grievance form rep manager')) {
      $form['field_grievance_rep_manager']['#access'] = FALSE;
    }
    if (!user_access('grievance form rep watching')) {
      $form['field_grievance_rep_watching']['#access'] = FALSE;
    }
    if (!user_access('grievance form rep assignee')) {
      $form['field_grievance_rep_assignee']['#access'] = FALSE;
      $form['field_grievance_assignee_notes']['#access'] = FALSE;
    }
    if (!user_access('grievance form supervisor')) {
      $form['field_grievance_supervisor_name']['#access'] = FALSE;
      $form['field_grievance_supervisor_title']['#access'] = FALSE;
      $form['field_grievance_supervisor_unit']['#access'] = FALSE;
    }
    if (!user_access('grievance form id')) {
      $form['field_grievance_id']['#access'] = FALSE;
    }
    if (!user_access('grievance form company contacts')) {
      $form['field_grievance_contact_selector']['#access'] = FALSE;
      $form['field_grievance_co_name']['#access'] = FALSE;
      $form['field_grievance_co_role']['#access'] = FALSE;
      $form['field_grievance_co_email']['#access'] = FALSE;
      $form['field_grievance_co_phone']['#access'] = FALSE;
      $form['field_grievance_co_address']['#access'] = FALSE;
      $form['field_grievance_co_address_2']['#access'] = FALSE;
      $form['field_grievance_co_city']['#access'] = FALSE;
      $form['field_grievance_co_state']['#access'] = FALSE;
      $form['field_grievance_co_zip']['#access'] = FALSE;
    }
    if (!user_access('grievance form st contacts')) {
      $form['field_grievance_st_selector']['#access'] = FALSE;
      $form['field_grievance_st_name']['#access'] = FALSE;
      $form['field_grievance_st_email']['#access'] = FALSE;
      $form['field_grievance_st_phone']['#access'] = FALSE;
    }
  }

  // Set some default values for views
  if ($form_id == 'views_exposed_form' && isset($form_state['view']) && $form_state['view']->name == 'grievance_log') {
    grievance_log_views_exposed_form_alter($form, $form_state);
  }
  if ($form_id == 'views_exposed_form' && isset($form_state['view']) && $form_state['view']->name == 'grievance_attachments') {
    grievance_attachment_views_exposed_form_alter($form, $form_state);
  }

  // Clean up the taxonomy term form
  if ($form_id == 'taxonomy_form_term') {
    // dpm($form);
  }

  // On the "All Grievances" exposed filter, change status to checkboxes.
  if ($form_id == 'views_exposed_form' && isset($form_state['view']) && $form_state['view']->name == 'grievances') {
    foreach ($form['filters'] as $delta => &$set) {
      if (is_integer($delta) && is_array($set) && $set['field_grievance_status_tid']) {
        $set['field_grievance_status_tid']['#theme'] = 'select_as_checkboxes';
      }
    }
    require_once DRUPAL_ROOT . "/sites/all/modules/better_exposed_filters/better_exposed_filters.theme";
  }

  // Add some information to deletion confirmations
  if ($form_id == 'node_delete_confirm') {
    grievance_delete_form_alter_node_delete_confirm($form, $form_state);
  }
}

function grievance_classes_array($new_classes = null) {
  static $classes = array();
  if ($new_classes) {
    if (is_array($new_classes)) {
      foreach ($new_classses as $new_class) {
        $classes[] = $new_class;
      }
    } else {
      $classes[] = $new_classes;
    }
  }

  return $classes;
}

function grievance_preprocess_html(&$variables) {
  $classes= grievance_classes_array();
  foreach ($classes as $class) {
    $variables['classes_array'][] = $class;
  }
}


function grievance_views_query_alter(&$view, &$query) {
  grievance_views_query_alter_permission($view, $query); 
  if ($view->name == 'grievances_mine') {
    grievance_views_query_alter_grievances_mine($view, $query);
  }
}

function grievance_views_pre_build(&$view) {
  if ($view->name == 'grievance_contract_sections' || $view->name == 'grievance_contract_clauses') {
    grievance_contract_views_pre_build($view);
  }
}

/***
 * Implements hook_report_cache_info() 
 */

function grievance_report_cache_info() {
  $items = array();

  $items['grievance-report-average-time'] = array(
    'name' => t('Average Time between Statuses'),
    'description' => '',
    'fields' => grievance_report_average_time_fields(),
    'access' => 'grievance report',
    'path' => 'grievance/report/average-time',
    'pk_list_callback' => 'grievance_report_average_time_pks',
    'batch_callback' => 'grievance_report_average_time_batch',
    'render_callbacks' => array(
      'Detail By Specialist' => 'grievance_report_average_time_batch_render_specialist_detail',
      'Detail By Employer' => 'grievance_report_average_time_batch_render_employer_detail',
      'Summary By Specialist' => 'grievance_report_average_time_batch_render_specialist_summary',
      'Summary By Employer' => 'grievance_report_average_time_batch_render_employer_summary',
    ),
  );

  $items['grievance-report-spi-term'] = array(
    'name' => t('SPI / Term Report'),
    'description' => '',
    'access' => 'grievance report',
    'path' => 'grievance/report/spi-term',
    'fields' => grievance_report_spi_term_fields(),
    'pk_list_callback' => 'grievance_report_spi_term_pks',
    'batch_callback' => 'grievance_report_spi_term_batch',
  );

  $items['grievance-report-settlement-summary'] = array(
    'name' => t('Settlement Summary Report'),
    'description' => '',
    'access' => 'grievance report',
    'path' => 'grievance/report/settlement/summary',
    'fields' => grievance_report_settlement_summary_fields(),
    'pk_list_callback' => 'grievance_report_settlement_summary_pks',
    'batch_callback' => 'grievance_report_settlement_summary_batch',
    'render_callbacks' => array(
      'Summary By Specialist' => 'grievance_report_settlement_summary_render_specialist',
      'Summary By Employer' => 'grievance_report_settlement_summary_render_employer',
    ),
  );

  /*
  $items['grievance-report-status-summary'] = array(
    'name' => t('Status Summary Report'),
    'description' => '',
    'access' => 'grievance report',
    'path' => 'grievance/report/status-summary',
    'fields' => grievance_report_status_summary_fields(),
    'pk_list_callback' => 'grievance_report_status_summary_pks',
    'batch_callback' => 'grievance_report_status_summary_batch',
    'render_callbacks' => array(
      'Summary By Specialist' => 'grievance_report_status_summary_render_specialist',
      'Summary By Chapter' => 'grievance_report_status_summary_render_chapter',
    ),
  );
  */

  return $items;
}

/***
 * Implements hook_views_pre_render() 
 */

function grievance_views_pre_render(&$view) {
  // Highlight my assignments in the main grievances view
  if ($view->name == 'grievances' && $view->current_display == 'page_1' ||
    $view->name == 'grievances_mine') {
    global $user; 
    if (!$user || !$user->uid) { return; }
    foreach ($view->result as &$row) {
      if ($row->field_field_grievance_rep_assignee[0]['raw']['target_id'] == $user->uid) {
        $row->field_field_grievance_rep_assignee[0]['rendered']['#markup'] = '<strong>' . $row->field_field_grievance_rep_assignee[0]['rendered']['#markup'] . '</strong>';
      }
    }
  }

  // Render clauseref fields with their label in front.
  if ($view->name == 'grievance_open_report' && isset($view->result)) {
    foreach ($view->result as &$result) {
      if (isset($result->field_field_grievance_clauseref)) {
        foreach ($result->field_field_grievance_clauseref as &$item) {
          if (isset($item['rendered']) && isset($item['raw']) && isset($item['raw']['entity'])) {
            $item['rendered']['#markup'] = $item['raw']['entity']->field_grievance_label['und'][0]['value'] . ': ' . $item['rendered']['#markup'];
          }
        }
      }
    }
  }
}

function grievance_views_post_execute(&$view) {
  if ($view->name == 'grievances_mine' || 
      $view->name == 'grievances' || 
      $view->name == 'grievances_without_status' ||
      $view->name == 'grievances_without_member_id' ||
      $view->name == 'grievances_without_brought_by' ||
      $view->name == 'grievances_without_category') {
    grievance_views_post_execute_grievances_mine($view);
  }

  if ($view->name == 'grievance_shop_contacts' && $view->current_display == 'views_data_export_1') {
    grievance_views_post_execute_shop_contacts($view);
  }
}

function grievance_node_presave($node) {
  if ($node->type == 'grievance' || $node->type == 'grievance_shop_contact') {
    $fields = array(
      'field_grievance_phone', 
      'field_grievance_co_phone', 
      'field_grievance_co_fax',
      'field_grievance_co_phone_2',
      'field_grievance_phone_off',
    );
    foreach ($fields as $field) {
      if (isset($node->{$field}['und'][0]['value'])) {
        $node->{$field}['und'][0]['value'] = grievance_format_phone_number($node->{$field}['und'][0]['value']);
      }
    }
  }

  if ($node->type == 'grievance') {
    grievance_node_set_title($node);
  }
}

function grievance_user_presave(&$edit, $account, $category) {
  if (isset($edit['field_grievance_phone']['und'][0]['value'])) {
    $edit['field_grievance_phone']['und'][0]['value'] = grievance_format_phone_number($edit['field_grievance_phone']['und'][0]['value']);
  }
  if (isset($edit['field_grievance_phone_off']['und'][0]['value'])) {
    $edit['field_grievance_phone_off']['und'][0]['value'] = grievance_format_phone_number($edit['field_grievance_phone_off']['und'][0]['value']);
  }
}

function grievance_node_set_title(&$node) {
  $title = '';

  // Employer
  $shop_nid = $node->field_grievance_shop['und'][0]['target_id'];
  if ($shop_nid) { 
    $shop_node = node_load($shop_nid);
  }
  if ($shop_node) {
    $shop = $shop_node->title;
  } else {
    $shop = 'Unknown Employer';
  }

  // Name
  if ($node->field_grievance_classaction['und'][0]['value'] == 'Yes') {
    $name .= 'General Grievance';
  } else {
    $name = '';
    if ($node->field_grievance_first_name['und'][0]['value']) {
      $name = $node->field_grievance_first_name['und'][0]['value'];
    }
    if ($node->field_grievance_last_name['und'][0]['value']) {
      if ($name) { $name .= ' '; }
      $name .= $node->field_grievance_last_name['und'][0]['value'];
    }
    if (!$name) {
      $name = 'Unknown Name';
    }
  }

  $node->title = "$shop - $name";
}
