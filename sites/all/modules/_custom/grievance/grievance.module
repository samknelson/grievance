<?php

// I hate notice errors
ini_set('error_reporting', ini_get('error_reporting') & ~E_NOTICE);

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.menu.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.form.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.forward.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.log.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.attachment.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.settlement.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.permission.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.admin.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.gform.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.arbitrationform.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.report_bytype.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.report_average_time.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.block.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.notify.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.alert.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.field_overrides.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.contacts.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.quicksearch.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.id.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.contract.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.holidays.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance') . "/grievance.bundle.inc";

/**
 * Implement hook_cron() 
 */

function grievance_cron() {
  grievance_alert_all();
}

/*
function grievance_node_update($node) {
  if ($node->type == 'grievance') {
    grievance_status_update_date_set($node);
  }
}

function grievance_node_insert($node) {
  if ($node->type == 'grievance') {
    grievance_status_update_date_set($node);
 }
}

function grievance_status_update_date_set($node) {
  if ($node->field_grievance_status_date['und'][0]['value']) { return; }

  if ($node->field_grievance_status['und'][0]['tid'] == variable_get('grievance_log_incident_status', '') &&
    $node->field_grievance_date_1['und'][0]['value']) {
    $node->field_grievance_status_date = $node->field_grievance_date_1;
  } else {
    $node->field_grievance_status_date['und'][0]['value'] = date('Y-m-d');
  }
}
*/

function grievance_node_postsave($node, $op) {
  if ($node->type == 'grievance') {
    if ($op == 'insert' || $op == 'update') {
      grievance_id_set($node, $op);
      grievance_log_update($node, $op);
    }
  }
}


function grievance_mail($key, &$message, $params) {
	global $user;
  switch($key) {
    case 'grievance':
    case 'alert':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      if (isset($params['attachments'])) {
				$message['params']['attachments'] = $params['attachments'];
			}
			$message['headers']['Reply-To'] = $user->mail;
      break;

    case 'notify':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      if (isset($params['attachments'])) {
        $message['params']['attachments'] = $params['attachments'];
      }
      $from = $message['params']['from'];
      if (!$from) {
        $from = $user->mail;
      }
      $message['headers']['Reply-To'] = $from;
      $message['headers']['From'] = $from;
      $message['headers']['Return-Path'] = $from;
      if ($message['params']['Cc']) {
        $message['headers']['Cc'] = $message['params']['Cc'];
      } 
      if ($message['params']['Bcc']) {
        $message['headers']['Bcc'] = $message['params']['Bcc'];
      } 

      break;
  }
}

function grievance_form_alter(&$form, &$form_state, $form_id) {
  // Set default values for entity fields with autocomplete widgets
  $defaultable_fields = array('grievance', 'grievance_shops', 'grievance_company');
  foreach ($defaultable_fields as $field) {
    if (isset($_GET[$field]) && isset($form['field_' . $field])) {
      $nid = $_GET[$field];
      $entity_node = node_load($nid);
      if ($entity_node) {
        $form['field_' . $field]["und"][0]['target_id']['#default_value'] = "$entity_node->title ($nid)";
      }
    }
  }

  $defaultable_fields = array('grievance_contract_tplt', 'grievance_classaction');
  foreach ($defaultable_fields as $field) {
    if (isset($_GET[$field]) && isset($form['field_' . $field])) {
      $form['field_' . $field]["und"]['#default_value'][0] = $_GET[$field];
    }
  }

  if ($form_id == 'grievance_node_form') { 
    // Alert data is a system-only field
    $form['field_grievance_data_alert']['#access'] = FALSE;

    // ID is a system-only field
    $grievance_id_manual = variable_get('grievance_id_manual', '');
    if ($grievance_id_manual != 'Yes' || !user_access('grievance admin')) {
      $form['field_grievance_id']['#access'] = FALSE;
    }

    // Arbitration fields are restricted by admin
    if (!user_access('grievance arbitrationform')) {
      $fields = array(
        'field_grievance_arbitration_a',
        'field_grievance_arbitration_b',
        'field_grievance_arbitration_c',
        'field_grievance_arbitration_d',
        'field_grievance_alert_waived',
      );
      foreach ($fields as $field) {
        $form[$field]['#access'] = FALSE;
      }
    }

    // Certain fields are hidden altogether
    $hidefields = preg_split('/\s+/', variable_get('grievance_hidefields', ''));
    foreach ($hidefields as $hidefield) {
      if (preg_match('/^field_/', $hidefield) && $form[$hidefield]) {
        $form[$hidefield]['#access'] = FALSE;
      }
    }
  }

  if ($form_id == 'grievance_contract_template_node_form') { 
    // Holidays is a system-only field
    $form['field_grievance_holidays']['#access'] = FALSE;
  }

  if ($form_id == 'grievance_log_node_form') { 
    $form['field_grievance_status']['#access'] = FALSE;
    $form['field_grievance_alert']['#access'] = FALSE;
    $form['field_grievance_alert_tid']['#access'] = FALSE;
    $form['field_grievance_alert_date']['#access'] = FALSE;
  }
}

function grievance_classes_array($new_classes = null) {
  static $classes = array();
  if ($new_classes) {
    if (is_array($new_classes)) {
      foreach ($new_classses as $new_class) {
        $classes[] = $new_class;
      }
    } else {
      $classes[] = $new_classes;
    }
  }

  return $classes;
}

function grievance_preprocess_html(&$variables) {
  $classes= grievance_classes_array();
  foreach ($classes as $class) {
    $variables['classes_array'][] = $class;
  }
}


function grievance_views_query_alter(&$view, &$query) {
  grievance_views_query_alter_permission($view, $query); 
}

/*
function grievance_contract_template_nid_getset($incoming = 0) {
  static $nid;
  if ($incoming) {
    $nid = $incoming;
  }
  watchdog('wahtever', "Incoming $incoming, returning $nid");
  return $nid;
}
*/

function grievance_views_pre_build(&$view) {
  // When an admin is editing a grievance clause, they select the contract section from a view.  The view should be restricted
  // to just the contract template that they're working i.
  if ($view->name == 'grievance_contract_sections' && $view->current_display == 'entityreference_1') { 
    $template_nid = 0;
    $clause_node = menu_get_object();
    if ($clause_node) {
      $template_nid = $clause_node->field_grievance_contract_tplt['und'][0]['target_id'];
    }
    if (!$template_nid && isset($_REQUEST['grievance_contract_tplt'])) {
      $template_nid = $_REQUEST['grievance_contract_tplt'];
    }
    if ($template_nid) {
      $view->args[0] = $template_nid;
    }
  }

  // Similarly, when a user is selecting a contract clause, it should come from the contract template corresponding to the
  // shop that they're in.
  if ($view->name == 'grievance_contract_clauses' && $view->current_display == 'entityreference_1') { 
    // $view->args[0] = 3215;
  }
}

/***
 * Implements hook_report_cache_info() 
 */

function grievance_report_cache_info() {
  $items = array();

  $items['grievance-report-average-time'] = array(
    'name' => t('Average Time between Statuses'),
    'description' => '',
    'fields' => grievance_report_average_time_fields(),
    'access' => 'grievance report',
    'path' => 'grievance/report/average-time',
    'pk_list_callback' => 'grievance_report_average_time_pks',
    'batch_callback' => 'grievance_report_average_time_batch',
  );
  return $items;
}
