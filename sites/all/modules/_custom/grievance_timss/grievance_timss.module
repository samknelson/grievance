<?php

// I hate notice errors
ini_set('error_reporting', ini_get('error_reporting') & ~E_NOTICE);

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_timss') . "/grievance_timss.menu.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_timss') . "/grievance_timss.admin.inc";

/**
 * Implement hook_cron() 
 */

function grievance_timss_cron() {
  grievance_timss_resync();
}

function grievance_timss_resync() {
  watchdog('grievance_timss', 'TIMSS resync: Starting');

  $broughtby_vocabulary = taxonomy_vocabulary_machine_name_load('grievance_broughtby');
  if (!$broughtby_vocabulary) { return; }
  $broughtby_terms = taxonomy_get_tree($broughtby_vocabulary->vid);
 
  // Load all "open" TIDs
  $status_vocab = taxonomy_vocabulary_machine_name_load('grievance_status ');
  if (!$status_vocab) { return; }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term');
  $query->propertyCondition('vid', $status_vocab->vid);
  $query->fieldCondition('field_grievance_open', 'value', 1);
  $stmt = $query->execute();
  if (!$stmt['taxonomy_term']) { return; }
  $status_tids = array_keys($stmt['taxonomy_term']);

  $examined_count = 0;
  $updated_count = 0;

  foreach ($broughtby_terms as $broughtby_term) {
    watchdog('grievance_timss', 'TIMSS resync: Starting ' . $broughtby_term->name);

    // Find all open grievances where the data hasn't been changed manually.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'grievance');
    $query->fieldCondition('field_grievance_broughtby', 'tid',  $broughtby_term->tid);
    $query->fieldCondition('field_grievance_status', 'tid', $status_tids, 'in');
    // The following would be nice, but doesn't handle nulls.  So we check manually later.
    // $query->fieldCondition('field_grievance_corrected', 'value', 'Pending', '!=');
    $stmt = $query->execute();
    if (!$stmt['node']) { continue; }
    $grievance_nids = array_keys($stmt['node']);

    foreach ($grievance_nids as $grievance_nid) {
      ++$examined_count;
      watchdog('grievance_timss', "TIMSS resync: $grievance_nid: Scanning");

      // Load the grievance
      $grievance_node = node_load($grievance_nid);

      // Skip "Pending" (meaning that the data has been corrected manually)
      if ($grievance_node->field_grievance_corrected['und'][0]['value'] == 'Pending') {
        watchdog('grievance_timss', "TIMSS resync: $grievance_nid: Data marked as manually corrected. Skipping.");
        continue;
      }

      // Find the member ID
      $member_id = $grievance_node->field_grievance_min['und'][0]['value'];
      if (!$member_id) {
        watchdog('grievance_timss', "TIMSS resync: $grievance_nid: No member ID. Skipping.");
        continue;
      }

      // Load the candidate from TIMSS
      $candidate = grievance_timss_lookup($member_id, $broughtby_term->tid);
      if (!$candidate || !is_array($candidate)) {
        watchdog('grievance_timss', "TIMSS resync: $grievance_nid: TIMSS record not found. Skipping.");
        continue;
      }
      $candidate = $candidate[0];
      if (!$candidate) { 
        watchdog('grievance_timss', "TIMSS resync: $grievance_nid: TIMSS record not found. Skipping.");
        continue;
      }

      // Update the member
      $fields = array();
      $fields['field_grievance_first_name']     = 'first_Name';
      $fields['field_grievance_last_name']      = 'last_Name';
      $fields['field_grievance_city']           = 'city';
      $fields['field_grievance_state']          = 'state';
      $fields['field_grievance_address']        = 'street_Address';
      $fields['field_grievance_city']           = 'city';
      $fields['field_grievance_phone']          = 'phone_Number';
      $fields['field_grievance_email']          = 'email_Address';
      $fields['field_grievance_department']     = 'department';
      $fields['field_grievance_classification'] = 'classification';

      $columns = array();
      $columns['field_grievance_first_name']     = 'value';
      $columns['field_grievance_last_name']      = 'value';
      $columns['field_grievance_city']           = 'value';
      $columns['field_grievance_state']          = 'value';
      $columns['field_grievance_address']        = 'value';
      $columns['field_grievance_city']           = 'value';
      $columns['field_grievance_phone']          = 'value';
      $columns['field_grievance_email']          = 'email';
      $columns['field_grievance_department']     = 'value';
      $columns['field_grievance_classification'] = 'value';

      $subsections = array();
      $subsections['field_grievance_first_name']     = NULL;
      $subsections['field_grievance_last_name']      = NULL;
      $subsections['field_grievance_city']           = NULL;
      $subsections['field_grievance_state']          = NULL;
      $subsections['field_grievance_address']        = NULL;
      $subsections['field_grievance_city']           = NULL;
      $subsections['field_grievance_phone']          = NULL;
      $subsections['field_grievance_email']          = NULL;
      $subsections['field_grievance_department']     = NULL;
      $subsections['field_grievance_classification'] = NULL;

      $is_changed = FALSE;
      foreach ($fields as $drupal_field => $json_field) {
        $column = $columns[$drupal_field];
        $subsection = $subsections[$drupal_field];

        $old_value = $grievance_node->{$drupal_field}['und'][0][$column];

        $new_value = NULL;
        if ($subsection) {
          $new_value = $candidate->{$subsection}->{$json_field};
        } else {
          $new_value = $candidate->{$json_field};
        }
        $new_value = preg_replace("/(?:\r\n|\r|\n)/", ', ', $new_value);

        if (!$new_value) { continue; }
        if ($new_value == $old_value) { continue; }

        $grievance_node->{$drupal_field}['und'][0][$column] = $new_value;
        $is_changed = TRUE;
      }

      if (!$is_changed) {
        watchdog('grievance_timss', "TIMSS resync: $grievance_nid: No changes. Skipping.");
        continue;
      }

      watchdog('grievance_timss', "TIMSS resync: $grievance_nid: Data has changed in TIMSS. Updating the node.");
      node_save($grievance_node);
      ++$updated_count;
    }

    watchdog('grievance_timss', 'TIMSS resync: Finishing ' . $broughtby_term->name);
  }

  watchdog('grievance_timss', "TIMSS resync: Complete. Examined $examined_count nodes, updated $updated_count.");
}

function grievance_timss_login($broughtby_tid) {
  drupal_set_message("Connecting to TIMSS");
  $timss_url = variable_get('grievance_timss_broughtby_' . $broughtby_tid . '_url');
  $timss_user = variable_get('grievance_timss_broughtby_' . $broughtby_tid . '_user');
  $timss_pass = variable_get('grievance_timss_broughtby_' . $broughtby_tid . '_pass');

  if (!$timss_url || !$timss_user || !$timss_pass) {
    drupal_set_message(t('TIMSS access is not configured.'), 'error');
    return NULL;
  }

  $timss_url .= '/token';
  $headers = array('Content-Type' => 'application/x-www-form-urlencoded');
  $params = array (
    'grant_type' => 'password',
    'username' => $timss_user,
    'password' => $timss_pass,
  );
  $options = array(
    'headers' => $headers,
    'method' => 'POST',
    'data' => http_build_query($params),
    'context' => stream_context_create(array('ssl' => ['verify_peer' => FALSE, 'verify_peer_name' => FALSE])),
  );
  $response = drupal_http_request($timss_url, $options);

  // HTTP Request execute
  if ($response->code != 200) {
    drupal_set_message(
      t(
        'Unable to connect to server at @url: @error (@code)', 
        array(
          '@url' => $timss_url,
          '@error' => $response->error,
          '@code' => $response->code
        )
      ),
      'error'
    );
    return NULL;
  }
  
  // Decode the response
  $json_token = drupal_json_decode($response->data);
  $json_token['granted'] = time();
  $token = $json_result['access_token'];
  if (!$json_token['access_token']) {
    drupal_set_message(t('Connection to TIMSS succeeded, but no valid access_token was returned.'), 'error');
    return NULL;
  }

  $json_token_encoded = drupal_json_encode($json_token);
  variable_set('grievance_timss_broughtby_' . $broughtby_tid . '_token', $json_token_encoded);
  
  return $json_token;
}

function grievance_timss_get_token($broughtby_tid) {
  $json_token_encoded = variable_get('grievance_timss_broughtby_' . $broughtby_tid . '_token', '');
  $json_token = drupal_json_decode($json_token_encoded);
  if (!$json_token) {
    $json_token = grievance_timss_login($broughtby_tid);
  } else if ($json_token['granted'] + $json_token['expires_in'] <= time() - 100) {
    $json_token = grievance_timss_login($broughtby_tid);
  } 

  return $json_token;
}

function grievance_timss_search($str, $broughtby_tid) {
  $json_token = grievance_timss_get_token($broughtby_tid);
  $timss_url = variable_get('grievance_timss_broughtby_' . $broughtby_tid . '_url');
  $timss_user = variable_get('grievance_timss_broughtby_' . $broughtby_tid . '_user');
  $timss_pass = variable_get('grievance_timss_broughtby_' . $broughtby_tid . '_pass');

  if (!$timss_url || !$timss_user || !$timss_pass) {
    drupal_set_message(t('TIMSS access is not configured.'), 'error');
    return NULL;
  }

  $timss_url .= '/api/Employees';
  if (preg_match('/[0-9\-]/', $str)) {
    $str = preg_replace('/[^0-9]/', '', $str);
    if (strlen($str) == 9) {
      $str = substr($str, 0, 3) . '-' . substr($str, 3, 2) . '-' . substr($str, 5, 4);
    }
    $timss_url .= '?ssn=' . urlencode($str);
  } else {
    $timss_url .= '?lastname=' . urlencode($str);
  }

  $options = array(
    'headers' => array('Authorization' => 'Bearer ' . $json_token['access_token']),
    'method' => 'GET',
    'context' => stream_context_create(array('ssl' => ['verify_peer' => FALSE, 'verify_peer_name' => FALSE])),
  );
  $response = drupal_http_request($timss_url, $options);

  // HTTP Request execute
  if ($response->code != 200) {
    drupal_set_message(
      t(
        'Unable to connect to server at @url: @error (@code)', 
        array(
          '@url' => $timss_url,
          '@error' => $response->error,
          '@code' => $response->code
        )
      ),
      'error'
    );
    return NULL;
  }

  return json_decode($response->data);
}

function grievance_timss_lookup_ajax($timss_id) {
  $broughtby_tid = $_GET['broughtby_tid'];
  drupal_json_output(grievance_timss_lookup_raw($timss_id, $broughtby_tid));
  exit;
}

function grievance_timss_lookup($timss_id, $broughtby_tid) {
  return json_decode(grievance_timss_lookup_raw($timss_id, $broughtby_tid));
}

function grievance_timss_lookup_raw($timss_id, $broughtby_tid) {
  $json_token = grievance_timss_get_token($broughtby_tid);
  $timss_url = variable_get('grievance_timss_broughtby_' . $broughtby_tid . '_url');
  $timss_user = variable_get('grievance_timss_broughtby_' . $broughtby_tid . '_user');
  $timss_pass = variable_get('grievance_timss_broughtby_' . $broughtby_tid . '_pass');

  if (!$timss_url || !$timss_user || !$timss_pass) {
    drupal_set_message(t('TIMSS access is not configured.'), 'error');
    return NULL;
  }

  $timss_url .= '/api/TimssMembers';
  $timss_url .= '?TimssId=' . urlencode($timss_id);

  $options = array(
    'headers' => array('Authorization' => 'Bearer ' . $json_token['access_token']),
    'method' => 'GET',
    'context' => stream_context_create(array('ssl' => ['verify_peer' => FALSE, 'verify_peer_name' => FALSE])),
  );

  $response = drupal_http_request($timss_url, $options);

  // HTTP Request execute
  if ($response->code != 200) {
    drupal_set_message(
      t(
        'Unable to connect to server at @url: @error (@code)', 
        array(
          '@url' => $timss_url,
          '@error' => $response->error,
          '@code' => $response->code
        )
      ),
      'error'
    );
    return NULL;
  }

  return $response->data;
}


function grievance_timss_form_grievance_node_callback_replace($form, $form_state) {
  $commands = array();
  // $commands[] = ajax_command_replace("#grievance-timss-search-result", render($form['grievance_timss_search_result']));
  $commands[] = ajax_command_replace("#grievance-timss-search-result", $form['grievance_timss_search_result']['#markup']);

  return array(
    '#type' => 'ajax',
    '#commands' => $commands
  );
}

function grievance_timss_form_grievance_node_callback_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

function grievance_timss_form_grievance_node_form_alter(&$form, &$form_state, $form_id) {
  // Add TIMSS Search elements to the form
  $classaction = grievance_form_current_value('field_grievance_classaction', 'value', $form, $form_state);
  if ($classaction == 'Yes') { return; }

  $broughtby_tid = grievance_form_current_value('field_grievance_broughtby', 'tid', $form, $form_state);

  $form['grievance_timss_search'] = array(
    '#type' => 'textfield',
    '#title' => t('TIMSS Search'),
    '#description' => t('Enter the last name or SSN of the employee.'),
  );
  $form['#groups']['group_grievance_employee']->children[] = 'grievance_timss_search';
  $form['#group_children']['grievance_timss_search'] = 'group_grievance_employee';

  $form['grievance_timss_search_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search TIMSS'),
    '#submit' => array('grievance_timss_form_grievance_node_callback_submit'),
    '#ajax' => array(
      'callback' => 'grievance_timss_form_grievance_node_callback_replace',
      'method' => 'replace',
    ),
  );
  $form['#groups']['group_grievance_employee']->children[] = 'grievance_timss_search_submit';
  $form['#group_children']['grievance_timss_search_submit'] = 'group_grievance_employee';

  $candidates = array();
  if ($form_state['values']['grievance_timss_search']) {
    $candidates = grievance_timss_search($form_state['values']['grievance_timss_search'], $broughtby_tid);

    /*
    foreach ($json_ids as $json_id) {
      $timss_id = $json_id->timsS_Member_ID;
      $candidate = grievance_timss_fetch($timss_id);
      $candidates[] = $candidate;
    }
    */

    $result_body = '';
    if (!$candidates) {
      $result_body = t('No members match your search criteria: ') . '<strong>' . $form_state['values']['grievance_timss_search'] . '</strong>';
    } else {
      $header = array(
        t('TIMSS ID'),
        t('Name'),
        t('Employer'),
      );
      $attributes = array();
      $rows = array();
      foreach ($candidates as $candidate) {
        $row = array();
        $row[] = '<a href="#" class="grievance-timss-id-for-insert">' . $candidate->timsS_Member_ID . '</a>';
        $row[] = $candidate->name;
        $row[] = $candidate->employer_Name;
        $rows[] = $row;
      }
      $result_body = theme_table(array('header' => $header, 'rows' => $rows, 'attributes' => $attributes));
    }

    $result_body .= '<span style="display: none;"><a href="#" id="grievance-timss-broughtby-tid-for-insert">' . $broughtby_tid . '</a></span>';
  }

  $form['grievance_timss_search_result'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="grievance-timss-search-result">' . $result_body . '</div>',
  );
  $form['#groups']['group_grievance_employee']->children[] = 'grievance_timss_search_result';
  $form['#group_children']['grievance_timss_search_result'] = 'group_grievance_employee';

}
