<?php

/**
 * Implements hook_grievance_workersync_plugin_info
 */

function grievance_timss_grievance_workersync_plugin_info() {
  $info = array();
  $info['timss'] = array(
    'title' => 'TIMSS',
    'description' => 'Fetch workers from a TIMSS data source',
    'settings_callback' => 'grievance_timss_callback_settings',
    'search_callback' => 'grievance_timss_callback_search',
    'search_description' => 'Enter the last name or SSN of the employee',
    'lookup_callback' => 'grievance_timss_callback_lookup',
  );

  return $info;
}

/**
 * Plugin callback: settings
 */

function grievance_timss_callback_settings(&$form, &$form_state) {
  $variable_name = sirius_domain_variable_name('grievance_workersync_timss_url');
  $form['plugin_settings'][$variable_name] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get($variable_name, ''),
    '#title' => t('TIMSS URL'),
  );

   $variable_name = sirius_domain_variable_name('grievance_workersync_timss_user');
   $form['plugin_settings'][$variable_name] = array(
    '#type' => 'textfield',
    '#title' => t('TIMSS User'),
    '#default_value' => variable_get($variable_name, ''),
  );

   $variable_name = sirius_domain_variable_name('grievance_workersync_timss_pass');
   $form['plugin_settings'][$variable_name] = array(
    '#type' => 'textfield',
    '#title' => t('TIMSS Pass'),
    '#default_value' => variable_get($variable_name, ''),
  );
}

function grievance_timss_callback_search($str, $verbose = FALSE) {
  $json_token = _grievance_timss_get_token($verbose);
  if (!$json_token) { return; }
  $timss_url = sirius_domain_variable_get('grievance_workersync_timss_url');
  $timss_user = sirius_domain_variable_get('grievance_workersync_timss_user');
  $timss_pass = sirius_domain_variable_get('grievance_workersync_timss_pass');

  if (!$timss_url || !$timss_user || !$timss_pass) {
    drupal_set_message(t('TIMSS access is not configured.'), 'error');
    return NULL;
  }

  $timss_url .= '/api/Employees';

  if (preg_match('/^[a-zA-Z]+\d+$/', $str)) {
    $str = strtoupper($str);
    $timss_url .= '?timssId=' . urlencode($str);
  } else if (preg_match('/[0-9\-]/', $str)) {
    $str = preg_replace('/[^0-9]/', '', $str);
    if (strlen($str) == 9) {
      $str = substr($str, 0, 3) . '-' . substr($str, 3, 2) . '-' . substr($str, 5, 4);
    }
    $timss_url .= '?ssn=' . urlencode($str);
  } else {
    $timss_url .= '?lastname=' . urlencode($str);
  }
  if ($verbose) { sirius_minilog("Searching at $timss_url"); }

  $options = array(
    'headers' => array('Authorization' => 'Bearer ' . $json_token['access_token']),
    'method' => 'GET',
    'context' => stream_context_create(array('ssl' => ['verify_peer' => FALSE, 'verify_peer_name' => FALSE])),
  );
  $response = drupal_http_request($timss_url, $options);
  if ($verbose) { sirius_minilog("Raw response data follows."); }
  if ($verbose) { sirius_minilog('<pre>' . print_r($response, 1) . '</pre>'); }

  // HTTP Request execute
  if ($response->code != 200) {
    drupal_set_message(
      t(
        'Unable to connect to server at @url: @error (@code)', 
        array(
          '@url' => $timss_url,
          '@error' => $response->error,
          '@code' => $response->code
        )
      ),
      'error'
    );
    return NULL;
  }
  if (!$response->data) { 
    if ($verbose) { sirius_minilog("Response had no data"); }
    return array();
  }
  $candidates = json_decode($response->data, TRUE);
  if ($candidates) {
    foreach ($candidates as $candidate) {
      $id = $candidate['timsS_Member_ID'];
      $matches[$id]['id'] = $id;
      list ($first, $last, $rest) = explode(';', $candidate['name']);
      $matches[$id]['title'] = trim("$first $rest $last");
      $matches[$id]['sort'] = "$last $first";

      if ($matches[$id]['employer']) { $matches[$id]['employer'] .= ', '; }
      $matches[$id]['employer'] .= $candidate['employer_Name'];
    }
  }
  return array_values($matches);
}

function grievance_timss_callback_lookup($timss_id, $verbose = FALSE) {
  $json_token = _grievance_timss_get_token($verbose);
  if (!$json_token) { return; }
  $timss_url = sirius_domain_variable_get('grievance_workersync_timss_url');
  $timss_user = sirius_domain_variable_get('grievance_workersync_timss_user');
  $timss_pass = sirius_domain_variable_get('grievance_workersync_timss_pass');

  if (!$timss_url || !$timss_user || !$timss_pass) {
    drupal_set_message(t('TIMSS access is not configured.'), 'error');
    return NULL;
  }

  $timss_url .= '/api/TimssMembers';
  $timss_url .= '?TimssId=' . urlencode($timss_id);
  if ($verbose) { sirius_minilog("Connecting to: $timss_url"); }

  $options = array(
    'headers' => array('Authorization' => 'Bearer ' . $json_token['access_token']),
    'method' => 'GET',
    'context' => stream_context_create(array('ssl' => ['verify_peer' => FALSE, 'verify_peer_name' => FALSE])),
  );

  $response = drupal_http_request($timss_url, $options);
  if ($verbose) { sirius_minilog("Raw response data follows."); }
  if ($verbose) { sirius_minilog('<pre>' . print_r($response, 1) . '</pre>'); }

  // HTTP Request execute
  if ($response->code != 200) {
    drupal_set_message(
      t(
        'Unable to connect to server at @url: @error (@code)', 
        array(
          '@url' => $timss_url,
          '@error' => $response->error,
          '@code' => $response->code
        )
      ),
      'error'
    );
    return NULL;
  }
  if (!$response->data) { return NULL; }
  $json = json_decode($response->data, TRUE);
  $json = $json[0];
  if (!$json) { return NULL; }
  $result = array();
  $result['first_name']   = $json['first_Name'];
  $result['last_name']    = $json['last_Name'];
  $result['city']         = $json['city'];
  $result['state']        = $json['state'];
  $result['zip']          = $json['zip'];
  $result['street']       = $json['street_Address'];
  // $result['street2']      = $json['street_Address'];
  $result['gender']       = $json['gender'];
  $result['department']   = $json['department'];
  $result['phone']        = $json['phone_Number'];
  $result['email']        = $json['email_Address'];;
  $result['id']           = $json['timsS_Member_ID'];
  return $result;
}


// @todo Currently each function does its own REST query.  Would probably be AGoodThing(tm) to 
//       abstract the network layer.
function _grievance_timss_login($verbose = FALSE) {
  $timss_url = sirius_domain_variable_get('grievance_workersync_timss_url');
  $timss_user = sirius_domain_variable_get('grievance_workersync_timss_user');
  $timss_pass = sirius_domain_variable_get('grievance_workersync_timss_pass');

  if (!$timss_url || !$timss_user || !$timss_pass) {
    drupal_set_message('TIMSS access is not configured.', 'error');
    return NULL;
  }

  $timss_url .= '/token';
  if ($verbose) { sirius_minilog("About to sign in to $timss_url, user $timss_user."); }
  $headers = array('Content-Type' => 'application/x-www-form-urlencoded');
  $params = array (
    'grant_type' => 'password',
    'username' => $timss_user,
    'password' => $timss_pass,
  );
  $options = array(
    'headers' => $headers,
    'method' => 'POST',
    'data' => http_build_query($params),
    'context' => stream_context_create(array('ssl' => ['verify_peer' => FALSE, 'verify_peer_name' => FALSE])),
  );
  $response = drupal_http_request($timss_url, $options);
  if ($verbose) { sirius_minilog("Raw response data follows."); }
  if ($verbose) { sirius_minilog('<pre>' . print_r($response, 1) . '</pre>'); }

  // HTTP Request execute
  if ($response->code != 200) {
    drupal_set_message(
      t(
        'Unable to connect to server at @url: @error (@code)', 
        array(
          '@url' => $timss_url,
          '@error' => $response->error,
          '@code' => $response->code
        )
      ),
      'error'
    );
    return NULL;
  }
  
  // Decode the response
  $json_token = drupal_json_decode($response->data);
  $json_token['granted'] = time();
  $token = $json_result['access_token'];
  if (!$json_token['access_token']) {
    drupal_set_message(t('Connection to TIMSS succeeded, but no valid access_token was returned.'), 'error');
    return NULL;
  }

  $json_token_encoded = drupal_json_encode($json_token);
  sirius_domain_variable_set('grievance_timss_token', $json_token_encoded);
  
  return $json_token;
}

function _grievance_timss_get_token($verbose = FALSE) {
  $json_token_encoded = sirius_domain_variable_get('grievance_timss_token', $json_token_encoded);
  $json_token = drupal_json_decode($json_token_encoded);
  if (!$json_token) {
    if ($verbose) { sirius_minilog("No token found, logging in."); }
    $json_token = _grievance_timss_login($verbose);
  } else if ($json_token['granted'] + $json_token['expires_in'] <= time() - 100) {
    if ($verbose) { sirius_minilog("Our token has expired, logging in."); }
    $json_token = _grievance_timss_login($verbose);
  } 

  if ($verbose) { sirius_minilog("Our prior token is still good, no need to log in again."); }
  return $json_token;
}



























function grievance_timss_lookup_raw($timss_id, $broughtby_tid) {
  if (!$broughtby_tid) { $broughtby_tid = 'DEFAULT'; }
  $json_token = grievance_timss_get_token($broughtby_tid);
  $timss_url = variable_get('grievance_timss_broughtby_' . $broughtby_tid . '_url');
  $timss_user = variable_get('grievance_timss_broughtby_' . $broughtby_tid . '_user');
  $timss_pass = variable_get('grievance_timss_broughtby_' . $broughtby_tid . '_pass');

  if (!$timss_url || !$timss_user || !$timss_pass) {
    drupal_set_message(t('TIMSS access is not configured.'), 'error');
    return NULL;
  }

  $timss_url .= '/api/TimssMembers';
  $timss_url .= '?TimssId=' . urlencode($timss_id);

  $options = array(
    'headers' => array('Authorization' => 'Bearer ' . $json_token['access_token']),
    'method' => 'GET',
    'context' => stream_context_create(array('ssl' => ['verify_peer' => FALSE, 'verify_peer_name' => FALSE])),
  );

  $response = drupal_http_request($timss_url, $options);

  // HTTP Request execute
  if ($response->code != 200) {
    drupal_set_message(
      t(
        'Unable to connect to server at @url: @error (@code)', 
        array(
          '@url' => $timss_url,
          '@error' => $response->error,
          '@code' => $response->code
        )
      ),
      'error'
    );
    return NULL;
  }

  return $response->data;
}


