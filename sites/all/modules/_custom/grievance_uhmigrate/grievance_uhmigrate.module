<?php

// I hate notice errors
ini_set('error_reporting', ini_get('error_reporting') & ~E_NOTICE);

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_uhmigrate') . "/grievance_uhmigrate.l226.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_uhmigrate') . "/grievance_uhmigrate.l226_settlement_update.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_uhmigrate') . "/grievance_uhmigrate.l226_additional_violations.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_uhmigrate') . "/grievance_uhmigrate.l226_calllog.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_uhmigrate') . "/grievance_uhmigrate.l226_broughtby.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_uhmigrate') . "/grievance_uhmigrate.l226_clausemap.inc";

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_uhmigrate') . "/grievance_uhmigrate.l1.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_uhmigrate') . "/grievance_uhmigrate.l1_calllog.inc";

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_uhmigrate') . "/grievance_uhmigrate.l23.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_uhmigrate') . "/grievance_uhmigrate.l23_stewards.inc";


function grievance_uhmigrate_base_dir() {
  $dir = DRUPAL_ROOT;
  $dir = preg_replace('/\/httpdocs/', '/private/migrate', $dir);
  return $dir;
}

$grievance_uhmigrate_base = '/var/www/vhosts/grievances.clevernamehere.com/private/migrate';

function grievance_uhmigrate_log_summary() {
  global $grievance_uhmigrate_log_data;

  if ($grievance_uhmigrate_log_data) {
    ksort($grievance_uhmigrate_log_data);
  }

  print "\n\nSUMMARY\n";

  foreach ($grievance_uhmigrate_log_data as $type => &$messages) {
    if ($type == 'SUCCESS') { continue; }
    print "*** $type ***\n";
    
    ksort($messages);
    foreach ($messages as $msg => $entry) {
      print "$msg (Count $entry[count], first row $entry[first_row])\n";
    }
  }

  global $violations_not_found;
  print "\n\nVIOLATIONS\n";
  print "Shop\tClause\tExample Row\t\n";
  foreach ($violations_not_found as $key => $value) {
    print "$key\t$value\n";
  }
}

function grievance_uhmigrate_log($type, $row, $msg) {
  global $grievance_uhmigrate_log_data;

  if (!$grievance_uhmigrate_log_data[$type][$msg]) {
    $grievance_uhmigrate_log_data[$type][$msg] = array(
      'count' => 0,
      'first_row' => $row['Row'],
    );
  }
  $grievance_uhmigrate_log_data[$type][$msg]['count']++;

  print "Row #" . $row['Row'] . ' / ' . $row['Griev#'] . ': ' . $type . ': ' . $msg . "\n";
}

function grievance_uhmigrate_find_by_title($content_type, $title) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', $content_type);
  $query->propertyCondition('title', $title);
  $query->propertyOrderBy('nid');
  $stmt = $query->execute();

  // Found one, return the first.
  if ($stmt['node']) {
    $tmp = array_keys($stmt['node']);
    $nid = $tmp[0];
    return node_load($nid);
  }

  // Didn't find one, return an empty node
  global $user;
  $node = new stdClass();
  $node->type = $content_type;
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
  $node->uid = $user->uid; 
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 0;
  $node->title = $title;
  return $node;
}

function grievance_uhmigrate_find_by_external_id($content_type, $external_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', $content_type);
  $query->fieldCondition('field_grievance_external_id', 'value', $external_id);
  $query->propertyOrderBy('nid');
  $stmt = $query->execute();

  // Found one, return the first.
  if ($stmt['node']) {
    $tmp = array_keys($stmt['node']);
    $nid = $tmp[0];
    return node_load($nid);
  }

  // Didn't find one, return an empty node
  global $user;
  $node = new stdClass();
  $node->type = $content_type;
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
  $node->uid = $user->uid; 
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 0;
  $node->field_grievance_external_id['und'][0]['value'] = $external_id;
  return $node;
}

function grievance_uhmigrate_node_save(&$node) {
  // return NULL;
  return node_save($node); 
}

/**
 * Implements hook_requirements
 */

function grievance_uhmigrate_requirements($phase) {
  if ($phase == 'runtime') {
    return array(
      'grievance_uhmigrate_rm' => array(
        'title' => 'Grievance UH Migrate',
        'value' => 'Should be disabled on production systems',
        'description' => 'This module should be uninstalled after the appropriate migration script has been run.',
        'severity' => REQUIREMENT_INFO,
      ),
    );
  }
}