<?php

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'report_cache') . "/report_cache.menu.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'report_cache') . "/report_cache.form.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'report_cache') . "/report_cache.auto.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'report_cache') . "/report_cache.purge.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'report_cache') . "/report_cache.settings.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'report_cache') . "/report_cache.instances.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'report_cache') . "/report_cache.page_landing.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'report_cache') . "/report_cache.page_report.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'report_cache') . "/report_cache.page_report_generate.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'report_cache') . "/report_cache.page_report_instances.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'report_cache') . "/report_cache.page_report_auto.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'report_cache') . "/report_cache.page_report_preview.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'report_cache') . "/report_cache.page_report_render.inc";

function report_cache_info_all() {
	$info_all = &drupal_static(__FUNCTION__, NULL);
	if (!isset($info_all)) {
		// We want to do this:
		// $info_all = module_invoke_all('report_cache_info');
		// But we want to add information about the module that defines it. So we call each function manually.

		$info_all = array();
		$hook = 'report_cache_info';
		foreach (module_implements($hook) as $module) {
			$function = $module . '_' . $hook;
    	if (function_exists($function)) {
    		$module_info = system_get_info('module', $module);
      	$result = call_user_func_array($function, array());
      	if (isset($result) && is_array($result)) {
        	$info_all = array_merge_recursive($info_all, $result);
      		// Add the module to the results, so we know which module provides which report.
      		foreach ($result as $key => $info) {
      			$info_all[$key]['module'] = $module;
      			$info_all[$key]['module_name'] = $module_info['name'];
      		}
      	} elseif (isset($result)) {
        	$info_all[] = $result;
      	}
    	}
  	}
	}

	foreach ($info_all as $key => $record) {
		// Clean up some of our names. 
		$info_all[$key]['name'] = preg_replace('/^\s*Grievances\:\s*/', '', $info_all[$key]['name']);
		$info_all[$key]['module_name'] = preg_replace('/^\s*Sirius\s*/', '', $info_all[$key]['module_name']);

		// Set default form callback
		if (!$info_all[$key]['form_callback']) { $info_all[$key]['form_callback'] = 'report_cache_generate_form'; }
	}

	uksort($info_all, function($a, $b) use ($info_all) {
		$result = strcasecmp($info_all[$a]['module_name'], $info_all[$b]['module_name']);
		if (!$result) { $result = strcasecmp($info_all[$a]['name'], $info_all[$b]['name']); }
		return $result;
	});

	return $info_all;
}

function report_cache_info($report_type) {
	$info_all = report_cache_info_all();
	return $info_all[$report_type];
}

function report_cache_access($report_type) {
	if (!$report_type) { return user_access('access site reports'); }
	$info = report_cache_info($report_type);

	if (!$info) {
		drupal_set_message("The report type $report_type is not defined.", 'error');
		return FALSE;
	}
	
	$access = $info['access'];
	if (!$access) { $access = 'grievance report'; }

	return user_access($access);
}

function report_cache_parameters($report_type, $report_id, $parameters = array()) {
 	$cache = &drupal_static(__FUNCTION__);

 	// Set?
 	if ($parameters) {
		$domain_nid = sirius_domain_nid(); if (!$domain_nid) { $domain_nid = 0; }

 		$cache[$report_type][$report_id] = $parameters;

	  $stmt = db_delete('report_cache');
		$stmt->condition('report_id', $report_id);
		$stmt->condition('report_row_pk', 'PARAMETERS');
		$stmt->condition('report_type', $report_type . ' :: PARAMETERS');
		$stmt->condition('report_domain_nid', $domain_nid);
		$stmt->execute();

		$instance_uuid = $parameters['meta']['instance']['uuid'];

	  $stmt = db_insert('report_cache');
		$stmt->fields(
			array(
				'report_id' => $report_id,
				'report_row_pk' => 'PARAMETERS',
				'report_type' => $report_type . ' :: PARAMETERS',
				'report_data' => serialize($parameters),
				'report_domain_nid' => $domain_nid,
				'report_instance' => $instance_uuid,
			)
		);
		$stmt->execute();

 	}

 	if ($cache[$report_type][$report_id]) { return $cache[$report_type][$report_id]; }

  $query = db_select('report_cache');
  $query->fields('report_cache');
  $query->condition('report_id', $report_id);
  $query->condition('report_type', $report_type . ' :: PARAMETERS');
  $stmt = $query->execute();
  $hr = $stmt->fetchAssoc();
	$parameters = unserialize($hr['report_data']);

	// Quick sloppy caching. 
	// - Since we're doing a database query, we want to store the results in memory
	// - But we might be called thousands of times for different report IDs.
	// - So we only keep the first 100 results in memory.
	if (!$cache[$report_type] || (count($cache[$report_type]) < 100)) { $cache[$report_type][$report_id] = $parameters; }

	return $parameters;
}

function report_cache_most_recent($report_type, $instance_uuid = NULL) {
	$domain_nid = sirius_domain_nid(); 
	if (!$domain_nid) { $domain_nid = 0; }

	$sql_args = array();
	$sql = "select distinct report_id ";
	$sql .= "from report_cache ";

	$sql .= "where report_type = :report_type ";
	$sql_args[':report_type'] = $report_type;

	$sql .= "and report_domain_nid = :domain_nid ";
	$sql_args[':domain_nid'] = $domain_nid;

	if ($instance_uuid) {
		$sql .= "and report_instance = :instance_uuid ";
		$sql_args[':instance_uuid'] = $instance_uuid;
	}

	$sql .= "order by report_id desc limit 1 ";
	$stmt = db_query($sql, $sql_args);
	$hr = $stmt->fetchAssoc();
	return $hr['report_id'];
}

class Report_Cache_Report_Generator {
  // Reports are singletons. Use My_Report::getInstance()->whatever()
  protected static $instance = array();
  protected function __construct() { }
  final private function __clone() { }

  final public static function getInstance() {
  	$class = get_called_class();
    if (!isset(static::$instance[$class])) { static::$instance[$class] = new static(); }
    return static::$instance[$class];
  }

  public function info($result = array()) {
    $result['generator'] = $this;
    $result['fields'] = $this->fields();
    return $result;
  }

  public function fields() {
    return array();
  }

  public function pks(&$form_state) {
    return array();
  }

  public function batch($pks, $values, &$context) {
    return array();
  }

  public function render_parameters($parameters) {
    return '';
  }

  public function setInfo(&$items) {
    $items[$this->type] = $this->info();
  }
}
