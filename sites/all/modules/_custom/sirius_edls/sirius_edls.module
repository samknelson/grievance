<?php

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.menu.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.permission.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.access.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.sheet.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.sheet_form.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.sheet_search.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.sheet_render.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.crew.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.supervisor.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.worker.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.assignment.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.tasks.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.outsource.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.ajax.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.summary.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sirius_edls') . '/sirius_edls.dblog.inc';

/**
 * Implements hook_sirius_domain_component_info
 */

function sirius_edls_sirius_domain_component_info() {
  return array(
    'edls' => array(
      'title' => 'Employer Daily Labor Schedule (EDLS)',
      'description' => '',
    ),
  );
}

/**
 * Implements hook_node_update
 */

function sirius_edls_node_update($node) { return sirius_edls_denormalize_queue($node); }

/**
 * Implements hook_node_insert
 */

function sirius_edls_node_insert($node) { return sirius_edls_denormalize_queue($node); }

/**
 * Implements hook_node_delete
 */

function sirius_edls_node_delete($node) { return sirius_edls_denormalize_queue($node); }

function sirius_edls_denormalize_queue($node) {
  return;
}
/***
 * Implements hook_report_cache_info() 
 */

function sirius_edls_report_cache_info() {
  $items = array();

  // sirius_require('sirius_trust', 'sirius_trust.report_eligibility_compare.inc');
  // Sirius_Trust_Report_Newhire::getInstance()->setInfo($items);

  return $items;
}

/**
 * Implements hook_sirius_config_links_alter()
 */

function sirius_edls_sirius_config_links_alter(&$links) {
  if (!isset($links['edls']['title'])) {
    $links['edls']['title'] = 'EDLS';
  }
  $links['edls']['links']['sirius/edls/config'] = array('title' => 'General Configuration', 'description' => 'Configure general settings for the Employer Daily Labor Scheduler (EDLS) module');
}

/**
 * Implements hook_sirius_cron_scan_info()
 */

function sirius_edls_sirius_cron_scan_info() {
  /*
  $items['trust_benefit'] = array(
    'title' => 'Trust Worker Benefit Scan',
    'description' => 'Check eligibility for all worker benefits',
    'schedule' => 'daily',
    'callback' => 'sirius_trust_worker_benefit_scan',
    'multidomain' => TRUE,
    'component' => 'trust',
  );
  */

  return $items;
}

/**
 * Implements hook_sirius_backlinks_from_node_alter
 */

function sirius_edls_sirius_backlinks_from_node_alter(&$links, $node) {
  if ($node->type == 'sirius_edls_sheet') {
    $links['sirius/edls'] = array('name' => 'EDLS Home');
  }
}


/** 
 * Implements hook_sirius_access_info
 */

function sirius_edls_sirius_access_info() {
  $infos = array();
  Sirius_Edls_Access::getInstance()->setInfo($infos);
  return $infos;
}

function sirius_edls_employer_switch() {
  $access = sirius_access_instance('edls');
  if (!$access->access('staff')) {
    return array('markup' => '', 'employer_node' => sirius_employer_get());
  }

  drupal_add_css(drupal_get_path('module', 'sirius') . '/css/ux.css');
  drupal_add_css(drupal_get_path('module', 'sirius_edls') . '/css/employer.css');

  $incoming_employer_nid = $_GET['employer_nid'];

  $html = '<div class="sirius_edls_employer_switch">';
  $html .= '<form method="get">';
  $html .= t('Employer:');
  $html .= '<select name="employer_nid">';
  $html .= '<option value="">' . t('-- Select --') . '</option>';
  $employers = sirius_employer_list();
  foreach ($employers as $employer_nid => $employer_name) {
    if ($employer_nid == $incoming_employer_nid) { $selected = ' selected'; } else { $selected = ''; }
    $html .= "<option value=\"$employer_nid\" $selected>$employer_name</option>";
  }
  $html .= '</select>';
  $html .= '<input type="submit" value="' . t('Go') . '">';
  $html .= '</form>';
  $html .= '</div>';
  $html .= '<br clear="right">';

  if ($incoming_employer_nid && $employers[$incoming_employer_nid]) { $employer_node = node_load($incoming_employer_nid); }
  return array('markup' => $html, 'employer_node' => $employer_node);
}

/**
 * Implements hook_node_presave()
 */

function sirius_edls_node_presave($sheet_node) {
  if ($sheet_node->type != 'sirius_edls_sheet') { return; }

  $assignments = sirius_edls_assignment_fetch_sheet(
    $sheet_node->field_sirius_date_start['und'][0]['value'], 
    $sheet_node->nid
  );
  $sheet_json = sirius_json_get($sheet_node);
  $sheet_json['edls']['assignments'] = $assignments;
  sirius_json_set($sheet_node, $sheet_json);
}

/**
 * Implements hook_module_implements_alter()
 * 
 * Make our node_presave run *before* the one in sirius_version, so that data we capture here
 * can be versioned.
 */

function sirius_edls_module_implements_alter(&$implementations, $hook) {
  if ($hook != 'node_presave') { return; }
  $module = 'sirius_edls';
  $group = array($module => $implementations[$module]);
  unset($implementations[$module]);
  $implementations = $group + $implementations;
}