<?php

// I hate notice errors
ini_set('error_reporting', ini_get('error_reporting') & ~E_NOTICE);

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_worker') . "/grievance_worker.menu.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_worker') . "/grievance_worker.admin.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_worker') . "/grievance_worker.permission.inc";

function grievance_worker_search($str, $return_raw = FALSE) {
  // Execute as SQL for speed
  $tables = array(
    'field_data_field_sirius_ssn',
    'field_data_field_sirius_id',
    'field_data_field_sirius_id2',
    'field_data_field_grievance_shop',
  );

  // Writing this in SQL for speed
  $args = array();

  // Fields
  $sql = "select node.nid, ";
  $sql .= "node.title,  ";
  $sql .= "field_sirius_ssn_value, ";
  $sql .= "field_sirius_id_value, ";
  $sql .= "field_sirius_id2_value, ";
  $sql .= "node_employer.title as employer ";
  $sql .= "from node ";
  foreach ($tables as $table) {
    $sql .= "left join $table on $table.entity_type = 'node' and $table.entity_id = node.nid ";
  }
  $sql .= "left join node node_employer on node_employer.nid = field_data_field_grievance_shop.field_grievance_shop_target_id ";
  $sql .= "where node.type = 'sirius_worker' ";
  $sql .= "and (";
  $sql .= "  node.title like :match_substr ";
  $sql .= "  or field_sirius_ssn_value = :match_exact ";
  $sql .= "  or field_sirius_id_value = :match_exact ";
  $sql .= "  or field_sirius_id2_value = :match_exact ";
  $sql .= ") ";
  $sql .= "order by node.title ";
  $sql .= "limit 50 ";

  $str = preg_replace('/\%/', '', $str);
  $stmt = db_query($sql, array(':match_substr' => '%' . $str . '%', ':match_exact' => $str));

  $matches = array();
  while ($hr = $stmt->fetchAssoc()) {
    $matches[] = $hr;
  }

  return $matches;
}

function grievance_worker_lookup_ajax($worker_nid) {
  $worker_node = node_load($worker_nid);
  $result = array();
  $result['first_name']   = $worker_node->field_sirius_name['und'][0]['given'];
  $result['last_name']    = $worker_node->field_sirius_name['und'][0]['family'];
  $result['city']         = $worker_node->field_sirius_address['und'][0]['locality'];
  $result['state']        = $worker_node->field_sirius_address['und'][0]['administrative_area'];
  $result['zip']          = $worker_node->field_sirius_address['und'][0]['postal_code'];
  $result['street']       = $worker_node->field_sirius_address['und'][0]['thoroughfare'];
  $result['gender']       = $worker_node->field_sirius_gender['und'][0]['value'];
  $result['phone']        = $worker_node->field_sirius_phone['und'][0]['value'];
  $result['email']        = $worker_node->field_sirius_email['und'][0]['value'];
  $result['id']           = $worker_node->field_sirius_id['und'][0]['value'];
  drupal_json_output($result);
  exit;
}

function grievance_worker_form_grievance_node_callback_replace($form, $form_state) {
  $commands = array();
  $commands[] = ajax_command_replace("#grievance-worker-search-result", $form['grievance_worker_search_result']['#markup']);

  return array(
    '#type' => 'ajax',
    '#commands' => $commands
  );
}

function grievance_worker_form_grievance_node_callback_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

function grievance_worker_form_grievance_node_form_alter(&$form, &$form_state, $form_id) {
  if (!user_access('grievance worker lookup')) { return; }

  // Add Worker Search elements to the form
  $form['grievance_worker_search'] = array(
    '#type' => 'textfield',
    '#title' => t('Worker Search'),
    '#description' => t('Enter the worker\'s first or last name, ID, or SSN.'),
  );
  $form['#groups']['group_grievance_employee']->children[] = 'grievance_worker_search';
  $form['#group_children']['grievance_worker_search'] = 'group_grievance_employee';

  $form['grievance_worker_search_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search Workers'),
    '#submit' => array('grievance_worker_form_grievance_node_callback_submit'),
    '#ajax' => array(
      'callback' => 'grievance_worker_form_grievance_node_callback_replace',
      'method' => 'replace',
    ),
  );
  $form['#groups']['group_grievance_employee']->children[] = 'grievance_worker_search_submit';
  $form['#group_children']['grievance_worker_search_submit'] = 'group_grievance_employee';

  $candidates = array();
  if ($form_state['values']['grievance_worker_search']) {
    $candidates = grievance_worker_search($form_state['values']['grievance_worker_search']);

    if (!$candidates) {
      $result_body .= t('No members match your search criteria: ') . '<strong>' . $form_state['values']['grievance_worker_search'] . '</strong>';
    } else {
      $header = array(
        t('Worker NID'),
        t('Name'),
        t('ID'),
        t('ID2'),
        t('SSN'),
        t('Employer'),
      );
      $attributes = array();
      $rows = array();
      foreach ($candidates as $candidate) {
        $row = array();
        $row[] = '<a href="#" class="grievance-worker-id-for-insert">' . $candidate['nid'] . '</a>';
        $row[] = $candidate['title'];
        $row[] = $candidate['field_sirius_id_value'];
        $row[] = $candidate['field_sirius_id2_value'];
        $row[] = '###-##-' . substr($candidate['field_sirius_ssn_value'], -4, 4);
        $row[] = $candidate['employer'];
        $rows[] = $row;
      }
      $result_body = theme_table(array('header' => $header, 'rows' => $rows, 'attributes' => $attributes));
    }
  }

  $form['grievance_worker_search_result'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="grievance-worker-search-result">' . $result_body . '</div>',
  );
  $form['#groups']['group_grievance_employee']->children[] = 'grievance_worker_search_result';
  $form['#group_children']['grievance_worker_search_result'] = 'group_grievance_employee';

  // Add "update a worker" side effect
  if (user_access('grievance worker edit')) { 
    $form['#groups']['group_grievance_employee']->children[] = 'grievance_worker_update';
    $form['#group_children']['grievance_worker_update'] = 'group_grievance_employee';
    $weight = $form['field_grievance_min']['#weight'] + 0.1;
    $form['grievance_worker_update'] = array(
      '#title' => 'Update Worker Database',
      '#type' => 'select',
      '#options' => array(
        'No' => t('No'),
        'Yes' => t('Yes'),
      ),
      '#default_value' => 'No',
      '#required' => TRUE,
      '#description' => t('Select "Yes" to save this information to the worker database. Choose this option if you are entering a new worker or wish to change the contact information for the worker.'),
      '#weight' => $weight,
    );
  }
}

/**
 * Implements hook_node_insert()
 */

function grievance_worker_node_insert($node) {
  if ($node->type == 'grievance' && $node->grievance_worker_update == 'Yes' && user_access('grievance worker edit')) { grievance_worker_handle_update($node); }
}

/**
 * Implements hook_node_update()
 */

function grievance_worker_node_update($node) {
  if ($node->type == 'grievance' && $node->grievance_worker_update == 'Yes' && user_access('grievance worker edit')) { grievance_worker_handle_update($node); }
}

function grievance_worker_handle_update($grievance_node) {
  $worker_id = trim($grievance_node->field_grievance_min['und'][0]['value']);
  if (!$worker_id) {
    drupal_set_message("Worker database update failed: no member id.", 'warning');
    return;
  }

  $worker_node = sirius_worker_get_by_id($worker_id);
  if (!$worker_node) {
    if (!user_access('grievance worker create')) {
      drupal_set_message("Worker database update failed: The worker was not found in the database, and you do not have permission to create a new worker. ", 'warning');
      return;
    }

    global $user;
    $worker_node = new stdClass();
    $worker_node->type = 'sirius_worker';
    $worker_node->language = LANGUAGE_NONE;
    $worker_node->uid = $user->uid;
    $worker_node->status = 1;
    $worker_node->promote = 0;
    $worker_node->comment = 0;
    $worker_node->title = substr(date('c') . " - " . $category . " - " . $type . " - " . $message, 0, 254);
    $worker_node->field_sirius_id['und'][0]['value'] = $worker_id;
  }


  if ($value = $grievance_node->field_grievance_first_name['und'][0]['value']) { $worker_node->field_sirius_name['und'][0]['given'] = $value; }
  if ($value = $grievance_node->field_grievance_last_name['und'][0]['value'])  { $worker_node->field_sirius_name['und'][0]['family'] = $value; }
  if ($value = $grievance_node->field_grievance_phone['und'][0]['value'])      { $worker_node->field_sirius_phone['und'][0]['value'] = $value; }
  if ($value = $grievance_node->field_grievance_email['und'][0]['email'])      { $worker_node->field_sirius_email['und'][0]['value'] = $value; }

  if ($value = $grievance_node->field_grievance_address['und'][0]['value'])    {
    $worker_node->field_sirius_address['und'][0]['thoroughfare'] = $value; 
    $worker_node->field_sirius_address['und'][0]['country'] = 'US';
  }

  if ($value = $grievance_node->field_grievance_address_2['und'][0]['value'])  { $worker_node->field_sirius_address['und'][0]['premise'] = $value; }
  if ($value = $grievance_node->field_grievance_city['und'][0]['value'])       { $worker_node->field_sirius_address['und'][0]['locality'] = $value; }
  if ($value = $grievance_node->field_grievance_state['und'][0]['value'])      { $worker_node->field_sirius_address['und'][0]['administrative_area'] = $value; }
  if ($value = $grievance_node->field_grievance_zip['und'][0]['value'])        { $worker_node->field_sirius_address['und'][0]['postal_code'] = $value; }

  if ($grievance_node->field_grievance_gender['und'][0]['value'] == 'M' && sirius_get_special_tid('sirius_gender|M')) { 
    $worker_node->field_sirius_gender['und'][0]['tid'] = sirius_get_special_tid('sirius_gender|M');
  }

  if ($grievance_node->field_grievance_gender['und'][0]['value'] == 'F' && sirius_get_special_tid('sirius_gender|F')) { 
    $worker_node->field_sirius_gender['und'][0]['tid'] = sirius_get_special_tid('sirius_gender|F');
  }


  $worker_node = node_submit($worker_node);
  node_object_prepare($worker_node);
  node_save($worker_node);
  drupal_set_message("Worker database update: saved worker " . $worker_node->title . " ($worker_id)");

}