<?php


/**
 * Implements hook_views_data().
 */

function sirius_views_linkfield_views_data() {
  $data['sirius']['table']['group'] = t('Sirius');
  $data['sirius']['table']['join'] = array(
    '#global' => array(),
  );

  $data['sirius']['linkfield'] = array(
    'title' => t('Sirius LinkField'),
    'help' => t('Create a permissioned, translated link.'),
    'field' => array(
      'handler' => 'sirius_views_linkfield_field',
    ),
  );

  return $data;
}


class sirius_views_linkfield_field extends views_handler_field {

  public function query() {
    // Do nothing -- to override the parent query.
  }

  public function option_definition() {
    $options = parent::option_definition();
    $options['sirius_linkfield_text']['default'] = '';
    $options['sirius_linkfield_path']['default'] = '';


    // Override the alter text option to always alter the text.
    $options['alter']['contains']['alter_text'] = array(
      'default' => TRUE, 
      'bool' => TRUE,
    );
    $options['hide_alter_empty'] = array(
      'default' => FALSE, 
      'bool' => FALSE
    );

    return $options;
  }

  public function options_form(&$form, &$form_state) {
    $form['sirius_linkfield_text'] = array(
      '#title' => t('Link Text'),
      '#description' => t("Link text. May contain replacement patterns."),
      '#type' => 'textfield',
      '#default_value' => $this->options['sirius_linkfield_text'],
    );

    $form['sirius_linkfield_path'] = array(
      '#title' => t('Link Path'),
      '#description' => t("Path that the text should link to. May include replacement tokens. Must be a path suitable for passing into Drupal's l()."),
      '#type' => 'textfield',
      '#default_value' => $this->options['sirius_linkfield_path'],
    );

    parent::options_form($form, $form_state);
  }

  public function render($values) {
    // Return the text, so the code never thinks the value is empty.
    $text = $this->options['sirius_linkfield_text'];
    $path = $this->options['sirius_linkfield_path'];

    // It ought to be this simple.  But it's not, because tokenize_value only exists if one of the preceding fields on this row
    // has "rewrite" implemented.  And I can't figure out how to force it.
    // $text = $this->tokenize_value($text, $this->view->row_index);
    // $path = $this->tokenize_value($path, $this->view->row_index);

    // So instead I'm implementing my own damn token function.
    $tokens = array();
    $vars = get_object_vars($values);
    foreach ($vars as $name => $value) {
      if (is_array($value)) {
        // This is my half-assed render routine
        if ($value[0]['rendered']['#markup']) {
          $tokens["[$name]"] = $value[0]['rendered']['#markup'];
        }
      } else if (is_object($value)) {
        // Just plain not dealing with objects
      } else {
        $tokens["[$name]"] = $value;
      }
    }

    $fake_item = array(
      'alter_text' => TRUE,
      'text' => $path
    );
    $path = strip_tags($this->render_altered($fake_item, $tokens));

    $fake_item = array(
      'alter_text' => TRUE,
      'text' => $text
    );
    $text = strip_tags($this->render_altered($fake_item, $tokens));

    //if (!drupal_valid_path($path)) {
    //  return NULL;
    //}

    return l($text, $path);
  }
}
