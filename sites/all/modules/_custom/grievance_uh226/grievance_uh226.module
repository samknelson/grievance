<?php

// I hate notice errors
ini_set('error_reporting', ini_get('error_reporting') & ~E_NOTICE);

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_uhmigrate') . "/grievance_uhmigrate.l226.inc";
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'grievance_uhmigrate') . "/grievance_uhmigrate.l1.inc";

function grievance_uh226_menu() {
  $items = array();

  $items['grievance/report/uh226-report-summary'] = array(
    'title' => 'Report: Weekly Summary Report',
    'description' => '',
    'page callback' => 'grievance_uh226_report_summary',
    'page arguments' => array(),
    'access arguments' => array('grievance report'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function grievance_uh226_report_summary() {
  return drupal_get_form('grievance_uh226_report_summary_form');
}

function grievance_uh226_report_summary_form($form, &$form_state) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Generate Report',
  );

  if ($form_state['results']) {
    $form['results'] = array(
      '#type' => 'markup',
      '#markup' => $form_state['results'],
    );
  }

  return $form;
}

/*
 * Total Calls
 *  - Total calls this week
 *  - = Initial Call / Call to Grievant / ...

 * Left Msg
 *  - Add checkbox to flag "Left Message"

 * Total Open Grievs

 * New This Week
 *  - Based on intake date

 * SPI and Terms
 * - Search for "Suspension Pending Investigation"
 * - Search for "Discharge"

BOA Date
  - Entered the status "BOA Held" sometime during the specified week

 * In Arbitration
 * - CURRENTLY has the status "Referred to Arbitration" or "Referred to Expedited Arbitration".

 * FMCS Date
 * - CURRENTLY has the status "FMCS Held"

 * ADR Date
 * - CURRENTLY has the status "ADR Held"

 * Regular Arb Date
 * - CURRENTLY has the status "Formal Arb Held"

 * Expedited Arb Date
 * - CURRENTLY has the status "Expedited Arb Held"

 * Closed
 * - Entered a "resolved"-type status this week

 * Victories
 * - Status is "Resolved" or "Won"
*/

function grievance_uh226_report_summary_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;

  // Get the list of open and closed statuses
  $status_vocabulary = taxonomy_vocabulary_machine_name_load('grievance_status');
  $status_terms = array();
  $tmp = taxonomy_get_tree($status_vocabulary->vid);
  foreach ($tmp as $status_term) {
    $status_terms[$status_term->tid] = taxonomy_term_load($status_term->tid);
  }
  $open_status_tids = array();
  $closed_status_tids = array();
  $arbitration_status_tids = array();
  $fmcs_status_tids = array();
  $adr_status_tids = array();
  $formal_arb_held_status_tids = array();
  $expedited_arb_held_status_tids = array();
  $victory_status_tids = array();
  $boa_held_status_tids = array();

  foreach ($status_terms as $tid => $term) {
    if ($term->field_grievance_open['und'][0]['value'] == 1) {
      $open_status_tids[] = $tid;
    }
    if ($term->field_grievance_open['und'][0]['value'] == 0) {
      $closed_status_tids[] = $tid;
    }
    if (preg_match('/arbitration/i', $term->name)) {
      $arbitration_status_tids[] = $tid;
    }
    if (preg_match('/FMCS Held/i', $term->name)) {
      $fmcs_status_tids[] = $tid;
    }
    if (preg_match('/ADR Held/i', $term->name)) {
      $adr_status_tids[] = $tid;
    }
    if (preg_match('/Formal Arbitration Held/i', $term->name)) {
      $formal_arb_held_status_tids[] = $tid;
    }
    if (preg_match('/Expedited Arbitration Held/i', $term->name)) {
      $expedited_arb_held_status_tids[] = $tid;
    }
    if (preg_match('/(resolved|won)/i', $term->name)) {
      $victory_status_tids[] = $tid;
    }
    if (preg_match('/BOA Held/i', $term->name)) {
      $boa_held_status_tids[] = $tid;
    }
  }

  // Get the list of "SPI" nids
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'grievance_contract_clause');
  $query->propertyCondition('title', '%Suspension Pending Investigation%', 'like');
  $stmt = $query->execute();
  $spi_nids = array(-999);
  if ($stmt['node']) {
    $spi_nids = array_keys($stmt['node']);
  }

  // Get the list of "Term" nids
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'grievance_contract_clause');
  $query->propertyCondition('title', '%Discharge%', 'like');
  $stmt = $query->execute();
  $term_nids = array(-999);
  if ($stmt['node']) {
    $term_nids = array_keys($stmt['node']);
  }

  // Get the list of log types corresponding to "call to grievant".
  // @todo this should be configurable, but what the heck.
  $log_type_call_tids = array(441, 503, 85);
  $log_tag_left_message_tid = 874;
  $status_boa_held_tid = 112;

  // Start date
  $start_date = date('Y-m-d', strtotime("-7 days"));
  $start_ts = strtotime($start_date);

  // Get all users.  We really only want organizers, but potentially some non-organizers might be assigned...
  $sql = "select * from users where status = 1 order by name";
  $stmt = db_query($sql, array());
  $users = array();
  while ($hr = $stmt->fetchAssoc()) {
    $hr['closed'] = 0;
    $hr['victories'] = 0;
    $hr['boa_held'] = 0;
    $users[$hr['uid']] = $hr;
  }

  // Fetch everything closed this week
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'grievance_log');
  $query->fieldCondition('field_grievance_status_date', 'value', $start_date, ">=");
  $query->fieldCondition('field_grievance_log_type', 'tid', variable_get('grievance_log_update_type_with_status_change', ''));
  $query->fieldCondition('field_grievance_status', 'tid', $closed_status_tids, 'in');
  $stmt = $query->execute();
  $count_once = array();
  if ($stmt['node']) {
    $log_nids = array_keys($stmt['node']);
    foreach ($log_nids as $log_nid) {
      $log_node = node_load($log_nid);
      $grievance_nid = $log_node->field_grievance['und'][0]['target_id'];
      if ($count_once[$grievance_nid]) { continue; }
      $count_once[$grievance_nid] = TRUE;
      $grievance_node = node_load($grievance_nid);
      if ($grievance_node->field_grievance_rep_organizer['und'][0]['target_id']) {
        $users[$grievance_node->field_grievance_rep_organizer['und'][0]['target_id']]['closed']++;
      }
    }
  }

  // Fetch victories this week
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'grievance_log');
  $query->fieldCondition('field_grievance_status_date', 'value', $start_date, ">=");
  $query->fieldCondition('field_grievance_log_type', 'tid', variable_get('grievance_log_update_type_with_status_change', ''));
  $query->fieldCondition('field_grievance_status', 'tid', $victory_status_tids, 'in');
  $stmt = $query->execute();
  $count_once = array();
  if ($stmt['node']) {
    $log_nids = array_keys($stmt['node']);
    foreach ($log_nids as $log_nid) {
      $log_node = node_load($log_nid);
      $grievance_nid = $log_node->field_grievance['und'][0]['target_id'];
      if ($count_once[$grievance_nid]) { continue; }
      $count_once[$grievance_nid] = TRUE;
      $grievance_node = node_load($grievance_nid);
      if ($grievance_node->field_grievance_rep_organizer['und'][0]['target_id']) {
        $users[$grievance_node->field_grievance_rep_organizer['und'][0]['target_id']]['victories']++;
      }
    }
  }

  // Fetch BOA Held
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'grievance_log');
  $query->fieldCondition('field_grievance_status_date', 'value', $start_date, ">=");
  $query->fieldCondition('field_grievance_log_type', 'tid', variable_get('grievance_log_update_type_with_status_change', ''));
  $query->fieldCondition('field_grievance_status', 'tid', $boa_held_status_tids, 'in');
  $stmt = $query->execute();
  $count_once = array();
  if ($stmt['node']) {
    $log_nids = array_keys($stmt['node']);
    foreach ($log_nids as $log_nid) {
      $log_node = node_load($log_nid);
      $grievance_nid = $log_node->field_grievance['und'][0]['target_id'];
      if ($count_once[$grievance_nid]) { continue; }
      $count_once[$grievance_nid] = TRUE;
      $grievance_node = node_load($grievance_nid);
      if ($grievance_node->field_grievance_rep_organizer['und'][0]['target_id']) {
        $users[$grievance_node->field_grievance_rep_organizer['und'][0]['target_id']]['boa_held']++;
      }
    }
  }

  // Our report data
  $report_rows = array();

  // For each user
  foreach ($users as $uid => $user) {
    // Our report row
    $report_row = array();
    $report_row['name'] = $user['name'];
    $report_row['closed'] = $user['closed'];
    $report_row['victories'] = $user['victories'];
    $report_row['boa_held'] = $user['victories'];

    // Fetch the number of open grievances for each user
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'grievance');
    $query->fieldCondition('field_grievance_rep_organizer', 'target_id', $user['uid']);
    $query->fieldCondition('field_grievance_status', 'tid', $open_status_tids, 'in');
    $stmt = $query->execute();
    if (!$stmt['node']) { continue; }
    $report_row['open_count'] = count(array_keys($stmt['node']));

    // Fetch the total calls this week
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'grievance_log');
    // $query->fieldCondition('field_grievance_log_type', 'tid', $log_type_call_tids, 'in');
    $query->fieldCondition('field_grievance_status_date', 'value', $start_date, ">=");
    $query->propertyCondition('uid', $user['uid']);
    $stmt = $query->execute();
    $report_row['calls_this_week'] = 0;
    if ($stmt['node']) {
      $report_row['calls_this_week'] = count(array_keys($stmt['node']));
    }

    // Fetch the "Left Message" calls
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'grievance_log');
    $query->fieldCondition('field_grievance_log_type', 'tid', $log_type_call_tids, 'in');
    $query->fieldCondition('field_grievance_log_tags', 'tid', $log_tag_left_message_tid);
    $query->fieldCondition('field_grievance_status_date', 'value', $start_date, ">=");
    $query->propertyCondition('uid', $user['uid']);
    $stmt = $query->execute();
    $report_row['left_message'] = 0;
    if ($stmt['node']) {
      $report_row['left_message'] = count(array_keys($stmt['node']));
    }

    // Fetch "New This Week" 
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'grievance');
    $query->fieldCondition('field_grievance_rep_organizer', 'target_id', $user['uid']);
    // $query->fieldCondition('field_grievance_status', 'tid', $open_status_tids, 'in');
    $query->propertyCondition('created', $start_ts, ">=");
    $stmt = $query->execute();
    $report_row['new_this_week'] = 0;
    if ($stmt['node']) {
      $report_row['new_this_week'] = count(array_keys($stmt['node']));
    }

    // Fetch SPIs
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'grievance');
    $query->fieldCondition('field_grievance_clauseref', 'target_id', $spi_nids, 'in');
    $query->fieldCondition('field_grievance_status', 'tid', $open_status_tids, 'in');
    $query->fieldCondition('field_grievance_rep_organizer', 'target_id', $user['uid']);
    $stmt = $query->execute();
    $report_row['spi'] = 0;
    if ($stmt['node']) {
      $report_row['spi'] = count(array_keys($stmt['node']));
    }

    // Fetch Terms
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'grievance');
    $query->fieldCondition('field_grievance_clauseref', 'target_id', $term_nids, 'in');
    $query->fieldCondition('field_grievance_status', 'tid', $open_status_tids, 'in');
    $query->fieldCondition('field_grievance_rep_organizer', 'target_id', $user['uid']);
    $stmt = $query->execute();
    $report_row['terms'] = 0;
    if ($stmt['node']) {
      $report_row['terms'] = count(array_keys($stmt['node']));
    }

    // Fetch Arbitrations
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'grievance');
    $query->fieldCondition('field_grievance_status', 'tid', $open_status_tids, 'in');
    $query->fieldCondition('field_grievance_status', 'tid', $arbitration_status_tids, 'in');
    $query->fieldCondition('field_grievance_rep_organizer', 'target_id', $user['uid']);
    $stmt = $query->execute();
    $report_row['arbitration'] = 0;
    if ($stmt['node']) {
      $report_row['arbitration'] = count(array_keys($stmt['node']));
    }

    // Fetch FMCS
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'grievance');
    $query->fieldCondition('field_grievance_status', 'tid', $open_status_tids, 'in');
    $query->fieldCondition('field_grievance_status', 'tid', $fmcs_status_tids, 'in');
    $query->fieldCondition('field_grievance_rep_organizer', 'target_id', $user['uid']);
    $stmt = $query->execute();
    $report_row['fmcs'] = 0;
    if ($stmt['node']) {
      $report_row['fmcs'] = count(array_keys($stmt['node']));
    }

    // Fetch ADR
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'grievance');
    $query->fieldCondition('field_grievance_status', 'tid', $open_status_tids, 'in');
    $query->fieldCondition('field_grievance_status', 'tid', $adr_status_tids, 'in');
    $query->fieldCondition('field_grievance_rep_organizer', 'target_id', $user['uid']);
    $stmt = $query->execute();
    $report_row['adr'] = 0;
    if ($stmt['node']) {
      $report_row['adr'] = count(array_keys($stmt['node']));
    }

    // Fetch Formal Arb Held
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'grievance');
    $query->fieldCondition('field_grievance_status', 'tid', $open_status_tids, 'in');
    $query->fieldCondition('field_grievance_status', 'tid', $formal_arb_held_status_tids, 'in');
    $query->fieldCondition('field_grievance_rep_organizer', 'target_id', $user['uid']);
    $stmt = $query->execute();
    $report_row['formal_arb_held'] = 0;
    if ($stmt['node']) {
      $report_row['formal_arb_held'] = count(array_keys($stmt['node']));
    }

    // Fetch Expedited Arb Held
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'grievance');
    $query->fieldCondition('field_grievance_status', 'tid', $open_status_tids, 'in');
    $query->fieldCondition('field_grievance_status', 'tid', $expedited_arb_held_status_tids, 'in');
    $query->fieldCondition('field_grievance_rep_organizer', 'target_id', $user['uid']);
    $stmt = $query->execute();
    $report_row['expedited_arb_held'] = 0;
    if ($stmt['node']) {
      $report_row['expedited_arb_held'] = count(array_keys($stmt['node']));
    }

    $report_rows[] = array_values($report_row);
    $header = array_keys($report_row);
  }

  $form_state['results'] = theme_table(
    array(
      'rows' => $report_rows,
      'header' => $header, 
      'attributes' => array(),
    )
  );

  drupal_set_message("Report generated.");
}