<?php

// I hate notice errors
ini_set('error_reporting', ini_get('error_reporting') & ~E_NOTICE);

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.permission.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.menu.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.user.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.member_status.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.work_status.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.skill.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.department.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.notify.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.vbo.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.merge.inc";

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.report_duplicate_id.inc";

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_user.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_employer_worker_list.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_work_status.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_skill.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_contact.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_industry.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_me.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_skill_expiring.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_merge.inc";

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.term_tab_member_status_optin.inc";

function sirius_worker_get_by_id($id) {
	if (!$id) { return NULL; }

	// Get the bullpens
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'sirius_worker');
	$query->fieldCondition('field_sirius_id', 'value', $id);
	$query->propertyOrderBy('nid', 'desc');
	$stmt = $query->execute();
	if (!$stmt['node']) { return NULL; }

	return node_load(array_keys($stmt['node'])[0]);
}

/*
 * Post-save
 *
 * After saving a worker node, sync the user
 * 
 * This is registered as a shutdown function, because it shouldn't run
 * during the same transaction as when the node is created.
 */

function sirius_worker_node_postsave($node, $op) {
  if ($node->type == 'sirius_worker' && 
    ($op == 'insert' || $op == 'update') &&
    !$node->grievance_no_recurse && 
    !$node->sirius_no_recurse) {

    // Avoid re-calling this function
    $node->grievance_no_recurse = TRUE;
    $node->sirius_no_recurse = TRUE;
    $need_save = FALSE;

    // Sync the user
    $result = sirius_worker_usersync($node->nid);
  }
}

/**
 * Implements hook_cron
 */

function sirius_worker_cron() {
  sirius_worker_skills_cron();
}



/**
 * Implements hook_views_pre_render
 */

function sirius_worker_views_pre_render(&$view) {
  return; 
  if ($view->name != 'sirius_skill_expiration_list') { return; }
  if (!$view->result) { return; }
  // drupal_set_message('<pre>' . print_r($view, 1) . '</pre>');
  foreach ($view->result as &$row) {
    if ($row->field_field_sirius_skill_expire) {
      foreach ($row->field_field_sirius_skill_expire as $delta => $hr) {
        $date = $hr['raw']['value'];
        drupal_set_message($date);
      }
    }
    dpm($row);
    break;
  }
}

/**
 * Implements hook_sirius_jsonfield_form_definitions()
 */

function sirius_worker_sirius_jsonfield_form_definitions() {
  $form = array();
  $form['dispatch'] = array(
    '#type' => 'fieldset',
    '#title' => 'Dispatch',
  );
  $form['dispatch']['keep_seniority'] = array(
    '#type' => 'select', 
    '#title' => 'Keep Seniority',
    '#options' => array('No' => 'No', 'Yes' => 'Yes'),
    '#description' => t('If "Yes", then the next time this worker signs in, they will keep their previous seniority.')
  );

  $definition = array();
  $definition['node']['sirius_worker']['field_sirius_json'] = $form;
  return $definition;
}

/**
 * Implements hook_form_alter
 *
 * @todo - Have you ever seen such crappy code?  Good god, it must be 11:00 PM on the night we're launching.
 *         Somebody should really clean this up tout suite.
 *         Look, let's just pretend this never happened, ok?  It'll be just between you and me?
 */

function sirius_worker_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'sirius_worker_node_form') {
    if (!$form['nid']['#value']) {
      $form['field_sirius_id']["und"][0]['value']['#default_value'] = sirius_worker_nextid();
    }
  }
}

function sirius_worker_node_presave($worker_node) {
  // Only for workers
  if ($worker_node->type != 'sirius_worker') { return; }

  // Only on insert
  if ($worker->nid) { return; }

  // Only if the ID is blank
  if ($worker_node->field_sirius_id['und'][0]['value']) { return; }

  $worker_node->field_sirius_id['und'][0]['value'] = sirius_worker_nextid();
}

function sirius_worker_nextid() {
  $sql = "select max(field_sirius_id_value) as m from field_data_field_sirius_id ";
  $sql .= "where entity_type = 'node' "; 
  $sql .= "and bundle = 'sirius_worker' ";
  $sql .= "and field_sirius_id_value != '999099' ";
  $sql .= "and field_sirius_id_value != '666666' ";
  $sql .= "and field_sirius_id_value != '999001' ";
  $sql .= "and field_sirius_id_value < '999000' ";
  $sql .= "and length(field_sirius_id_value) = 6 ";
  // $sql .= 'and field_sirius_id_value REGEXP \'^[0-9]{6}$\' ';
  $stmt = db_query($sql, array());
  $hr = $stmt->fetchAssoc();
  $id = $hr['m'];
  if ($id > 0) {
    $id++;
    if ($id == 999099) { $id++; }
    if ($id == 666666) { $id++; }
    if ($id == 999001) { $id++; }
    return $id;
    
  }
}

/***
 * Implements hook_report_cache_info() 
 */

function sirius_worker_report_cache_info() {
  $items = array();

  $items['sirius-worker-duplicate-id'] = array(
    'name' => t('Workers with Duplicate IDs'),
    'description' => '',
    'access' => 'sirius report',
    'fields' => sirius_worker_report_duplicate_id_fields(),
    'form_callback' => 'sirius_worker_report_duplicate_id_form',
    'pk_list_callback' => 'sirius_worker_report_duplicate_id_pks',
    'batch_callback' => 'sirius_worker_report_duplicate_id_batch',
    'render_callbacks' => array(
      'View' => 'sirius_worker_report_duplicate_id_view',
    ),
  );

  return $items;
}

