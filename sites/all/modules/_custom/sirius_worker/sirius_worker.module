<?php

// I hate notice errors
ini_set('error_reporting', ini_get('error_reporting') & ~E_NOTICE);

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.permission.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.access.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.menu.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.user.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.member_status.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.work_status.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.skill.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.department.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.notify.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.vbo.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.merge.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.ein.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.schedule.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.schedule_tor.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.history.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.create.inc";

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_list.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_user.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_work_status.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_skill.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_skill_renew.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_skill_add.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_skill_add2.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_skill_log.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_skill_remove.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_skill_term_delete.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_skill_term_renew.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_contact.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_contact_customfields.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_industry.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_me.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_skill_expiring.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_merge.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_schedule.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.page_contact_phone.inc";

require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.term_tab_member_status_optin.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.term_tab_member_status_tor.inc";
require_once DRUPAL_ROOT . "/sites/all/modules/_custom/sirius_worker/sirius_worker.term_tab_member_status_subscribe.inc";

/**
 * Implements hook_sirius_domain_component_info
 */

function sirius_worker_sirius_domain_component_info() {
  return array(
    'worker' => array(
      'title' => 'Worker',
      'description' => 'Use the worker database',
    ),
    'worker:schedule' => array(
      'title' => 'Worker - Schedule',
      'description' => 'Use scheduling tools for workers such as time off requests',
    ),
    'worker:skill' => array(
      'title' => 'Worker - Skill',
      'description' => 'Manage skills for workers',
    ),
    'worker:usersync' => array(
      'title' => 'Worker - User Sync',
      'description' => 'Enable manual sync\'ing to generate users from worker records',
    ),
  );
}



function sirius_worker_get_by_id($id, $nid_only = FALSE) {
	if (!$id) { return NULL; }

  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'sirius_worker');
	$query->fieldCondition('field_sirius_id', 'value', $id);
  $domain_nid = sirius_domain_nid();
  if ($domain_nid) { $query->fieldCondition('field_sirius_domain', 'target_id', $domain_nid); }
	$query->propertyOrderBy('nid', 'desc');
	$stmt = $query->execute();
	if (!$stmt['node']) { return NULL; }

  if ($nid_only) { return array_keys($stmt['node'])[0]; }

	return node_load(array_keys($stmt['node'])[0]);
}

function sirius_worker_get_by_id2($id) {
  if (!$id) { return NULL; }

  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'sirius_worker');
  $query->fieldCondition('field_sirius_id2', 'value', $id);
  $domain_nid = sirius_domain_nid();
  if ($domain_nid) { $query->fieldCondition('field_sirius_domain', 'target_id', $domain_nid); }
  $query->propertyOrderBy('nid', 'desc');
  $stmt = $query->execute();
  if (!$stmt['node']) { return NULL; }

  return node_load(array_keys($stmt['node'])[0]);
}

function sirius_worker_get_by_contact_nid($contact_nid, $nid_only = FALSE) {
  if (!$contact_nid) { return NULL; }

  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'sirius_worker');
  $query->fieldCondition('field_sirius_contact', 'target_id', $contact_nid);
  $domain_nid = sirius_domain_nid();
  if ($domain_nid) { $query->fieldCondition('field_sirius_domain', 'target_id', $domain_nid); }
  $query->propertyOrderBy('nid', 'desc');
  $stmt = $query->execute();
  if (!$stmt['node']) { return NULL; }

  $worker_nid = array_keys($stmt['node'])[0];
  if ($nid_only) { return $worker_nid; }
  return node_load($worker_nid);
}

function sirius_worker_get_by_ssn($id) {
  if (!$id) { return NULL; }

  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'sirius_worker');
  $query->fieldCondition('field_sirius_ssn', 'value', $id);
  $domain_nid = sirius_domain_nid();
  if ($domain_nid) { $query->fieldCondition('field_sirius_domain', 'target_id', $domain_nid); }
  $query->propertyOrderBy('nid', 'desc');
  $stmt = $query->execute();
  if (!$stmt['node']) { return NULL; }

  return node_load(array_keys($stmt['node'])[0]);
}

function sirius_worker_get_by_phone($phone) {
  if (!$phone) { return NULL; }

  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'sirius_worker');
  $query->fieldCondition('field_sirius_phone', 'value', sirius_phone_format($phone));
  $domain_nid = sirius_domain_nid();
  if ($domain_nid) { $query->fieldCondition('field_sirius_domain', 'target_id', $domain_nid); }
  $query->propertyOrderBy('nid', 'desc');
  $stmt = $query->execute();
  if (!$stmt['node']) { return NULL; }

  return node_load(array_keys($stmt['node'])[0]);
}

function sirius_worker_get_by_field($field_name, $id, $nid_only = FALSE) {
  if (!$id) { return NULL; }

  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'sirius_worker');
  $query->fieldCondition($field_name, 'value', $id);
  $domain_nid = sirius_domain_nid();
  if ($domain_nid) { $query->fieldCondition('field_sirius_domain', 'target_id', $domain_nid); }
  $query->propertyOrderBy('nid', 'desc');
  $stmt = $query->execute();
  if (!$stmt['node']) { return NULL; }

  if ($nid_only) { return array_keys($stmt['node'])[0]; }

  return node_load(array_keys($stmt['node'])[0]);
}

/*
 * Post-save
 *
 * After saving a worker node, sync the user
 * 
 * This is registered as a shutdown function, because it shouldn't run
 * during the same transaction as when the node is created.
 */

function sirius_worker_node_postsave($node, $op) {
  if ($node->type == 'sirius_worker' && 
    ($op == 'insert' || $op == 'update') &&
    !$node->grievance_no_recurse && 
    !$node->sirius_no_recurse) {
    
    // Switch into the relevant domain
    if ($node->field_sirius_domain['und'][0]['target_id']) {
      sirius_domain_push($worker_node->field_sirius_domain['und'][0]['target_id']);
    }

    // Check the component
    if (!sirius_domain_component_enabled('worker:usersync')) { return; }

    // Avoid re-calling this function
    $node->grievance_no_recurse = TRUE;
    $node->sirius_no_recurse = TRUE;
    $need_save = FALSE;

    // Switch into the relevant domain
    if ($node->field_sirius_domain['und'][0]['target_id']) {
      sirius_domain_pop();
    }

    // Sync the user
    $result = sirius_worker_usersync($node->nid);
  }
}

/**
 * Implements hook_cron
 * 
 * Old-style cron; @todo switch to sirius_cron
 */

function sirius_worker_cron() {
  sirius_worker_skills_cron();
}

/**
 * Implements hook_views_pre_render
 */

function sirius_worker_views_pre_render(&$view) {
  return; 
  if ($view->name != 'sirius_skill_expiration_list') { return; }
  if (!$view->result) { return; }
  // drupal_set_message('<pre>' . print_r($view, 1) . '</pre>');
  foreach ($view->result as &$row) {
    if ($row->field_field_sirius_skill_expire) {
      foreach ($row->field_field_sirius_skill_expire as $delta => $hr) {
        $date = $hr['raw']['value'];
        drupal_set_message($date);
      }
    }
    dpm($row);
    break;
  }
}

/**
 * Implements hook_sirius_jsonfield_form_definitions()
 */

function sirius_worker_sirius_jsonfield_form_definitions() {
  $form = array();
  $form['dispatch'] = array(
    '#type' => 'fieldset',
    '#title' => 'Dispatch',
  );
  $form['dispatch']['keep_seniority'] = array(
    '#type' => 'select', 
    '#title' => 'Keep Seniority',
    '#options' => array('No' => 'No', 'Yes' => 'Yes'),
    '#description' => t('If "Yes", then the next time this worker signs in, they will keep their previous seniority.')
  );

  $definition = array();
  $definition['node']['sirius_worker']['field_sirius_json'] = $form;
  return $definition;
}

/**
 * Implements hook_form_alter
 */

function sirius_worker_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'sirius_worker_node_form') {
    // Some fields must be edited within tabs, can't be modified here.
    $form['field_sirius_skill']['#access'] = FALSE;
    $form['field_sirius_skill_expire']['#access'] = FALSE;
    // $form['field_sirius_member_status']['#access'] = FALSE;
    $form['field_sirius_industry']['#access'] = FALSE;
    $form['field_sirius_work_status']['#access'] = FALSE;
    $form['field_sirius_worker_dispstatus']['#access'] = FALSE;
    $form['field_sirius_dispatch_availdate']['#access'] = FALSE;
    $form['field_sirius_skill']['#access'] = FALSE;
    $form['field_sirius_skill_expire']['#access'] = FALSE;
    $form['field_sirius_dispatch_dncs']['#access'] = FALSE;
    $form['field_sirius_dispatch_asi']['#access'] = FALSE;
    $form['field_sirius_dispatch_sib_status']['#access'] = FALSE;
    $form['field_sirius_dispatch_medium']['#access'] = FALSE;
    $form['field_sirius_skills_avail']['#access'] = FALSE;
    $form['field_sirius_skills_availx']['#access'] = FALSE;
    $form['field_grievance_departments']['#access'] = FALSE;
    $form['field_sirius_dispatch_cbn']['#access'] = FALSE;
    $form['field_sirius_dispatch_dncs2']['#access'] = FALSE;
    $form['field_sirius_aat_required']['#access'] = FALSE;
    $form['field_sirius_dispatch_hfe']['#access'] = FALSE;
    $form['field_sirius_dispatch_hfe_until']['#access'] = FALSE;
    //$form['field_sirius_dispatch_eba']['#access'] = FALSE;
    //$form['field_sirius_dispatch_eba_dates']['#access'] = FALSE;
    $form['field_sirius_email']['#access'] = FALSE;
    $form['field_sirius_address']['#access'] = FALSE;
    $form['field_sirius_phone_fax']['#access'] = FALSE;
    $form['field_sirius_phone_alt']['#access'] = FALSE;
    $form['field_sirius_phone']['#access'] = FALSE;

    // @todo - Have you ever seen such crappy code?  Good god, it must be 11:00 PM on the night we're launching.
    //        Somebody should really clean this up tout suite.
    //        Look, let's just pretend this never happened, ok?  It'll be just between you and me?
    if (!$form['nid']['#value']) {
      $form['field_sirius_id']["und"][0]['value']['#default_value'] = sirius_worker_nextid();
    }
  }
}

function sirius_worker_node_presave($worker_node) {
  // Only for workers
  if ($worker_node->type != 'sirius_worker') { return; }

  // Only on insert
  if ($worker->nid) { return; }

  // Only if the ID is blank
  if ($worker_node->field_sirius_id['und'][0]['value']) { return; }

  $worker_node->field_sirius_id['und'][0]['value'] = sirius_worker_nextid();
}

function sirius_worker_nextid() {
  $id = sirius_domain_variable_get('sirius_worker_nextid');
  if (!$id) { $id = 1000000; }
  ++$id; 
  sirius_domain_variable_set('sirius_worker_nextid', $id);
  drupal_alter('sirius_worker_nextid', $id);
  return $id;
}

/**
 * Implements hook_sirius_config_links_alter()
 */

function sirius_worker_sirius_config_links_alter(&$links) {
  $links['worker']['title'] = 'Worker';
  $links['worker']['links']['sirius/worker/config/create'] = array('title' => 'Worker Creation', 'description' => 'Configure how workers are created.');
  $links['worker']['links']['sirius/worker/config/user'] = array('title' => 'Worker / User Sync', 'description' => 'Configure how users are created from workers.');
  $links['worker']['links']['admin/config/grievance/workersync'] = array('title' => 'Worker Database', 'description' => 'Configure the connection between the grievance module and the worker database.');
  $links['worker']['links']['sirius/skill/settings'] = array('title' => 'Skill Settings', 'description' => 'Configure settings for skill management and display.');

}

/** 
 * Implements hook_sirius_access_info
 */

function sirius_worker_sirius_access_info() {
  $infos = array();
  Sirius_Worker_Access::getInstance()->setInfo($infos);
  return $infos;
}

/**
 * Implements hook_sirius_dashboard_info
 */

function sirius_worker_sirius_dashboard_plugin_info() {
  $plugins = array();

  $plugins['worker_contact'] = array(
    'title' => 'Worker: Contact Info',
    'description' => '',
    'file' => 'sirius_worker.dashboard_contact.inc',
    'module' => 'sirius_worker',
    'callbacks' => array(
      'data' => 'sirius_worker_dashboard_contact_data',
      // 'config' => 'sirius_denorm_dashboard_config',
      // 'prefs' => 'sirius_denorm_dashboard_prefs',
    ),
    'proxy' => TRUE,
  );

  return $plugins;
}

/***
 * Implements hook_report_cache_info() 
 */

function sirius_worker_report_cache_info() {
  sirius_require('sirius_worker', 'sirius_worker.report_duplicate_id.inc');
  sirius_require('sirius_worker', 'sirius_worker.report_multiple_member_status.inc');
  sirius_require('sirius_worker', 'sirius_worker.report_skill_log.inc');
  sirius_require('sirius_worker', 'sirius_worker.report_ssn_duplicate.inc');
  sirius_require('sirius_worker', 'sirius_worker.report_ssn_invalid.inc');
  sirius_require('sirius_worker', 'sirius_worker.report_ssn_missing.inc');
  sirius_require('sirius_worker', 'sirius_worker.report_geo.inc');
  sirius_require('sirius_worker', 'sirius_worker.report_notification_media.inc');

  $items = array();

  Sirius_Worker_Report_Ssn_Invalid::getInstance()->setInfo($items);
  Sirius_Worker_Report_Ssn_Missing::getInstance()->setInfo($items);
  Sirius_Worker_Report_Ssn_Duplicate::getInstance()->setInfo($items);
  Sirius_Worker_Report_Geo::getInstance()->setInfo($items);
  Sirius_Worker_Report_Notification_Media::getInstance()->setInfo($items);

  $items['sirius-worker-duplicate-id'] = array(
    'name' => t('Workers with Duplicate IDs'),
    'description' => '',
    'access' => 'sirius worker view',
    'fields' => sirius_worker_report_duplicate_id_fields(),
    'form_callback' => 'sirius_worker_report_duplicate_id_form',
    'pk_list_callback' => 'sirius_worker_report_duplicate_id_pks',
    'batch_callback' => 'sirius_worker_report_duplicate_id_batch',
    'render_callbacks' => array(
      'View' => 'sirius_worker_report_duplicate_id_view',
    ),
    'module' => 'sirius_worker',
  );

  $items['sirius-worker-multiple-member-status'] = array(
    'name' => t('Workers with Multiple Member Statuses'),
    'description' => '',
    'access' => 'sirius worker view',
    'fields' => sirius_worker_report_multiple_member_status_fields(),
    'form_callback' => 'sirius_worker_report_multiple_member_status_form',
    'pk_list_callback' => 'sirius_worker_report_multiple_member_status_pks',
    'batch_callback' => 'sirius_worker_report_multiple_member_status_batch',
    'render_callbacks' => array(
      'View' => 'sirius_worker_report_multiple_member_status_view',
    ),
    'module' => 'sirius_worker',
  );

  $items['sirius-worker-skill-log'] = array(
    'name' => t('Skill log report'),
    'description' => '',
    'access' => 'sirius worker view',
    'fields' => sirius_worker_report_skill_log_fields(),
    'form_callback' => 'sirius_worker_report_skill_log_form',
    'pk_list_callback' => 'sirius_worker_report_skill_log_pks',
    'batch_callback' => 'sirius_worker_report_skill_log_batch',
    'render_callbacks' => array(
      'Summary' => 'sirius_worker_report_skill_log_view_summary',
      'Details' => 'sirius_worker_report_skill_log_view_detail',
    ),
    'module' => 'sirius_worker',
  );

  return $items;
}

/**
 * Implements hook_node_view
 */

function sirius_worker_node_view($node, $view_mode, $langcode) {
  if ($node->type != 'sirius_worker') { return; }

  // Render EINs
  sirius_worker_ein_node_view($node, $view_mode, $langcode);

  // Render languages
  sirius_lang_node_view($node, $view_mode, $langcode);

  // Render contact tags
  sirius_worker_contact_tags_node_view($node, $view_mode, $langcode);
}

/**
 * Show the "contact tags" on the landing page for the worker. But only those
 * tags which have been flagged for display.
 */

function sirius_worker_contact_tags_node_view(&$node, $view_mode, $langcode) {
  if ($node->type != 'sirius_worker') { return; }
  if (!$node->content['contact_tags']) { return; }

  $tags = &drupal_static(__FUNCTION__);
  if (!isset($tags)) {
    $tmp = sirius_taxonomy_load('sirius_contact_tags', 'tid', 'full');
    foreach ($tmp as $tid => $term) {
      $json = sirius_json_get($term);
      if ($json['contact_tags']['display']['landing'] != 'Yes') { continue; }
      $tags[$tid] = $term->name;
    }
  }

  if (!$tags) {
    unset($node->content['contact_tags']);
    return; 
  }

  $contact_node = sirius_worker_contact_get($node);
  if (!$contact_node) {
    unset($node->content['contact_tags']);
    return;
  }

  $my_tids = sirius_fieldvals($contact_node, 'field_sirius_contact_tags', 'tid');
  $display_names = array();
  foreach ($tags as $tid => $name) {
    if (!in_array($tid, $my_tids)) { continue; }
    $display_names[] = $name;
  }
  if (!$display_names) {
    unset($node->content['contact_tags']);
    return;
  }

  $node->content['contact_tags'][0]['#markup'] = sirius_fakerender_field(
    'Tags:',
    join('<br />', $display_names)
  );

  return;
}

/**
 * Implements hook_file_download_access
 */

function sirius_worker_file_download_access($file_item, $entity_type, $entity) {
  // Time-off entries get treated specially
  if ($entity_type == 'node' && $entity->type == 'sirius_log' && $entity->field_sirius_category['und'][0]['value'] == 'tor') {
    return sirius_worker_schedule_tor_download_access($entity);
  }
}

function sirius_worker_schedule_tor_list_all($params) {
  $domain_nid = sirius_domain_nid();
  $sql_args = array();
  $sql = "select  distinct node.nid from node ";
  // $sql = "select job_node.* from node ";
  $sql .= "left join field_data_field_sirius_category on field_data_field_sirius_category.entity_type = 'node' and field_data_field_sirius_category.entity_id = node.nid ";
  $sql .= "left join field_data_field_sirius_type on field_data_field_sirius_type.entity_type = 'node' and field_data_field_sirius_type.entity_id = node.nid ";
  $sql .= "left join field_data_field_sirius_domain on field_data_field_sirius_domain.entity_type = 'node' and field_data_field_sirius_domain.entity_id = node.nid ";
  $sql .= "left join field_data_field_sirius_log_handler on field_data_field_sirius_log_handler.entity_type = 'node' and field_data_field_sirius_log_handler.entity_id = node.nid ";

  $sql .= "left join node dispatch_node on dispatch_node.type = 'sirius_dispatch' and dispatch_node.nid = field_sirius_log_handler_target_id ";
  $sql .= "left join field_data_field_sirius_dispatch_job on field_data_field_sirius_dispatch_job.entity_type = 'node' and field_data_field_sirius_dispatch_job.entity_id = dispatch_node.nid ";

  $sql .= "left join node job_node on job_node.type = 'sirius_dispatch_job' and job_node.nid = field_sirius_dispatch_job_target_id ";
  $sql .= "left join field_data_field_grievance_shop on field_data_field_grievance_shop.entity_type = 'node' and field_data_field_grievance_shop.entity_id = job_node.nid ";

  $sql .= "where node.type = 'sirius_log' ";
  $sql .= "and field_sirius_category_value = 'tor' ";
  if ($params['status']) {
    $sql .= "and field_sirius_type_value = :type ";
    $sql_args[':type'] = $params['status']; 
  }
  if ($domain_nid) {
    $sql .= "and field_sirius_domain_target_id = :domain_nid ";
    $sql_args[':domain_nid'] = $domain_nid;
  } else {
    $sql .= "and field_sirius_domain_target_id IS NULL ";
  }
  if ($params['employer_nid']) {
    $sql .= 'and field_grievance_shop_target_id = :employer_nid ';
    $sql_args[':employer_nid'] = $params['employer_nid'];
  }

  if ($params['start_date']) {
    $sql .= "and node.created >= :start_ts ";
    $sql_args[':start_ts'] = strtotime($params['start_date'] . ' GMT');
  }
  if ($params['end_date']) {
    $sql .= "and node.created <= :end_ts ";
    $sql_args[':end_ts'] = strtotime($params['end_date'] . ' GMT');
  }
  $sql .= "order by node.created desc ";
  $sql .= "limit 500";
  $stmt = sirius_sql_query($sql, $sql_args);
  $tor_nids = array();
  while ($hr = $stmt->fetchAssoc()) {
    $tor_nids[] = $hr['nid'];
  }
  return node_load_multiple($tor_nids);
}

/**
 * Implements hook_node_update
 */

function sirius_worker_node_update($node) { return sirius_worker_denormalize_queue($node); }

/**
 * Implements hook_node_insert
 */

function sirius_worker_node_insert($node) { return sirius_worker_denormalize_queue($node); }

/**
 * Implements hook_node_delete
 */

function sirius_worker_node_delete($node) { return sirius_worker_denormalize_queue($node); }

function sirius_worker_denormalize_queue($node) {
  if ($node->type == 'sirius_log') { sirius_worker_denorm_history_queue($node); }
}

/**
 * Implements hook_sirius_denorm
 */

function sirius_worker_sirius_denorm($item) {
  if ($item['denorm_trigger'] == 'sirius_worker_history') { sirius_worker_denorm_history($item); }
}

function sirius_worker_contact_get($worker_node) {
  return node_load($worker_node->field_sirius_contact['und'][0]['target_id']);
}
