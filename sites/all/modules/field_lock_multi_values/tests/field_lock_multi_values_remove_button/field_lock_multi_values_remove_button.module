<?php
/**
 * @file
 * Field lock multi values - hide Remove button test
 */

/**
 * Implements hook_field_widget_info().
 */
function field_lock_multi_values_remove_button_field_widget_info() {
  return array(
    'textfield_with_remove_button' => array(
      'label' => t('Text field with Remove button'),
      'field types' => array('text'),
      'settings' => array('size' => 60),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function field_lock_multi_values_remove_button_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $field_parents = $element['#field_parents'];
  $field_name = $element['#field_name'];
  $language = $element['#language'];
  switch ($instance['widget']['type']) {
    case 'textfield_with_remove_button':
      $element += array(
        '#type' => 'container',
        '#input' => TRUE,
        'value' => array(
          '#type' => 'textfield',
          '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
          '#size' => $instance['widget']['settings']['size'],
          '#maxlength' => $field['settings']['max_length'],
          '#attributes' => array('class' => array('text-full')),
        ),
      );
      break;
  }
  if ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED && empty($form_state['programmed'])) {
    $parents = array_merge($field_parents, array($field_name, $language, $delta));
    $element['remove_button'] = array(
      '#delta' => $delta,
      '#name' => implode('_', $parents) . '_remove_button',
      '#type' => 'submit',
      '#value' => t('Remove'),
      '#validate' => array(),
      '#submit' => array('field_lock_multi_values_remove_button_remove_submit'),
      '#limit_validation_errors' => array(),
      '#weight' => 1000,
    );
  }
  return $element;
}

/**
 * Submit callback - "Remove" button
 */
function field_lock_multi_values_remove_button_remove_submit(&$form, &$form_state) {
  $button = $form_state['triggering_element'];
  $delta = $button['#delta'];
  $inpt = 'input';
  // Where in the form we'll find the parent element.
  $address = array_slice($button['#array_parents'], 0, -2);
  // Go one level up in the form, to the widgets container.
  $parent_element = drupal_array_get_nested_value($form, $address);
  $field_name = $parent_element['#field_name'];
  $langcode = $parent_element['#language'];
  $parents = $parent_element['#field_parents'];
  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
  // Go ahead and renumber everything from our delta to the last
  // item down one. This will overwrite the item being removed.
  for ($i = $delta; $i <= $field_state['items_count']; $i++) {
    $old_element_address = array_merge($address, array($i + 1));
    $new_element_address = array_merge($address, array($i));
    $moving_element = drupal_array_get_nested_value($form, $old_element_address);
    $moving_element_value = drupal_array_get_nested_value($form_state['values'], $old_element_address);
    $moving_element_input = drupal_array_get_nested_value($form_state[$inpt], $old_element_address);
    // Tell the element where it's being moved to.
    $moving_element['#parents'] = $new_element_address;
    // Move the element around.
    form_set_value($moving_element, $moving_element_value, $form_state);
    drupal_array_set_nested_value($form_state[$inpt], $moving_element['#parents'], $moving_element_input);
    // Move the entity in our saved state.
    if (isset($field_state['entity'][$i + 1])) {
      $field_state['entity'][$i] = $field_state['entity'][$i + 1];
    }
    else {
      unset($field_state['entity'][$i]);
    }
  }
  // Replace the deleted entity with an empty one. This helps to ensure that
  // trying to add a new entity won't ressurect a deleted entity
  // from thev trash bin.
  // $count = count($field_state['entity']);
  // Then remove the last item. But we must not go negative.
  if ($field_state['items_count'] > 0) {
    $field_state['items_count']--;
  }
  // Fix the weights. Field UI lets the weights be in a range of
  // (-1 * item_count) to (item_count). This means that when we remove one,
  // the range shrinks; weights outside of that range then get set to
  // the first item in the select by the browser, floating them to the top.
  // We use a brute force method because we lost weights on both ends
  // and if the user has moved things around, we have to cascade because
  // if I have items weight weights 3 and 4, and I change 4 to 3 but leave
  // the 3, the order of the two 3s now is undefined and may not match what
  // the user had selected.
  $input = drupal_array_get_nested_value($form_state[$inpt], $address);
  // Sort by weight.
  uasort($input, '_field_sort_items_helper');
  // Reweight everything in the correct order.
  $weight = -1 * $field_state['items_count'];
  foreach ($input as $key => $item) {
    if ($item) {
      $input[$key]['_weight'] = $weight++;
    }
  }
  drupal_array_set_nested_value($form_state[$inpt], $address, $input);
  field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
  $form_state['rebuild'] = TRUE;
}
